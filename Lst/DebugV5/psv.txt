; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--cpp11 --list --debug -c --asm --interleave --exceptions --protect_stack -o.\out\debugv5\psv.o --asm_dir=.\Lst\DebugV5\ --list_dir=.\Lst\DebugV5\ --depend=.\out\debugv5\psv.d --cpu=Cortex-M4 --apcs=interwork --no_unaligned_access -O0 --diag_suppress=9931 -I.\Inc -I.\Inc\Debug -I.\Inc\Cortex -I.\Inc\Drivers -I.\Inc\Utilities -D__UVISION_VERSION=527 -DSTM32F429xx -DCORTEX_M=4 -DDEBUG --omf_browse=.\out\debugv5\psv.crf --no_rtti Src\Cortex\PSV.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Z21PsvTrigger_privilegedv PROC ; PsvTrigger_privileged()
;;;16     
;;;17     void PsvTrigger_privileged() noexcept
000000  b510              PUSH     {r4,lr}
;;;18     { 
;;;19       ASSERT(Cortex::IsPrivileged()); 
000002  f7fffffe          BL       _ZN6Cortex12IsPrivilegedEv ; Cortex::IsPrivileged()
000006  b100              CBZ      r0,|L1.10|
000008  e005              B        |L1.22|
                  |L1.10|
00000a  4b08              LDR      r3,|L1.44|
00000c  2213              MOVS     r2,#0x13
00000e  a108              ADR      r1,|L1.48|
000010  a009              ADR      r0,|L1.56|
000012  f7fffffe          BL       _Z15AssertionFailedPKcS0_jS0_ ; AssertionFailed(const char*, const char*, unsigned, const char*)
                  |L1.22|
;;;20       
;;;21       rbSCB.ICSR = MASK_SCB_ICSR_PENDSVCSET; 
000016  f04f5080          MOV      r0,#0x10000000
00001a  490d              LDR      r1,|L1.80|
00001c  6048              STR      r0,[r1,#4]  ; rbSCB
;;;22     }
00001e  bd10              POP      {r4,pc}
;;;23     
                          ENDP

                  _Z10PsvTriggerv PROC ; PsvTrigger()
;;;24     __weak void PsvTrigger() noexcept { PsvTrigger_privileged(); }
000020  b510              PUSH     {r4,lr}
000022  f7fffffe          BL       _Z21PsvTrigger_privilegedv ; PsvTrigger_privileged()
000026  bd10              POP      {r4,pc}
;;;25     
                          ENDP

                  IRQ_PSV PROC
;;;26     extern "C" void IRQ_PSV(void)
000028  be01              BKPT     #1
;;;27     {
;;;28       DEBUG_BREAK(1U);
;;;29     }
00002a  4770              BX       lr
;;;30     
                          ENDP

                  |L1.44|
                          DCD      _ZZ21PsvTrigger_privilegedvE19__PRETTY_FUNCTION__ ; PsvTrigger_privileged()::__PRETTY_FUNCTION__
                  |L1.48|
000030  5053562e          DCB      "PSV.cpp",0
000034  63707000
                  |L1.56|
000038  436f7274          DCB      "Cortex::IsPrivileged()",0
00003c  65783a3a
000040  49735072
000044  6976696c
000048  65676564
00004c  282900  
00004f  00                DCB      0
                  |L1.80|
                          DCD      rbSCB

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  _ZZ21PsvTrigger_privilegedvE19__PRETTY_FUNCTION__ ; PsvTrigger_privileged()::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  20507376          DCB      0x20,0x50,0x73,0x76
000008  54726967          DCB      0x54,0x72,0x69,0x67
00000c  6765725f          DCB      0x67,0x65,0x72,0x5f
000010  70726976          DCB      0x70,0x72,0x69,0x76
000014  696c6567          DCB      0x69,0x6c,0x65,0x67
000018  65642829          DCB      0x65,0x64,0x28,0x29
00001c  00                DCB      0x00

                          AREA ||i._ZN6Cortex12IsPrivilegedEv||, COMGROUP=_ZN6Cortex12IsPrivilegedEv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex12IsPrivilegedEv PROC ; Cortex::IsPrivileged()
;;;288      /// \note Exception mode ist immer privilegiert, unabh√§ngig von CONTROL[0]!
;;;289      FORCE_INLINE bool IsPrivileged() noexcept { return (GetCONTROL() & CONTROL_usermode) == 0U || ! IsThreadMode(); }
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _ZN6Cortex10GetCONTROLEv ; Cortex::GetCONTROL()
000006  f0000001          AND      r0,r0,#1
00000a  b110              CBZ      r0,|L15.18|
00000c  f7fffffe          BL       _ZN6Cortex12IsThreadModeEv ; Cortex::IsThreadMode()
000010  b908              CBNZ     r0,|L15.22|
                  |L15.18|
000012  2001              MOVS     r0,#1
000014  e000              B        |L15.24|
                  |L15.22|
000016  2000              MOVS     r0,#0
                  |L15.24|
000018  4604              MOV      r4,r0
00001a  4620              MOV      r0,r4
00001c  bd10              POP      {r4,pc}
;;;290      
                          ENDP


                          AREA ||area_number.16||, COMGROUP=_ZN6Cortex12IsPrivilegedEv, LINKORDER=||i._ZN6Cortex12IsPrivilegedEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex12IsPrivilegedEv||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex12IsThreadModeEv||, COMGROUP=_ZN6Cortex12IsThreadModeEv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex12IsThreadModeEv PROC ; Cortex::IsThreadMode()
;;;283      /// \note Die Bestimmung, ob sich der Prozessor im Thread-Modus befindet, erfolgt anhand der aktuellen ISR-Nummer.
;;;284      FORCE_INLINE bool IsThreadMode() noexcept { return GetCurrentIsrNum() == isrNum_THREAD_MODE; }
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _ZN6Cortex16GetCurrentIsrNumEv ; Cortex::GetCurrentIsrNum()
000006  b908              CBNZ     r0,|L22.12|
000008  2001              MOVS     r0,#1
00000a  e000              B        |L22.14|
                  |L22.12|
00000c  2000              MOVS     r0,#0
                  |L22.14|
00000e  4604              MOV      r4,r0
000010  4620              MOV      r0,r4
000012  bd10              POP      {r4,pc}
;;;285    
                          ENDP


                          AREA ||area_number.23||, COMGROUP=_ZN6Cortex12IsThreadModeEv, LINKORDER=||i._ZN6Cortex12IsThreadModeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex12IsThreadModeEv||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex10GetCONTROLEv||, COMGROUP=_ZN6Cortex10GetCONTROLEv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex10GetCONTROLEv PROC ; Cortex::GetCONTROL()
;;;153      /// \return Wert des CONTROL-Registers
;;;154      FORCE_INLINE WORD GetCONTROL() noexcept { return ARM_RSR(control); }
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _Z15ARM_RSR_controlv ; ARM_RSR_control()
000006  4604              MOV      r4,r0
000008  4620              MOV      r0,r4
00000a  bd10              POP      {r4,pc}
;;;155    
                          ENDP


                          AREA ||area_number.30||, COMGROUP=_ZN6Cortex10GetCONTROLEv, LINKORDER=||i._ZN6Cortex10GetCONTROLEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex10GetCONTROLEv||
                          DCD      0x00000001

                          AREA ||i._Z15ARM_RSR_controlv||, COMGROUP=_Z15ARM_RSR_controlv, CODE, READONLY, ALIGN=1

                  _Z15ARM_RSR_controlv PROC ; ARM_RSR_control()
;;;38     
;;;39     DEFINE_ARM_RSR(control)
000000  f3ef8114          MRS      r1,CONTROL
000004  4608              MOV      r0,r1
000006  4770              BX       lr
;;;40     DEFINE_ARM_WSR(control)
                          ENDP


                          AREA ||area_number.37||, COMGROUP=_Z15ARM_RSR_controlv, LINKORDER=||i._Z15ARM_RSR_controlv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.37||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z15ARM_RSR_controlv||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex16GetCurrentIsrNumEv||, COMGROUP=_ZN6Cortex16GetCurrentIsrNumEv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex16GetCurrentIsrNumEv PROC ; Cortex::GetCurrentIsrNum()
;;;278      /// \return Nummer der aktiven Exception.
;;;279      FORCE_INLINE WORD GetCurrentIsrNum() noexcept { return GetIPSR(); }
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _ZN6Cortex7GetIPSREv ; Cortex::GetIPSR()
000006  4604              MOV      r4,r0
000008  4620              MOV      r0,r4
00000a  bd10              POP      {r4,pc}
;;;280    
                          ENDP


                          AREA ||area_number.44||, COMGROUP=_ZN6Cortex16GetCurrentIsrNumEv, LINKORDER=||i._ZN6Cortex16GetCurrentIsrNumEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.44||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex16GetCurrentIsrNumEv||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex7GetIPSREv||, COMGROUP=_ZN6Cortex7GetIPSREv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex7GetIPSREv PROC ; Cortex::GetIPSR()
;;;220    
;;;221      FORCE_INLINE WORD GetIPSR() noexcept { return ARM_RSR(ipsr); }
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _Z12ARM_RSR_ipsrv ; ARM_RSR_ipsr()
000006  4604              MOV      r4,r0
000008  4620              MOV      r0,r4
00000a  bd10              POP      {r4,pc}
;;;222      FORCE_INLINE WORD GetAPSR() noexcept { return ARM_RSR(apsr); }
                          ENDP


                          AREA ||area_number.51||, COMGROUP=_ZN6Cortex7GetIPSREv, LINKORDER=||i._ZN6Cortex7GetIPSREv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.51||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex7GetIPSREv||
                          DCD      0x00000001

                          AREA ||i._Z12ARM_RSR_ipsrv||, COMGROUP=_Z12ARM_RSR_ipsrv, CODE, READONLY, ALIGN=1

                  _Z12ARM_RSR_ipsrv PROC ; ARM_RSR_ipsr()
;;;54     DEFINE_ARM_RSR(apsr)
;;;55     DEFINE_ARM_RSR(ipsr)
000000  f3ef8105          MRS      r1,IPSR
000004  4608              MOV      r0,r1
000006  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||area_number.58||, COMGROUP=_Z12ARM_RSR_ipsrv, LINKORDER=||i._Z12ARM_RSR_ipsrv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.58||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z12ARM_RSR_ipsrv||
                          DCD      0x00000001

                          AREA ||i.__ARM_common_noexcept_landing||, COMGROUP=__ARM_common_noexcept_landing, CODE, READONLY, ALIGN=1

                  __ARM_common_noexcept_landing PROC
000000  f7ffbffe          B.W      __cxa_call_terminate
                          ENDP


                          AREA ||area_number.65||, COMGROUP=__ARM_common_noexcept_landing, LINKORDER=||i.__ARM_common_noexcept_landing||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.65||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__ARM_common_noexcept_landing||
                          DCD      0x00000001
