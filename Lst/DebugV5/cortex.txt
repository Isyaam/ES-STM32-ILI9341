; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--cpp11 --list --debug -c --asm --interleave --exceptions --protect_stack -o.\out\debugv5\cortex.o --asm_dir=.\Lst\DebugV5\ --list_dir=.\Lst\DebugV5\ --depend=.\out\debugv5\cortex.d --cpu=Cortex-M4 --apcs=interwork --no_unaligned_access -O0 --diag_suppress=9931 -I.\Inc -I.\Inc\Debug -I.\Inc\Cortex -I.\Inc\Drivers -I.\Inc\Utilities -D__UVISION_VERSION=527 -DSTM32F429xx -DCORTEX_M=4 -DDEBUG --omf_browse=.\out\debugv5\cortex.crf --no_rtti Src\Cortex\Cortex.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ZN6Cortex9FpuEnableEv PROC ; Cortex::FpuEnable()
;;;17     
;;;18     void Cortex::FpuEnable() noexcept  
000000  b510              PUSH     {r4,lr}
;;;19     { 
;;;20       ISB();
000002  f7fffffe          BL       _ZN6Cortex3ISBEv ; Cortex::ISB()
;;;21     
;;;22       constexpr WORD const fpuOn = (3U << (10 * 2)) | (3U << (11 * 2));  // CP10 and CP11 Full Access
000006  f44f0470          MOV      r4,#0xf00000
;;;23       
;;;24       rbSCB.CPACR = fpuOn; 
00000a  4620              MOV      r0,r4
00000c  4956              LDR      r1,|L1.360|
00000e  f8c10088          STR      r0,[r1,#0x88]  ; rbSCB
;;;25       
;;;26       DSB();
000012  f7fffffe          BL       _ZN6Cortex3DSBEv ; Cortex::DSB()
;;;27     }
000016  bd10              POP      {r4,pc}
;;;28     
                          ENDP

                  _ZN6Cortex10FpuDisableEv PROC ; Cortex::FpuDisable()
;;;29     void Cortex::FpuDisable() noexcept
000018  b510              PUSH     {r4,lr}
;;;30     { 
;;;31       ISB();
00001a  f7fffffe          BL       _ZN6Cortex3ISBEv ; Cortex::ISB()
;;;32      
;;;33       rbSCB.CPACR = 0U;
00001e  2000              MOVS     r0,#0
000020  4951              LDR      r1,|L1.360|
000022  f8c10088          STR      r0,[r1,#0x88]  ; rbSCB
;;;34      
;;;35       DSB();
000026  f7fffffe          BL       _ZN6Cortex3DSBEv ; Cortex::DSB()
;;;36       
;;;37       ARM_WSR(control, ARM_RSR(control) & ~CONTROL_fpucntxt);
00002a  f7fffffe          BL       _Z15ARM_RSR_controlv ; ARM_RSR_control()
00002e  f0200404          BIC      r4,r0,#4
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       _Z15ARM_WSR_controlj ; ARM_WSR_control(unsigned)
;;;38     }
000038  bd10              POP      {r4,pc}
;;;39     
                          ENDP

                  _ZN6Cortex16Reset_privilegedEv PROC ; Cortex::Reset_privileged()
;;;40     void Cortex::Reset_privileged() noexcept
00003a  bf00              NOP      
                  |L1.60|
;;;41     {
;;;42       for ( ;; ) 
;;;43       {
;;;44         DEBUG_BREAK(3);
00003c  be03              BKPT     #3
;;;45     
;;;46         rbSCB.AIRCR = MASK_SCB_AIRCR_SYSRESETREQ | MASK_SCB_AIRCR_VECTKEY_WR;
00003e  484b              LDR      r0,|L1.364|
000040  4949              LDR      r1,|L1.360|
000042  60c8              STR      r0,[r1,#0xc]  ; rbSCB
000044  e7fa              B        |L1.60|
;;;47       }
;;;48     }
;;;49     
                          ENDP

                  _ZN6Cortex5ResetEv PROC ; Cortex::Reset()
;;;50     __weak void Cortex::Reset() noexcept 
000046  f7fffffe          BL       _ZN6Cortex16Reset_privilegedEv ; Cortex::Reset_privileged()
;;;51     { 
;;;52       Cortex::Reset_privileged(); 
;;;53     }
;;;54     
                          ENDP

                  _ZN6Cortex12AltStackIsOkEv PROC ; Cortex::AltStackIsOk()
;;;55     bool Cortex::AltStackIsOk() noexcept
00004a  4949              LDR      r1,|L1.368|
;;;56     {
;;;57       return boas == nullptr || *boas == magical;
00004c  6809              LDR      r1,[r1,#0]  ; boas
00004e  b129              CBZ      r1,|L1.92|
000050  4947              LDR      r1,|L1.368|
000052  6809              LDR      r1,[r1,#0]  ; boas
000054  6809              LDR      r1,[r1,#0]
000056  f1b13f55          CMP      r1,#0x55555555
00005a  d101              BNE      |L1.96|
                  |L1.92|
00005c  2101              MOVS     r1,#1
00005e  e000              B        |L1.98|
                  |L1.96|
000060  2100              MOVS     r1,#0
                  |L1.98|
000062  4608              MOV      r0,r1
;;;58     }
000064  4770              BX       lr
;;;59     
                          ENDP

                  _ZN6Cortex10GetPSVPrioEv PROC ; Cortex::GetPSVPrio()
;;;60     __weak BYTE Cortex::GetPSVPrio() noexcept { return 0xF0; }
000066  20f0              MOVS     r0,#0xf0
000068  4770              BX       lr
;;;61     __weak BYTE Cortex::GetSVCPrio() noexcept { return 0x10; }
                          ENDP

                  _ZN6Cortex10GetSVCPrioEv PROC ; Cortex::GetSVCPrio()
00006a  2010              MOVS     r0,#0x10
00006c  4770              BX       lr
;;;62     __weak BYTE Cortex::GetSTKPrio() noexcept { return 0x20; }
                          ENDP

                  _ZN6Cortex10GetSTKPrioEv PROC ; Cortex::GetSTKPrio()
00006e  2020              MOVS     r0,#0x20
000070  4770              BX       lr
;;;63     __weak BYTE Cortex::GetMinPrio() noexcept { return GetSTKPrio(); }
                          ENDP

                  _ZN6Cortex10GetMinPrioEv PROC ; Cortex::GetMinPrio()
000072  b510              PUSH     {r4,lr}
000074  f7fffffe          BL       _ZN6Cortex10GetSTKPrioEv ; Cortex::GetSTKPrio()
000078  4604              MOV      r4,r0
00007a  4620              MOV      r0,r4
00007c  bd10              POP      {r4,pc}
;;;64     
                          ENDP

                  _ZN6Cortex10SetCONTROLEj PROC ; Cortex::SetCONTROL(unsigned)
;;;65     __weak void Cortex::SetCONTROL(WORD const value) noexcept {        SetCONTROL_privileged(value); }
00007e  b510              PUSH     {r4,lr}
000080  4604              MOV      r4,r0
000082  4620              MOV      r0,r4
000084  f7fffffe          BL       _ZN6Cortex21SetCONTROL_privilegedEj ; Cortex::SetCONTROL_privileged(unsigned)
000088  bd10              POP      {r4,pc}
;;;66     __weak void Cortex::SetBASEPRI(WORD const value) noexcept {        SetBASEPRI_privileged(value); }
                          ENDP

                  _ZN6Cortex10SetBASEPRIEj PROC ; Cortex::SetBASEPRI(unsigned)
00008a  b510              PUSH     {r4,lr}
00008c  4604              MOV      r4,r0
00008e  4620              MOV      r0,r4
000090  f7fffffe          BL       _ZN6Cortex21SetBASEPRI_privilegedEj ; Cortex::SetBASEPRI_privileged(unsigned)
000094  bd10              POP      {r4,pc}
;;;67     __weak WORD Cortex::GetBASEPRI()                 noexcept { return GetBASEPRI_privileged(); }
                          ENDP

                  _ZN6Cortex10GetBASEPRIEv PROC ; Cortex::GetBASEPRI()
000096  b510              PUSH     {r4,lr}
000098  f7fffffe          BL       _ZN6Cortex21GetBASEPRI_privilegedEv ; Cortex::GetBASEPRI_privileged()
00009c  4604              MOV      r4,r0
00009e  4620              MOV      r0,r4
0000a0  bd10              POP      {r4,pc}
;;;68     __weak void Cortex::SetPRIMASK()                 noexcept {        SetPRIMASK_privileged(); }
                          ENDP

                  _ZN6Cortex21SetPRIMASK_privilegedEv PROC ; Cortex::SetPRIMASK_privileged()
;;;70     
;;;71     void Cortex::SetPRIMASK_privileged() noexcept
0000a2  b510              PUSH     {r4,lr}
;;;72     {
;;;73       ISB(); 
0000a4  f7fffffe          BL       _ZN6Cortex3ISBEv ; Cortex::ISB()
;;;74       
;;;75       ARM_WSR_primask(1U);
0000a8  2001              MOVS     r0,#1
0000aa  f7fffffe          BL       _Z15ARM_WSR_primaskj ; ARM_WSR_primask(unsigned)
;;;76       ARM_WSR_control(ARM_RSR_control() & ~CONTROL_usermode);
0000ae  f7fffffe          BL       _Z15ARM_RSR_controlv ; ARM_RSR_control()
0000b2  f0200401          BIC      r4,r0,#1
0000b6  4620              MOV      r0,r4
0000b8  f7fffffe          BL       _Z15ARM_WSR_controlj ; ARM_WSR_control(unsigned)
;;;77     }
0000bc  bd10              POP      {r4,pc}
;;;78     
                          ENDP

                  _ZN6Cortex10SetPRIMASKEv PROC ; Cortex::SetPRIMASK()
;;;67     __weak WORD Cortex::GetBASEPRI()                 noexcept { return GetBASEPRI_privileged(); }
;;;68     __weak void Cortex::SetPRIMASK()                 noexcept {        SetPRIMASK_privileged(); }
0000be  b510              PUSH     {r4,lr}
0000c0  f7fffffe          BL       _ZN6Cortex21SetPRIMASK_privilegedEv ; Cortex::SetPRIMASK_privileged()
0000c4  bd10              POP      {r4,pc}
;;;69     __weak WORD Cortex::GetPRIMASK()                 noexcept { return GetPRIMASK_privileged(); }
                          ENDP

                  _ZN6Cortex21GetPRIMASK_privilegedEv PROC ; Cortex::GetPRIMASK_privileged()
;;;79     void Cortex::ClrPRIMASK_privileged() noexcept { ISB();        ARM_WSR_primask(0U); }
;;;80     WORD Cortex::GetPRIMASK_privileged() noexcept { ISB(); return ARM_RSR_primask(); }
0000c6  b510              PUSH     {r4,lr}
0000c8  f7fffffe          BL       _ZN6Cortex3ISBEv ; Cortex::ISB()
0000cc  f7fffffe          BL       _Z15ARM_RSR_primaskv ; ARM_RSR_primask()
0000d0  4604              MOV      r4,r0
0000d2  4620              MOV      r0,r4
0000d4  bd10              POP      {r4,pc}
;;;81     
                          ENDP

                  _ZN6Cortex10GetPRIMASKEv PROC ; Cortex::GetPRIMASK()
;;;68     __weak void Cortex::SetPRIMASK()                 noexcept {        SetPRIMASK_privileged(); }
;;;69     __weak WORD Cortex::GetPRIMASK()                 noexcept { return GetPRIMASK_privileged(); }
0000d6  b510              PUSH     {r4,lr}
0000d8  f7fffffe          BL       _ZN6Cortex21GetPRIMASK_privilegedEv ; Cortex::GetPRIMASK_privileged()
0000dc  4604              MOV      r4,r0
0000de  4620              MOV      r0,r4
0000e0  bd10              POP      {r4,pc}
;;;70     
                          ENDP

                  _ZN6Cortex21ClrPRIMASK_privilegedEv PROC ; Cortex::ClrPRIMASK_privileged()
;;;78     
;;;79     void Cortex::ClrPRIMASK_privileged() noexcept { ISB();        ARM_WSR_primask(0U); }
0000e2  b510              PUSH     {r4,lr}
0000e4  f7fffffe          BL       _ZN6Cortex3ISBEv ; Cortex::ISB()
0000e8  2000              MOVS     r0,#0
0000ea  f7fffffe          BL       _Z15ARM_WSR_primaskj ; ARM_WSR_primask(unsigned)
0000ee  bd10              POP      {r4,pc}
;;;80     WORD Cortex::GetPRIMASK_privileged() noexcept { ISB(); return ARM_RSR_primask(); }
                          ENDP

                  _ZN6Cortex11SwitchStackEPjj PROC ; Cortex::SwitchStack(unsigned*, unsigned)
;;;81     
;;;82     void Cortex::SwitchStack(WORD * const stack, unsigned num) noexcept
0000f0  e92d41f0          PUSH     {r4-r8,lr}
;;;83     {
0000f4  4604              MOV      r4,r0
0000f6  460d              MOV      r5,r1
;;;84       auto i = num;
0000f8  462e              MOV      r6,r5
;;;85       
;;;86       do {
0000fa  bf00              NOP      
                  |L1.252|
;;;87         stack[--i] = magical;
0000fc  f04f3155          MOV      r1,#0x55555555
000100  1e70              SUBS     r0,r6,#1
000102  4606              MOV      r6,r0
000104  f8441020          STR      r1,[r4,r0,LSL #2]
;;;88       } while ( i > 0 );
000108  2e00              CMP      r6,#0
00010a  d1f7              BNE      |L1.252|
;;;89     
;;;90       boas = stack;
00010c  4818              LDR      r0,|L1.368|
00010e  6004              STR      r4,[r0,#0]  ; boas
;;;91     
;;;92       ISB();
000110  f7fffffe          BL       _ZN6Cortex3ISBEv ; Cortex::ISB()
;;;93       
;;;94       WORD const tos((WORD)(stack + num - 1U));
000114  eb040085          ADD      r0,r4,r5,LSL #2
000118  1f07              SUBS     r7,r0,#4
;;;95       
;;;96       ARM_WSR_psp(ARM_RSR_msp());
00011a  f7fffffe          BL       _Z11ARM_RSR_mspv ; ARM_RSR_msp()
00011e  4680              MOV      r8,r0
000120  f7fffffe          BL       _Z11ARM_WSR_pspj ; ARM_WSR_psp(unsigned)
;;;97       ARM_WSR_msp(tos);
000124  4638              MOV      r0,r7
000126  f7fffffe          BL       _Z11ARM_WSR_mspj ; ARM_WSR_msp(unsigned)
;;;98       
;;;99       ARM_WSR_control(ARM_RSR_control() |  CONTROL_altstack);
00012a  f7fffffe          BL       _Z15ARM_RSR_controlv ; ARM_RSR_control()
00012e  f0400802          ORR      r8,r0,#2
000132  4640              MOV      r0,r8
000134  f7fffffe          BL       _Z15ARM_WSR_controlj ; ARM_WSR_control(unsigned)
;;;100    }
000138  e8bd81f0          POP      {r4-r8,pc}
;;;101    
                          ENDP

                  _ZN6Cortex15IsInterruptableEh PROC ; Cortex::IsInterruptable(unsigned char)
;;;102    bool Cortex::IsInterruptable(BYTE const prio) noexcept
00013c  b570              PUSH     {r4-r6,lr}
;;;103    {
00013e  4605              MOV      r5,r0
;;;104      if ( GetPRIMASK() != 0U )
000140  f7fffffe          BL       _ZN6Cortex10GetPRIMASKEv ; Cortex::GetPRIMASK()
000144  b108              CBZ      r0,|L1.330|
;;;105        return false;
000146  2000              MOVS     r0,#0
                  |L1.328|
;;;106        
;;;107      auto const basepri(GetBASEPRI());
;;;108      
;;;109      if ( basepri == 0x00U )
;;;110        return true;
;;;111        
;;;112      return basepri > prio;
;;;113    }
000148  bd70              POP      {r4-r6,pc}
                  |L1.330|
00014a  f7fffffe          BL       _ZN6Cortex10GetBASEPRIEv ; Cortex::GetBASEPRI()
00014e  4604              MOV      r4,r0                 ;107
000150  b90c              CBNZ     r4,|L1.342|
000152  2001              MOVS     r0,#1                 ;110
000154  e7f8              B        |L1.328|
                  |L1.342|
000156  42ac              CMP      r4,r5                 ;112
000158  d901              BLS      |L1.350|
00015a  2001              MOVS     r0,#1                 ;112
00015c  e000              B        |L1.352|
                  |L1.350|
00015e  2000              MOVS     r0,#0                 ;112
                  |L1.352|
000160  4606              MOV      r6,r0                 ;112
000162  4630              MOV      r0,r6                 ;112
000164  e7f0              B        |L1.328|
;;;114    
                          ENDP

000166  0000              DCW      0x0000
                  |L1.360|
                          DCD      rbSCB
                  |L1.364|
                          DCD      0x05fa0004
                  |L1.368|
                          DCD      boas

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.data||, DATA, ALIGN=2

                  boas
                          DCD      0x00000000

                          AREA ||i._Z15ARM_RSR_controlv||, COMGROUP=_Z15ARM_RSR_controlv, CODE, READONLY, ALIGN=1

                  _Z15ARM_RSR_controlv PROC ; ARM_RSR_control()
;;;38     
;;;39     DEFINE_ARM_RSR(control)
000000  f3ef8114          MRS      r1,CONTROL
000004  4608              MOV      r0,r1
000006  4770              BX       lr
;;;40     DEFINE_ARM_WSR(control)
                          ENDP


                          AREA ||area_number.16||, COMGROUP=_Z15ARM_RSR_controlv, LINKORDER=||i._Z15ARM_RSR_controlv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z15ARM_RSR_controlv||
                          DCD      0x00000001

                          AREA ||i._Z15ARM_WSR_controlj||, COMGROUP=_Z15ARM_WSR_controlj, CODE, READONLY, ALIGN=1

                  _Z15ARM_WSR_controlj PROC ; ARM_WSR_control(unsigned)
;;;39     DEFINE_ARM_RSR(control)
;;;40     DEFINE_ARM_WSR(control)
000000  f3808814          MSR      CONTROL,r0
000004  4770              BX       lr
;;;41     DEFINE_ARM_RSR(basepri)
                          ENDP


                          AREA ||area_number.23||, COMGROUP=_Z15ARM_WSR_controlj, LINKORDER=||i._Z15ARM_WSR_controlj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z15ARM_WSR_controlj||
                          DCD      0x00000001

                          AREA ||i._Z15ARM_RSR_primaskv||, COMGROUP=_Z15ARM_RSR_primaskv, CODE, READONLY, ALIGN=1

                  _Z15ARM_RSR_primaskv PROC ; ARM_RSR_primask()
;;;42     DEFINE_ARM_WSR(basepri)
;;;43     DEFINE_ARM_RSR(primask)
000000  f3ef8110          MRS      r1,PRIMASK
000004  4608              MOV      r0,r1
000006  4770              BX       lr
;;;44     DEFINE_ARM_WSR(primask)
                          ENDP


                          AREA ||area_number.30||, COMGROUP=_Z15ARM_RSR_primaskv, LINKORDER=||i._Z15ARM_RSR_primaskv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z15ARM_RSR_primaskv||
                          DCD      0x00000001

                          AREA ||i._Z15ARM_WSR_primaskj||, COMGROUP=_Z15ARM_WSR_primaskj, CODE, READONLY, ALIGN=1

                  _Z15ARM_WSR_primaskj PROC ; ARM_WSR_primask(unsigned)
;;;43     DEFINE_ARM_RSR(primask)
;;;44     DEFINE_ARM_WSR(primask)
000000  f3808810          MSR      PRIMASK,r0
000004  4770              BX       lr
;;;45     DEFINE_ARM_RSR(faultmask)
                          ENDP


                          AREA ||area_number.37||, COMGROUP=_Z15ARM_WSR_primaskj, LINKORDER=||i._Z15ARM_WSR_primaskj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.37||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z15ARM_WSR_primaskj||
                          DCD      0x00000001

                          AREA ||i._Z11ARM_WSR_pspj||, COMGROUP=_Z11ARM_WSR_pspj, CODE, READONLY, ALIGN=1

                  _Z11ARM_WSR_pspj PROC ; ARM_WSR_psp(unsigned)
;;;48     DEFINE_ARM_RSR(psp)
;;;49     DEFINE_ARM_WSR(psp)
000000  f3808809          MSR      PSP,r0
000004  4770              BX       lr
;;;50     DEFINE_ARM_RSR(msp)
                          ENDP


                          AREA ||area_number.44||, COMGROUP=_Z11ARM_WSR_pspj, LINKORDER=||i._Z11ARM_WSR_pspj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.44||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z11ARM_WSR_pspj||
                          DCD      0x00000001

                          AREA ||i._Z11ARM_RSR_mspv||, COMGROUP=_Z11ARM_RSR_mspv, CODE, READONLY, ALIGN=1

                  _Z11ARM_RSR_mspv PROC ; ARM_RSR_msp()
;;;49     DEFINE_ARM_WSR(psp)
;;;50     DEFINE_ARM_RSR(msp)
000000  f3ef8108          MRS      r1,MSP
000004  4608              MOV      r0,r1
000006  4770              BX       lr
;;;51     DEFINE_ARM_WSR(msp)
                          ENDP


                          AREA ||area_number.51||, COMGROUP=_Z11ARM_RSR_mspv, LINKORDER=||i._Z11ARM_RSR_mspv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.51||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z11ARM_RSR_mspv||
                          DCD      0x00000001

                          AREA ||i._Z11ARM_WSR_mspj||, COMGROUP=_Z11ARM_WSR_mspj, CODE, READONLY, ALIGN=1

                  _Z11ARM_WSR_mspj PROC ; ARM_WSR_msp(unsigned)
;;;50     DEFINE_ARM_RSR(msp)
;;;51     DEFINE_ARM_WSR(msp)
000000  f3808808          MSR      MSP,r0
000004  4770              BX       lr
;;;52     
                          ENDP


                          AREA ||area_number.58||, COMGROUP=_Z11ARM_WSR_mspj, LINKORDER=||i._Z11ARM_WSR_mspj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.58||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z11ARM_WSR_mspj||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex3DSBEv||, COMGROUP=_ZN6Cortex3DSBEv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex3DSBEv PROC ; Cortex::DSB()
;;;122      FORCE_INLINE void DMB() noexcept { SCHEDULE_BARRIER(); __dmb(0xF); SCHEDULE_BARRIER(); }  
;;;123      FORCE_INLINE void DSB() noexcept { SCHEDULE_BARRIER(); __dsb(0xF); SCHEDULE_BARRIER(); }
000000  bf00              NOP      
000002  bf00              NOP      
000004  f3bf8f4f          DSB      
000008  bf00              NOP      
00000a  bf00              NOP      
00000c  4770              BX       lr
;;;124      FORCE_INLINE void ISB() noexcept { SCHEDULE_BARRIER(); __isb(0xF); SCHEDULE_BARRIER(); }
                          ENDP


                          AREA ||area_number.65||, COMGROUP=_ZN6Cortex3DSBEv, LINKORDER=||i._ZN6Cortex3DSBEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.65||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex3DSBEv||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex3ISBEv||, COMGROUP=_ZN6Cortex3ISBEv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex3ISBEv PROC ; Cortex::ISB()
;;;123      FORCE_INLINE void DSB() noexcept { SCHEDULE_BARRIER(); __dsb(0xF); SCHEDULE_BARRIER(); }
;;;124      FORCE_INLINE void ISB() noexcept { SCHEDULE_BARRIER(); __isb(0xF); SCHEDULE_BARRIER(); }
000000  bf00              NOP      
000002  bf00              NOP      
000004  f3bf8f6f          ISB      
000008  bf00              NOP      
00000a  bf00              NOP      
00000c  4770              BX       lr
;;;125    
                          ENDP


                          AREA ||area_number.72||, COMGROUP=_ZN6Cortex3ISBEv, LINKORDER=||i._ZN6Cortex3ISBEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.72||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex3ISBEv||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex21SetCONTROL_privilegedEj||, COMGROUP=_ZN6Cortex21SetCONTROL_privilegedEj, CODE, READONLY, ALIGN=1

                  _ZN6Cortex21SetCONTROL_privilegedEj PROC ; Cortex::SetCONTROL_privileged(unsigned)
;;;158      /// \note Der Prozessor muss sich im privilegierten Modus befinden. Es findet keine Prüfung statt, ob diese Voraussetzung zutrifft.
;;;159      FORCE_INLINE void SetCONTROL_privileged(WORD const value) noexcept { ARM_WSR(control, value); }
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _Z15ARM_WSR_controlj ; ARM_WSR_control(unsigned)
00000a  bd10              POP      {r4,pc}
;;;160    
                          ENDP


                          AREA ||area_number.79||, COMGROUP=_ZN6Cortex21SetCONTROL_privilegedEj, LINKORDER=||i._ZN6Cortex21SetCONTROL_privilegedEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.79||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex21SetCONTROL_privilegedEj||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex21GetBASEPRI_privilegedEv||, COMGROUP=_ZN6Cortex21GetBASEPRI_privilegedEv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex21GetBASEPRI_privilegedEv PROC ; Cortex::GetBASEPRI_privileged()
;;;165      /// \note Der Prozessor muss sich im privilegierten Modus befinden. Es findet keine Prüfung statt, ob diese Voraussetzung zutrifft.
;;;166      FORCE_INLINE WORD GetBASEPRI_privileged() noexcept { return ARM_RSR(basepri); }
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _Z15ARM_RSR_basepriv ; ARM_RSR_basepri()
000006  4604              MOV      r4,r0
000008  4620              MOV      r0,r4
00000a  bd10              POP      {r4,pc}
;;;167    
                          ENDP


                          AREA ||area_number.86||, COMGROUP=_ZN6Cortex21GetBASEPRI_privilegedEv, LINKORDER=||i._ZN6Cortex21GetBASEPRI_privilegedEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.86||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex21GetBASEPRI_privilegedEv||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex21SetBASEPRI_privilegedEj||, COMGROUP=_ZN6Cortex21SetBASEPRI_privilegedEj, CODE, READONLY, ALIGN=1

                  _ZN6Cortex21SetBASEPRI_privilegedEj PROC ; Cortex::SetBASEPRI_privileged(unsigned)
;;;174    
;;;175      FORCE_INLINE void SetBASEPRI_privileged(WORD const value) noexcept { ARM_WSR(basepri, value); }
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _Z15ARM_WSR_baseprij ; ARM_WSR_basepri(unsigned)
00000a  bd10              POP      {r4,pc}
;;;176    
                          ENDP


                          AREA ||area_number.93||, COMGROUP=_ZN6Cortex21SetBASEPRI_privilegedEj, LINKORDER=||i._ZN6Cortex21SetBASEPRI_privilegedEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.93||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex21SetBASEPRI_privilegedEj||
                          DCD      0x00000001

                          AREA ||i._Z15ARM_RSR_basepriv||, COMGROUP=_Z15ARM_RSR_basepriv, CODE, READONLY, ALIGN=1

                  _Z15ARM_RSR_basepriv PROC ; ARM_RSR_basepri()
;;;40     DEFINE_ARM_WSR(control)
;;;41     DEFINE_ARM_RSR(basepri)
000000  f3ef8111          MRS      r1,BASEPRI
000004  4608              MOV      r0,r1
000006  4770              BX       lr
;;;42     DEFINE_ARM_WSR(basepri)
                          ENDP


                          AREA ||area_number.100||, COMGROUP=_Z15ARM_RSR_basepriv, LINKORDER=||i._Z15ARM_RSR_basepriv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.100||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z15ARM_RSR_basepriv||
                          DCD      0x00000001

                          AREA ||i._Z15ARM_WSR_baseprij||, COMGROUP=_Z15ARM_WSR_baseprij, CODE, READONLY, ALIGN=1

                  _Z15ARM_WSR_baseprij PROC ; ARM_WSR_basepri(unsigned)
;;;41     DEFINE_ARM_RSR(basepri)
;;;42     DEFINE_ARM_WSR(basepri)
000000  f3808811          MSR      BASEPRI,r0
000004  4770              BX       lr
;;;43     DEFINE_ARM_RSR(primask)
                          ENDP


                          AREA ||area_number.107||, COMGROUP=_Z15ARM_WSR_baseprij, LINKORDER=||i._Z15ARM_WSR_baseprij||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.107||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z15ARM_WSR_baseprij||
                          DCD      0x00000001

                          AREA ||i.__ARM_common_noexcept_landing||, COMGROUP=__ARM_common_noexcept_landing, CODE, READONLY, ALIGN=1

                  __ARM_common_noexcept_landing PROC
000000  f7ffbffe          B.W      __cxa_call_terminate
                          ENDP


                          AREA ||area_number.114||, COMGROUP=__ARM_common_noexcept_landing, LINKORDER=||i.__ARM_common_noexcept_landing||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.114||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__ARM_common_noexcept_landing||
                          DCD      0x00000001
