; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--cpp11 --list --debug -c --asm --interleave --exceptions --protect_stack -o.\out\debugv5\drvltdc.o --asm_dir=.\Lst\DebugV5\ --list_dir=.\Lst\DebugV5\ --depend=.\out\debugv5\drvltdc.d --cpu=Cortex-M4 --apcs=interwork --no_unaligned_access -O0 --diag_suppress=9931 -I.\Inc -I.\Inc\Debug -I.\Inc\Cortex -I.\Inc\Drivers -I.\Inc\Utilities -D__UVISION_VERSION=527 -DSTM32F429xx -DCORTEX_M=4 -DDEBUG --omf_browse=.\out\debugv5\drvltdc.crf --no_rtti Src\DrvLtdc.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ZN5ILtdcC2Ev                  ; Alternate entry point ; ILtdc::ILtdc__sub_object()
                  _ZN5ILtdcC1Ev PROC ; ILtdc::ILtdc()
;;;10     
;;;11     ILtdc::ILtdc()
;;;12     {
;;;13     }
;;;14     
000000  4770              BX       lr
                          ENDP

                  _ZNK5ILtdc8initLTDCEv PROC ; ILtdc::initLTDC() const
;;;15     void ILtdc::initLTDC() const {
000002  e92d4ff0          PUSH     {r4-r11,lr}
000006  b085              SUB      sp,sp,#0x14
;;;16     	
;;;17     	// VSync HSync setzen
;;;18     	rbLTDC.SSCR = ((hSync - 1) << INDX_LTDC_SSCR_HSW) | ((vSync - 1) << INDX_LTDC_SSCR_VSH);	
000008  48b4              LDR      r0,|L1.732|
00000a  49b5              LDR      r1,|L1.736|
00000c  6088              STR      r0,[r1,#8]  ; rbLTDC
;;;19     	
;;;20     	// BackPorch
;;;21     	rbLTDC.BPCR = ((hSync + horBackPorch - 1) << INDX_LTDC_BPCR_AHBP) | ((vSync + verBackPorch - 1) << INDX_LTDC_BPCR_AVBP);
00000e  48b5              LDR      r0,|L1.740|
000010  60c8              STR      r0,[r1,#0xc]  ; rbLTDC
;;;22     	
;;;23     	// Active Width / Height
;;;24     	rbLTDC.AWCR = ((hSync + horBackPorch + width - 1) << INDX_LTDC_AWCR_AAW) | ((vSync + verBackPorch + height - 1) << INDX_LTDC_AWCR_AAH);
000012  48b5              LDR      r0,|L1.744|
000014  6108              STR      r0,[r1,#0x10]  ; rbLTDC
;;;25     
;;;26     	// Total Width / Height
;;;27     	rbLTDC.TWCR = ((verTotal - 1) << INDX_LTDC_TWCR_TOTALH) | ((horTotal - 1) << INDX_LTDC_TWCR_TOTALW);
000016  48b5              LDR      r0,|L1.748|
000018  6148              STR      r0,[r1,#0x14]  ; rbLTDC
;;;28     	
;;;29     	//Layer 0
;;;30     	rbLTDC.Layer0.CACR = 255;
00001a  21ff              MOVS     r1,#0xff
00001c  48b0              LDR      r0,|L1.736|
00001e  f8801098          STRB     r1,[r0,#0x98]
;;;31     	// Start und Stop pos für Weite Layer0
;;;32     	rbLTDC.Layer0.WHPCR = hSync + horBackPorch << INDX_LTDC_Lx_WHPCR_WHSTPOS | hSync + horBackPorch + width << INDX_LTDC_Lx_WHPCR_WHSPPOS;
000022  49b3              LDR      r1,|L1.752|
000024  f8c01088          STR      r1,[r0,#0x88]
;;;33     	// Start und Stop pos für Höhe Layer0
;;;34     	rbLTDC.Layer0.WVPCR = vSync + verBackPorch << INDX_LTDC_Lx_WVPCR_WVSTPOS | vSync + verBackPorch + height << INDX_LTDC_Lx_WVPCR_WVSPPOS;	
000028  49b2              LDR      r1,|L1.756|
00002a  f8c0108c          STR      r1,[r0,#0x8c]
;;;35     	
;;;36     	rbLTDC.Layer0.PFCR |= MASK_LTDC_Lx_PFCR_RGB565;
00002e  f8d00094          LDR      r0,[r0,#0x94]
000032  f0400102          ORR      r1,r0,#2
000036  48aa              LDR      r0,|L1.736|
000038  f8c01094          STR      r1,[r0,#0x94]
;;;37     	rbLTDC.Layer0.CFBAR = LAYER1;
00003c  f04f4150          MOV      r1,#0xd0000000
000040  f8c010ac          STR      r1,[r0,#0xac]
;;;38     	rbLTDC.Layer0.CFBLR |= ((width * 4) << 16 ) | (width * 4);
000044  f8d000b0          LDR      r0,[r0,#0xb0]
000048  49ab              LDR      r1,|L1.760|
00004a  4308              ORRS     r0,r0,r1
00004c  49a4              LDR      r1,|L1.736|
00004e  f8c100b0          STR      r0,[r1,#0xb0]
;;;39     	rbLTDC.Layer0.CFBLNR |= height;
000052  4608              MOV      r0,r1
000054  f8d000b4          LDR      r0,[r0,#0xb4]
000058  f44071a0          ORR      r1,r0,#0x140
00005c  48a0              LDR      r0,|L1.736|
00005e  f8c010b4          STR      r1,[r0,#0xb4]
;;;40     	
;;;41     	rbLTDC.Layer1.CACR = 255;
000062  21ff              MOVS     r1,#0xff
000064  f8801118          STRB     r1,[r0,#0x118]
;;;42     	// Start und Stop pos für Weite Layer1
;;;43     	rbLTDC.Layer1.WHPCR = hSync + horBackPorch + 70 << INDX_LTDC_Lx_WHPCR_WHSTPOS | hSync + horBackPorch + 170 << INDX_LTDC_Lx_WHPCR_WHSPPOS;
000068  49a4              LDR      r1,|L1.764|
00006a  f8c01108          STR      r1,[r0,#0x108]
;;;44     	// Start und Stop pos für Höhe Layer1
;;;45     	rbLTDC.Layer1.WVPCR = vSync + verBackPorch + 110 << INDX_LTDC_Lx_WVPCR_WVSTPOS | vSync + verBackPorch + 210 << INDX_LTDC_Lx_WVPCR_WVSPPOS;
00006e  49a4              LDR      r1,|L1.768|
000070  f8c0110c          STR      r1,[r0,#0x10c]
;;;46     	
;;;47     	rbLTDC.Layer1.PFCR |= MASK_LTDC_Lx_PFCR_ARGB8888;
000074  f8d00114          LDR      r0,[r0,#0x114]
000078  4999              LDR      r1,|L1.736|
00007a  f8c10114          STR      r0,[r1,#0x114]
;;;48     	rbLTDC.Layer1.CFBAR = LAYER2;
00007e  49a1              LDR      r1,|L1.772|
000080  4897              LDR      r0,|L1.736|
000082  f8c0112c          STR      r1,[r0,#0x12c]
;;;49     	rbLTDC.Layer1.CFBLR |= ((102* 4) << 16 ) | (102 * 4);
000086  f8d00130          LDR      r0,[r0,#0x130]
00008a  499f              LDR      r1,|L1.776|
00008c  4308              ORRS     r0,r0,r1
00008e  4994              LDR      r1,|L1.736|
000090  f8c10130          STR      r0,[r1,#0x130]
;;;50     	rbLTDC.Layer1.CFBLNR |= 102;
000094  4608              MOV      r0,r1
000096  f8d00134          LDR      r0,[r0,#0x134]
00009a  f0400166          ORR      r1,r0,#0x66
00009e  4890              LDR      r0,|L1.736|
0000a0  f8c01134          STR      r1,[r0,#0x134]
;;;51     	
;;;52     	int* addr = (int*)LAYER2;
0000a4  f8df925c          LDR      r9,|L1.772|
;;;53     	for(int i = 0; i < (101 * 101 * 4);i++){
0000a8  2000              MOVS     r0,#0
0000aa  e005              B        |L1.184|
                  |L1.172|
;;;54     		*addr = 0x00000000;
0000ac  2100              MOVS     r1,#0
0000ae  f8c91000          STR      r1,[r9,#0]
;;;55     		addr = addr + 1;
0000b2  f1090904          ADD      r9,r9,#4
0000b6  1c40              ADDS     r0,r0,#1              ;53
                  |L1.184|
0000b8  f6497164          MOV      r1,#0x9f64            ;53
0000bc  4288              CMP      r0,r1                 ;53
0000be  dbf5              BLT      |L1.172|
;;;56     	}
;;;57     	
;;;58     	//DMA2D Clock enable
;;;59     	AHBClockEnable(PERIPHERY_AHB_DMA_2D);
0000c0  2017              MOVS     r0,#0x17
0000c2  f7fffffe          BL       _Z14AHBClockEnablej ; AHBClockEnable(unsigned)
;;;60     	AHBClockEnable(PERIPHERY_AHB_DMA1);
0000c6  2015              MOVS     r0,#0x15
0000c8  f7fffffe          BL       _Z14AHBClockEnablej ; AHBClockEnable(unsigned)
;;;61     	AHBClockEnable(PERIPHERY_AHB_DMA2);
0000cc  2016              MOVS     r0,#0x16
0000ce  f7fffffe          BL       _Z14AHBClockEnablej ; AHBClockEnable(unsigned)
;;;62     	
;;;63     	Dma2d dma;
0000d2  a804              ADD      r0,sp,#0x10
0000d4  f7fffffe          BL       _ZN5Dma2dC1Ev ; Dma2d::Dma2d()
;;;64     	
;;;65     	int x=0;
0000d8  2400              MOVS     r4,#0
;;;66     	int y=0;
0000da  2700              MOVS     r7,#0
;;;67     	int z=1;
0000dc  2501              MOVS     r5,#1
;;;68     	for(int i = 0; i < 8; i++){
0000de  46a2              MOV      r10,r4
0000e0  e035              B        |L1.334|
                  |L1.226|
;;;69     		x=0;
0000e2  2400              MOVS     r4,#0
;;;70     		for(int j = 0; j < 6; j++){				
0000e4  46a3              MOV      r11,r4
0000e6  e02b              B        |L1.320|
                  |L1.232|
;;;71     			if(z % 2 == 0){
0000e8  4628              MOV      r0,r5
0000ea  eb0571d0          ADD      r1,r5,r0,LSR #31
0000ee  1049              ASRS     r1,r1,#1
0000f0  eba50141          SUB      r1,r5,r1,LSL #1
0000f4  b981              CBNZ     r1,|L1.280|
;;;72     				dma.drawRectangle(x,y,20,40,RED,LAYER1,LAYER1_WIDTH);
0000f6  2079              MOVS     r0,#0x79
0000f8  f04f4150          MOV      r1,#0xd0000000
0000fc  f44f4278          MOV      r2,#0xf800
000100  2328              MOVS     r3,#0x28
000102  e9cd3200          STRD     r3,r2,[sp,#0]
000106  e9cd1002          STRD     r1,r0,[sp,#8]
00010a  b2ba              UXTH     r2,r7
00010c  b2a1              UXTH     r1,r4
00010e  2314              MOVS     r3,#0x14
000110  a804              ADD      r0,sp,#0x10
000112  f7fffffe          BL       _ZN5Dma2d13drawRectangleEttttjjj ; Dma2d::drawRectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned)
000116  e00f              B        |L1.312|
                  |L1.280|
;;;73     			}else{
;;;74     				dma.drawRectangle(x,y,20,40,GREEN,LAYER1,LAYER1_WIDTH);
000118  2079              MOVS     r0,#0x79
00011a  f04f4150          MOV      r1,#0xd0000000
00011e  f44f628c          MOV      r2,#0x460
000122  2328              MOVS     r3,#0x28
000124  e9cd3200          STRD     r3,r2,[sp,#0]
000128  e9cd1002          STRD     r1,r0,[sp,#8]
00012c  b2ba              UXTH     r2,r7
00012e  b2a1              UXTH     r1,r4
000130  2314              MOVS     r3,#0x14
000132  a804              ADD      r0,sp,#0x10
000134  f7fffffe          BL       _ZN5Dma2d13drawRectangleEttttjjj ; Dma2d::drawRectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned)
                  |L1.312|
;;;75     			}
;;;76     			z++;
000138  1c6d              ADDS     r5,r5,#1
;;;77     			x+=20;
00013a  3414              ADDS     r4,r4,#0x14
00013c  f10b0b01          ADD      r11,r11,#1            ;70
                  |L1.320|
000140  f1bb0f06          CMP      r11,#6                ;70
000144  dbd0              BLT      |L1.232|
;;;78     		}
;;;79     		y+=40;
000146  3728              ADDS     r7,r7,#0x28
;;;80     		z++;
000148  1c6d              ADDS     r5,r5,#1
00014a  f10a0a01          ADD      r10,r10,#1            ;68
                  |L1.334|
00014e  f1ba0f08          CMP      r10,#8                ;68
000152  dbc6              BLT      |L1.226|
;;;81     	}
;;;82     	
;;;83     		//Kreis Zeichnen mit einem Radius von 50
;;;84     	dma.drawCircle(50,BLUE, LAYER2,LAYER2_WIDTH);
000154  2065              MOVS     r0,#0x65
000156  4b6b              LDR      r3,|L1.772|
000158  4a6c              LDR      r2,|L1.780|
00015a  2132              MOVS     r1,#0x32
00015c  9000              STR      r0,[sp,#0]
00015e  a804              ADD      r0,sp,#0x10
000160  f7fffffe          BL       _ZN5Dma2d10drawCircleEjjjj ; Dma2d::drawCircle(unsigned, unsigned, unsigned, unsigned)
;;;85     	
;;;86     		//Reload Layer
;;;87     	rbLTDC.Layer0.CR |= MASK_LTDC_Lx_CR_LEN;
000164  485e              LDR      r0,|L1.736|
000166  f8d00084          LDR      r0,[r0,#0x84]  ; rbLTDC
00016a  f0400001          ORR      r0,r0,#1
00016e  495c              LDR      r1,|L1.736|
000170  f8c10084          STR      r0,[r1,#0x84]  ; rbLTDC
;;;88     	rbLTDC.Layer1.CR |= MASK_LTDC_Lx_CR_LEN;
000174  4608              MOV      r0,r1
000176  f8d00104          LDR      r0,[r0,#0x104]  ; rbLTDC
00017a  f0400001          ORR      r0,r0,#1
00017e  f8c10104          STR      r0,[r1,#0x104]  ; rbLTDC
;;;89     	rbLTDC.SRCR |= MASK_LTDC_SRCR_IMR;
000182  4608              MOV      r0,r1
000184  6a40              LDR      r0,[r0,#0x24]  ; rbLTDC
000186  f0400001          ORR      r0,r0,#1
00018a  6248              STR      r0,[r1,#0x24]  ; rbLTDC
;;;90     	//enable LTDC
;;;91     	rbLTDC.GCR |= MASK_LTDC_GCR_LTDCEN;
00018c  4608              MOV      r0,r1
00018e  6980              LDR      r0,[r0,#0x18]  ; rbLTDC
000190  f0400001          ORR      r0,r0,#1
000194  6188              STR      r0,[r1,#0x18]  ; rbLTDC
;;;92     	
;;;93     	x = 70;
000196  2446              MOVS     r4,#0x46
;;;94     	int x2 = 170;
000198  26aa              MOVS     r6,#0xaa
;;;95     	bool rechts = false;
00019a  f04f0800          MOV      r8,#0
;;;96     	while(true){
00019e  e02e              B        |L1.510|
                  |L1.416|
;;;97     		for(int delay = 1200000; delay > 0; delay--);
0001a0  485b              LDR      r0,|L1.784|
0001a2  e000              B        |L1.422|
                  |L1.420|
0001a4  1e40              SUBS     r0,r0,#1
                  |L1.422|
0001a6  2800              CMP      r0,#0
0001a8  dcfc              BGT      |L1.420|
;;;98     		rbLTDC.SRCR |= MASK_LTDC_SRCR_IMR;
0001aa  484d              LDR      r0,|L1.736|
0001ac  6a40              LDR      r0,[r0,#0x24]  ; rbLTDC
0001ae  f0400001          ORR      r0,r0,#1
0001b2  494b              LDR      r1,|L1.736|
0001b4  6248              STR      r0,[r1,#0x24]  ; rbLTDC
;;;99     		if(x2 < width && rechts){ 
0001b6  2ef0              CMP      r6,#0xf0
0001b8  da0e              BGE      |L1.472|
0001ba  f1b80f00          CMP      r8,#0
0001be  d00b              BEQ      |L1.472|
;;;100    		x++;
0001c0  1c64              ADDS     r4,r4,#1
;;;101    		x2++;
0001c2  1c76              ADDS     r6,r6,#1
;;;102    		rbLTDC.Layer1.WHPCR = hSync + horBackPorch + x << INDX_LTDC_Lx_WHPCR_WHSTPOS | hSync + horBackPorch +  x2 << INDX_LTDC_Lx_WHPCR_WHSPPOS;
0001c4  f104001e          ADD      r0,r4,#0x1e
0001c8  f106011e          ADD      r1,r6,#0x1e
0001cc  ea404101          ORR      r1,r0,r1,LSL #16
0001d0  4843              LDR      r0,|L1.736|
0001d2  f8c01108          STR      r1,[r0,#0x108]
0001d6  e012              B        |L1.510|
                  |L1.472|
;;;103    		}else if(x > -1 && !rechts){
0001d8  2c00              CMP      r4,#0
0001da  db0e              BLT      |L1.506|
0001dc  f1b80f00          CMP      r8,#0
0001e0  d10b              BNE      |L1.506|
;;;104    			x--;
0001e2  1e64              SUBS     r4,r4,#1
;;;105    			x2--;
0001e4  1e76              SUBS     r6,r6,#1
;;;106    			rbLTDC.Layer1.WHPCR = hSync + horBackPorch + x << INDX_LTDC_Lx_WHPCR_WHSTPOS | hSync + horBackPorch +  x2 << INDX_LTDC_Lx_WHPCR_WHSPPOS;
0001e6  f104001e          ADD      r0,r4,#0x1e
0001ea  f106011e          ADD      r1,r6,#0x1e
0001ee  ea404101          ORR      r1,r0,r1,LSL #16
0001f2  483b              LDR      r0,|L1.736|
0001f4  f8c01108          STR      r1,[r0,#0x108]
0001f8  e001              B        |L1.510|
                  |L1.506|
;;;107    		}else  {
;;;108    			rechts = !rechts;
0001fa  f0880801          EOR      r8,r8,#1
                  |L1.510|
0001fe  e7cf              B        |L1.416|
;;;109    		}
;;;110    	}
;;;111    }
;;;112    
                          ENDP

                  _ZNK5ILtdc7setPinsEv PROC ; ILtdc::setPins() const
;;;113    void ILtdc::setPins() const
000200  e92d47fc          PUSH     {r2-r10,lr}
;;;114    	{
000204  4681              MOV      r9,r0
;;;115    		//GPIOA																			Blue5, VSYNC, Green2, Red4, Red5
;;;116    		static constexpr BYTE const aPins[] = 			{	3, 			4,		6, 		11, 	12};
;;;117    		//GPIOB																			Red3,Red6
;;;118    		static constexpr BYTE const bPinsFirst[] = 	{	0, 	1};
;;;119    		//GPIOB																		Blue6, Blue7, Green4, Green5
;;;120    		static constexpr BYTE const bPinsSecond[] = {8, 	9, 			10, 		11};
;;;121    		//GPIOC																		HSYNC,Green6,Red2
;;;122    		static constexpr BYTE const cPins[] = 			{	6, 		7, 	10};
;;;123    		//GPIOD																		Green7,Blue2
;;;124    		static constexpr BYTE const dPins[] = 			{	3,	6};
;;;125    		//GPIOF																			Enable
;;;126    		static constexpr BYTE const fPins[] = 			{	10};
;;;127    		//GPIOG																		Red7,	CLK, Blue3
;;;128    		static constexpr BYTE const gPinsFirst[] = 	{	6,	7, 11};
;;;129    		//GPIOG																			Green3,	Blue4
;;;130    		static constexpr BYTE const gPinsSecond[] = { 10, 	12};
;;;131    		
;;;132    		APBClockEnable(PERIPHERY_APB_LTDC);
000206  f44f708d          MOV      r0,#0x11a
00020a  f7fffffe          BL       _Z14APBClockEnablej ; APBClockEnable(unsigned)
;;;133    		AHBClockEnable(PERIPHERY_AHB_GPIOA);
00020e  2000              MOVS     r0,#0
000210  f7fffffe          BL       _Z14AHBClockEnablej ; AHBClockEnable(unsigned)
;;;134    		AHBClockEnable(PERIPHERY_AHB_GPIOB);
000214  2001              MOVS     r0,#1
000216  f7fffffe          BL       _Z14AHBClockEnablej ; AHBClockEnable(unsigned)
;;;135    		AHBClockEnable(PERIPHERY_AHB_GPIOC);
00021a  2002              MOVS     r0,#2
00021c  f7fffffe          BL       _Z14AHBClockEnablej ; AHBClockEnable(unsigned)
;;;136    		AHBClockEnable(PERIPHERY_AHB_GPIOD);
000220  2003              MOVS     r0,#3
000222  f7fffffe          BL       _Z14AHBClockEnablej ; AHBClockEnable(unsigned)
;;;137    		AHBClockEnable(PERIPHERY_AHB_GPIOF);
000226  2005              MOVS     r0,#5
000228  f7fffffe          BL       _Z14AHBClockEnablej ; AHBClockEnable(unsigned)
;;;138    		AHBClockEnable(PERIPHERY_AHB_GPIOG);
00022c  2006              MOVS     r0,#6
00022e  f7fffffe          BL       _Z14AHBClockEnablej ; AHBClockEnable(unsigned)
;;;139    		
;;;140    		EnableAF(rbGPIOA, MASK_GPIO_AFR_AF14, MASK_GPIO_OSPEEDR_HIGH, MASK_GPIO_OTYPER_PP, aPins);
000232  4c38              LDR      r4,|L1.788|
000234  250e              MOVS     r5,#0xe
000236  2603              MOVS     r6,#3
000238  2700              MOVS     r7,#0
00023a  f8df80dc          LDR      r8,|L1.792|
00023e  2005              MOVS     r0,#5
000240  463b              MOV      r3,r7
000242  4632              MOV      r2,r6
000244  4629              MOV      r1,r5
000246  e9cd8000          STRD     r8,r0,[sp,#0]
00024a  4620              MOV      r0,r4
00024c  f7fffffe          BL       _Z8EnableAFRV14__regbank_GPIOjjbPKhj ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char*, unsigned)
000250  bf00              NOP      
;;;141    		EnableAF(rbGPIOB, MASK_GPIO_AFR_AF09, MASK_GPIO_OSPEEDR_HIGH, MASK_GPIO_OTYPER_PP, bPinsFirst);
000252  4832              LDR      r0,|L1.796|
000254  2300              MOVS     r3,#0
000256  2203              MOVS     r2,#3
000258  2109              MOVS     r1,#9
00025a  9000              STR      r0,[sp,#0]
00025c  4830              LDR      r0,|L1.800|
00025e  f7fffffe          BL       _Z8EnableAFILj2EEvRV14__regbank_GPIOjjbRAT__Kh ; void EnableAF<(unsigned)2>(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char(&)[T1])
;;;142    		EnableAF(rbGPIOB, MASK_GPIO_AFR_AF14, MASK_GPIO_OSPEEDR_HIGH, MASK_GPIO_OTYPER_PP, bPinsSecond);
000262  4c2f              LDR      r4,|L1.800|
000264  f8df80bc          LDR      r8,|L1.804|
000268  2004              MOVS     r0,#4
00026a  463b              MOV      r3,r7
00026c  4632              MOV      r2,r6
00026e  4629              MOV      r1,r5
000270  e9cd8000          STRD     r8,r0,[sp,#0]
000274  4620              MOV      r0,r4
000276  f7fffffe          BL       _Z8EnableAFRV14__regbank_GPIOjjbPKhj ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char*, unsigned)
00027a  bf00              NOP      
;;;143    		EnableAF(rbGPIOC, MASK_GPIO_AFR_AF14, MASK_GPIO_OSPEEDR_HIGH, MASK_GPIO_OTYPER_PP, cPins);
00027c  482a              LDR      r0,|L1.808|
00027e  2300              MOVS     r3,#0
000280  2203              MOVS     r2,#3
000282  210e              MOVS     r1,#0xe
000284  9000              STR      r0,[sp,#0]
000286  4829              LDR      r0,|L1.812|
000288  f7fffffe          BL       _Z8EnableAFILj3EEvRV14__regbank_GPIOjjbRAT__Kh ; void EnableAF<(unsigned)3>(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char(&)[T1])
;;;144    		EnableAF(rbGPIOD, MASK_GPIO_AFR_AF14, MASK_GPIO_OSPEEDR_HIGH, MASK_GPIO_OTYPER_PP, dPins);
00028c  4828              LDR      r0,|L1.816|
00028e  2300              MOVS     r3,#0
000290  2203              MOVS     r2,#3
000292  210e              MOVS     r1,#0xe
000294  9000              STR      r0,[sp,#0]
000296  4827              LDR      r0,|L1.820|
000298  f7fffffe          BL       _Z8EnableAFILj2EEvRV14__regbank_GPIOjjbRAT__Kh ; void EnableAF<(unsigned)2>(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char(&)[T1])
;;;145    		EnableAF(rbGPIOF, MASK_GPIO_AFR_AF14, MASK_GPIO_OSPEEDR_HIGH, MASK_GPIO_OTYPER_PP, fPins);
00029c  4c26              LDR      r4,|L1.824|
00029e  f8df809c          LDR      r8,|L1.828|
0002a2  2001              MOVS     r0,#1
0002a4  463b              MOV      r3,r7
0002a6  4632              MOV      r2,r6
0002a8  4629              MOV      r1,r5
0002aa  e9cd8000          STRD     r8,r0,[sp,#0]
0002ae  4620              MOV      r0,r4
0002b0  f7fffffe          BL       _Z8EnableAFRV14__regbank_GPIOjjbPKhj ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char*, unsigned)
0002b4  bf00              NOP      
;;;146    		EnableAF(rbGPIOG, MASK_GPIO_AFR_AF14, MASK_GPIO_OSPEEDR_HIGH, MASK_GPIO_OTYPER_PP, gPinsFirst);
0002b6  4822              LDR      r0,|L1.832|
0002b8  2300              MOVS     r3,#0
0002ba  2203              MOVS     r2,#3
0002bc  210e              MOVS     r1,#0xe
0002be  9000              STR      r0,[sp,#0]
0002c0  4820              LDR      r0,|L1.836|
0002c2  f7fffffe          BL       _Z8EnableAFILj3EEvRV14__regbank_GPIOjjbRAT__Kh ; void EnableAF<(unsigned)3>(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char(&)[T1])
;;;147    		EnableAF(rbGPIOG, MASK_GPIO_AFR_AF14, MASK_GPIO_OSPEEDR_HIGH, MASK_GPIO_OTYPER_PP, gPinsSecond);
0002c6  4820              LDR      r0,|L1.840|
0002c8  2300              MOVS     r3,#0
0002ca  2203              MOVS     r2,#3
0002cc  210e              MOVS     r1,#0xe
0002ce  9000              STR      r0,[sp,#0]
0002d0  481c              LDR      r0,|L1.836|
0002d2  f7fffffe          BL       _Z8EnableAFILj2EEvRV14__regbank_GPIOjjbRAT__Kh ; void EnableAF<(unsigned)2>(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char(&)[T1])
;;;148    }
0002d6  e8bd87fc          POP      {r2-r10,pc}
;;;149    	
                          ENDP

0002da  0000              DCW      0x0000
                  |L1.732|
                          DCD      0x00090001
                  |L1.736|
                          DCD      rbLTDC
                  |L1.740|
                          DCD      0x001d0003
                  |L1.744|
                          DCD      0x010d0143
                  |L1.748|
                          DCD      0x01170147
                  |L1.752|
                          DCD      0x010e001e
                  |L1.756|
                          DCD      0x01440004
                  |L1.760|
                          DCD      0x03c003c0
                  |L1.764|
                          DCD      0x00c80064
                  |L1.768|
                          DCD      0x00d60072
                  |L1.772|
                          DCD      0xd0307200
                  |L1.776|
                          DCD      0x01980198
                  |L1.780|
                          DCD      0x8800ffff
                  |L1.784|
                          DCD      0x00124f80
                  |L1.788|
                          DCD      rbGPIOA
                  |L1.792|
                          DCD      _ZZNK5ILtdc7setPinsEvE5aPins ; ILtdc::setPins() const::aPins
                  |L1.796|
                          DCD      _ZZNK5ILtdc7setPinsEvE10bPinsFirst ; ILtdc::setPins() const::bPinsFirst
                  |L1.800|
                          DCD      rbGPIOB
                  |L1.804|
                          DCD      _ZZNK5ILtdc7setPinsEvE11bPinsSecond ; ILtdc::setPins() const::bPinsSecond
                  |L1.808|
                          DCD      _ZZNK5ILtdc7setPinsEvE5cPins ; ILtdc::setPins() const::cPins
                  |L1.812|
                          DCD      rbGPIOC
                  |L1.816|
                          DCD      _ZZNK5ILtdc7setPinsEvE5dPins ; ILtdc::setPins() const::dPins
                  |L1.820|
                          DCD      rbGPIOD
                  |L1.824|
                          DCD      rbGPIOF
                  |L1.828|
                          DCD      _ZZNK5ILtdc7setPinsEvE5fPins ; ILtdc::setPins() const::fPins
                  |L1.832|
                          DCD      _ZZNK5ILtdc7setPinsEvE10gPinsFirst ; ILtdc::setPins() const::gPinsFirst
                  |L1.836|
                          DCD      rbGPIOG
                  |L1.840|
                          DCD      _ZZNK5ILtdc7setPinsEvE11gPinsSecond ; ILtdc::setPins() const::gPinsSecond

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          REQUIRE __aeabi_unwind_cpp_pr0
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000002
                          RELOC 42, ||.text||
                          DCD      0x8004afb0
                          DCD      0x00000200
                          RELOC 42, ||.text||
                          DCD      0x8001aeb0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  _ZZNK5ILtdc7setPinsEvE5aPins ; ILtdc::setPins() const::aPins
000000  0304060b          DCB      0x03,0x04,0x06,0x0b
000004  0c                DCB      0x0c
                  _ZZNK5ILtdc7setPinsEvE10bPinsFirst ; ILtdc::setPins() const::bPinsFirst
000005  0001              DCB      0x00,0x01
                  _ZZNK5ILtdc7setPinsEvE11bPinsSecond ; ILtdc::setPins() const::bPinsSecond
000007  08                DCB      0x08
000008  090a0b            DCB      0x09,0x0a,0x0b
                  _ZZNK5ILtdc7setPinsEvE5cPins ; ILtdc::setPins() const::cPins
00000b  06                DCB      0x06
00000c  070a              DCB      0x07,0x0a
                  _ZZNK5ILtdc7setPinsEvE5dPins ; ILtdc::setPins() const::dPins
00000e  0306              DCB      0x03,0x06
                  _ZZNK5ILtdc7setPinsEvE5fPins ; ILtdc::setPins() const::fPins
000010  0a                DCB      0x0a
                  _ZZNK5ILtdc7setPinsEvE10gPinsFirst ; ILtdc::setPins() const::gPinsFirst
000011  06070b            DCB      0x06,0x07,0x0b
                  _ZZNK5ILtdc7setPinsEvE11gPinsSecond ; ILtdc::setPins() const::gPinsSecond
000014  0a0c              DCB      0x0a,0x0c

                          AREA ||.constdata__ZZ8EnableAFRV14__regbank_GPIOjjbjEs||, COMGROUP=_ZZ8EnableAFRV14__regbank_GPIOjjbjEs, DATA, READONLY, ALIGN=0

                  _ZZ8EnableAFRV14__regbank_GPIOjjbjEs ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)::string
000000  6e203c20          DCB      0x6e,0x20,0x3c,0x20
000004  31365500          DCB      0x31,0x36,0x55,0x00

                          AREA ||.constdata__ZZ8EnableAFRV14__regbank_GPIOjjbjEs_0||, COMGROUP=_ZZ8EnableAFRV14__regbank_GPIOjjbjEs_0, DATA, READONLY, ALIGN=0

                  _ZZ8EnableAFRV14__regbank_GPIOjjbjEs_0 ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)::string (instance 2)
000000  52425f47          DCB      0x52,0x42,0x5f,0x47
000004  50494f2e          DCB      0x50,0x49,0x4f,0x2e
000008  6800              DCB      0x68,0x00

                          AREA ||.constdata__ZZ8EnableAFRV14__regbank_GPIOjjbjEs_1||, COMGROUP=_ZZ8EnableAFRV14__regbank_GPIOjjbjEs_1, DATA, READONLY, ALIGN=0

                  _ZZ8EnableAFRV14__regbank_GPIOjjbjEs_1 ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)::string (instance 3)
000000  6166203c          DCB      0x61,0x66,0x20,0x3c
000004  20313655          DCB      0x20,0x31,0x36,0x55
000008  00                DCB      0x00

                          AREA ||i._Z14AHBClockEnablej||, COMGROUP=_Z14AHBClockEnablej, CODE, READONLY, ALIGN=2

                  _Z14AHBClockEnablej PROC ; AHBClockEnable(unsigned)
;;;332    /// \param[in] num kennzeichnet die AHB-Periphery.
;;;333    inline void AHBClockEnable(WORD const num) noexcept
000000  b570              PUSH     {r4-r6,lr}
;;;334    {
000002  4604              MOV      r4,r0
;;;335      auto const i = num >> PERIPHERY_INDX_POS;
000004  0a25              LSRS     r5,r4,#8
;;;336      auto const n = num % 32U;
000006  f004061f          AND      r6,r4,#0x1f
;;;337      
;;;338      Atomic::Orr(rbRCC.AHBENR[i], 1U << n);
00000a  2201              MOVS     r2,#1
00000c  fa02f106          LSL      r1,r2,r6
000010  4a02              LDR      r2,|L20.28|
000012  eb020085          ADD      r0,r2,r5,LSL #2
000016  f7fffffe          BL       _ZN6Atomic3OrrIjEET_RVS1_S1_ ; T1 Atomic::Orr<unsigned>(volatile T1&, T1)
;;;339    }
00001a  bd70              POP      {r4-r6,pc}
;;;340    
                          ENDP

                  |L20.28|
                          DCD      rbRCC+0x30

                          AREA ||area_number.21||, COMGROUP=_Z14AHBClockEnablej, LINKORDER=||i._Z14AHBClockEnablej||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z14AHBClockEnablej||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic4BfldIjEET_RVS1_S1_S1_||, COMGROUP=_ZN6Atomic4BfldIjEET_RVS1_S1_S1_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic4BfldIjEET_RVS1_S1_S1_ PROC ; T1 Atomic::Bfld<unsigned>(volatile T1&, T1, T1)
;;;326      
;;;327      template<typename TYPE> inline TYPE Bfld(TYPE volatile & data, TYPE const set, TYPE const res) noexcept
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;328      {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;329        TYPE value;
;;;330        
;;;331        do 
00000a  bf00              NOP      
                  |L28.12|
;;;332        {
;;;333          value = Cortex::LoadLinked(data);
00000c  4640              MOV      r0,r8
00000e  f7fffffe          BL       _ZN6Cortex10LoadLinkedIjEET_RVKS1_ ; T1 Cortex::LoadLinked<unsigned>(const volatile T1&)
000012  4604              MOV      r4,r0
;;;334        } while ( Cortex::SaveConditional(data, (TYPE)(set | (value & ~res))) );
000014  ea240006          BIC      r0,r4,r6
000018  ea400105          ORR      r1,r0,r5
00001c  4640              MOV      r0,r8
00001e  f7fffffe          BL       _ZN6Cortex15SaveConditionalIjEEbRVT_S1_ ; bool Cortex::SaveConditional<unsigned>(volatile T1&, T1)
000022  2800              CMP      r0,#0
000024  d1f2              BNE      |L28.12|
;;;335        
;;;336        return value;
000026  4627              MOV      r7,r4
000028  4638              MOV      r0,r7
;;;337      }
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;338    };
                          ENDP


                          AREA ||area_number.29||, COMGROUP=_ZN6Atomic4BfldIjEET_RVS1_S1_S1_, LINKORDER=||t._ZN6Atomic4BfldIjEET_RVS1_S1_S1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic4BfldIjEET_RVS1_S1_S1_||
                          DCD      0x00000001

                          AREA ||i._Z8EnableAFRV14__regbank_GPIOjjbj||, COMGROUP=_Z8EnableAFRV14__regbank_GPIOjjbj, CODE, READONLY, ALIGN=2

                  _Z8EnableAFRV14__regbank_GPIOjjbj PROC ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)
;;;165    
;;;166    inline void EnableAF(RegbankTypeGPIO volatile & gpio, WORD const af, WORD const sp, bool const od, unsigned const n) noexcept 
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;167    {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
00000a  469b              MOV      r11,r3
00000c  9c0e              LDR      r4,[sp,#0x38]
;;;168      ASSERT(n < 16U);
00000e  2c10              CMP      r4,#0x10
000010  d200              BCS      |L35.20|
000012  e005              B        |L35.32|
                  |L35.20|
000014  4b27              LDR      r3,|L35.180|
000016  22a8              MOVS     r2,#0xa8
000018  4927              LDR      r1,|L35.184|
00001a  4828              LDR      r0,|L35.188|
00001c  f7fffffe          BL       _Z15AssertionFailedPKcS0_jS0_ ; AssertionFailed(const char*, const char*, unsigned, const char*)
                  |L35.32|
;;;169      ASSERT(af < 16U);
000020  2f10              CMP      r7,#0x10
000022  d200              BCS      |L35.38|
000024  e005              B        |L35.50|
                  |L35.38|
000026  4b23              LDR      r3,|L35.180|
000028  22a9              MOVS     r2,#0xa9
00002a  4923              LDR      r1,|L35.184|
00002c  4824              LDR      r0,|L35.192|
00002e  f7fffffe          BL       _Z15AssertionFailedPKcS0_jS0_ ; AssertionFailed(const char*, const char*, unsigned, const char*)
                  |L35.50|
;;;170    
;;;171      auto const pos((n % 8U) * 4U);
000032  0760              LSLS     r0,r4,#29
000034  ea4f68d0          LSR      r8,r0,#27
;;;172      WORD const set(af            << pos);
000038  fa07f008          LSL      r0,r7,r8
00003c  9003              STR      r0,[sp,#0xc]
;;;173      WORD const res(MASK_GPIO_AFR << pos);
00003e  200f              MOVS     r0,#0xf
000040  fa00f008          LSL      r0,r0,r8
000044  9002              STR      r0,[sp,#8]
;;;174      auto const indx(n / 8U);
000046  08e1              LSRS     r1,r4,#3
000048  9101              STR      r1,[sp,#4]
;;;175    
;;;176      Atomic::Bfld(gpio.AFR[indx], set, res);
00004a  f1050220          ADD      r2,r5,#0x20
00004e  9901              LDR      r1,[sp,#4]
000050  eb020081          ADD      r0,r2,r1,LSL #2
000054  e9dd2102          LDRD     r2,r1,[sp,#8]
000058  f7fffffe          BL       _ZN6Atomic4BfldIjEET_RVS1_S1_S1_ ; T1 Atomic::Bfld<unsigned>(volatile T1&, T1, T1)
;;;177      
;;;178      HWRD const mask = 1U << n;
00005c  2001              MOVS     r0,#1
00005e  40a0              LSLS     r0,r0,r4
000060  b280              UXTH     r0,r0
000062  9000              STR      r0,[sp,#0]
;;;179      
;;;180      if ( od )
000064  f1bb0f00          CMP      r11,#0
000068  d004              BEQ      |L35.116|
;;;181        Atomic::Orr(gpio.OTYPER, mask);
00006a  1d28              ADDS     r0,r5,#4
00006c  9900              LDR      r1,[sp,#0]
00006e  f7fffffe          BL       _ZN6Atomic3OrrItEET_RVS1_S1_ ; T1 Atomic::Orr<unsigned short>(volatile T1&, T1)
000072  e003              B        |L35.124|
                  |L35.116|
;;;182      else
;;;183        Atomic::Bic(gpio.OTYPER, mask);
000074  1d28              ADDS     r0,r5,#4
000076  9900              LDR      r1,[sp,#0]
000078  f7fffffe          BL       _ZN6Atomic3BicItEET_RVS1_S1_ ; T1 Atomic::Bic<unsigned short>(volatile T1&, T1)
                  |L35.124|
;;;184    
;;;185      WrGpioSP(gpio, n, sp);
00007c  bf00              NOP      
00007e  ea4f0944          LSL      r9,r4,#1
000082  2003              MOVS     r0,#3
000084  fa00f209          LSL      r2,r0,r9
000088  f0060003          AND      r0,r6,#3
00008c  fa00f109          LSL      r1,r0,r9
000090  f1050008          ADD      r0,r5,#8
000094  f7fffffe          BL       _ZN6Atomic4BfldIjEET_RVS1_S1_S1_ ; T1 Atomic::Bfld<unsigned>(volatile T1&, T1, T1)
;;;186      WrGpioMD(gpio, n, MASK_GPIO_MODER_ALTFNC);     
000098  f04f0902          MOV      r9,#2
00009c  ea4f0a44          LSL      r10,r4,#1
0000a0  2003              MOVS     r0,#3
0000a2  fa00f20a          LSL      r2,r0,r10
0000a6  fa09f10a          LSL      r1,r9,r10
0000aa  4628              MOV      r0,r5
0000ac  f7fffffe          BL       _ZN6Atomic4BfldIjEET_RVS1_S1_S1_ ; T1 Atomic::Bfld<unsigned>(volatile T1&, T1, T1)
;;;187    }
0000b0  e8bd9fff          POP      {r0-r12,pc}
;;;188    
                          ENDP

                  |L35.180|
                          DCD      _ZZ8EnableAFRV14__regbank_GPIOjjbjE19__PRETTY_FUNCTION__ ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)::__PRETTY_FUNCTION__
                  |L35.184|
                          DCD      _ZZ8EnableAFRV14__regbank_GPIOjjbjEs_0 ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)::string (instance 2)
                  |L35.188|
                          DCD      _ZZ8EnableAFRV14__regbank_GPIOjjbjEs ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)::string
                  |L35.192|
                          DCD      _ZZ8EnableAFRV14__regbank_GPIOjjbjEs_1 ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)::string (instance 3)

                          AREA ||area_number.36||, COMGROUP=_Z8EnableAFRV14__regbank_GPIOjjbj, LINKORDER=||i._Z8EnableAFRV14__regbank_GPIOjjbj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z8EnableAFRV14__regbank_GPIOjjbj||
                          DCD      0x00000001

                          AREA ||i._Z8EnableAFRV14__regbank_GPIOjjbPKhj||, COMGROUP=_Z8EnableAFRV14__regbank_GPIOjjbPKhj, CODE, READONLY, ALIGN=1

                  _Z8EnableAFRV14__regbank_GPIOjjbPKhj PROC ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char*, unsigned)
;;;188    
;;;189    inline void EnableAF(RegbankTypeGPIO volatile & gpio, WORD const af, WORD const sp, bool const od, BYTE const * nums, unsigned dim)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;190    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  e9dd4908          LDRD     r4,r9,[sp,#0x20]
;;;191      while ( dim-- > 0U )
000010  e008              B        |L43.36|
                  |L43.18|
;;;192      {
;;;193        EnableAF(gpio, af, sp, od, *nums++);
000012  f8140b01          LDRB     r0,[r4],#1
000016  4643              MOV      r3,r8
000018  463a              MOV      r2,r7
00001a  4631              MOV      r1,r6
00001c  9000              STR      r0,[sp,#0]
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       _Z8EnableAFRV14__regbank_GPIOjjbj ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)
                  |L43.36|
000024  f1b90000          SUBS     r0,r9,#0              ;191
000028  f1a90901          SUB      r9,r9,#1              ;191
00002c  d1f1              BNE      |L43.18|
;;;194      }
;;;195    }
00002e  e8bd83f8          POP      {r3-r9,pc}
;;;196    
                          ENDP


                          AREA ||area_number.44||, COMGROUP=_Z8EnableAFRV14__regbank_GPIOjjbPKhj, LINKORDER=||i._Z8EnableAFRV14__regbank_GPIOjjbPKhj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.44||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z8EnableAFRV14__regbank_GPIOjjbPKhj||
                          DCD      0x00000001

                          AREA ||t._ZN6Cortex10LoadLinkedIjEET_RVKS1_||, COMGROUP=_ZN6Cortex10LoadLinkedIjEET_RVKS1_, CODE, READONLY, ALIGN=1

                  _ZN6Cortex10LoadLinkedIjEET_RVKS1_ PROC ; T1 Cortex::LoadLinked<unsigned>(const volatile T1&)
;;;247      template<typename TYPE>
;;;248      FORCE_INLINE TYPE LoadLinked(TYPE const volatile & data) noexcept { DMB(); return ArmExclusive<sizeof(TYPE)>::LdrEx(data); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  f7fffffe          BL       _ZN6Cortex3DMBEv ; Cortex::DMB()
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj ; Cortex::ArmExclusive<(unsigned)4>::LdrEx(const volatile unsigned&)
00000e  4605              MOV      r5,r0
000010  4628              MOV      r0,r5
000012  bd70              POP      {r4-r6,pc}
;;;249      
                          ENDP


                          AREA ||area_number.52||, COMGROUP=_ZN6Cortex10LoadLinkedIjEET_RVKS1_, LINKORDER=||t._ZN6Cortex10LoadLinkedIjEET_RVKS1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.52||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Cortex10LoadLinkedIjEET_RVKS1_||
                          DCD      0x00000001

                          AREA ||t._ZN6Cortex15SaveConditionalIjEEbRVT_S1_||, COMGROUP=_ZN6Cortex15SaveConditionalIjEEbRVT_S1_, CODE, READONLY, ALIGN=1

                  _ZN6Cortex15SaveConditionalIjEEbRVT_S1_ PROC ; bool Cortex::SaveConditional<unsigned>(volatile T1&, T1)
;;;258      template<typename TYPE>
;;;259      FORCE_INLINE bool SaveConditional(TYPE volatile & data, TYPE const value) noexcept
000000  b570              PUSH     {r4-r6,lr}
;;;260      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;261        if ( ArmExclusive<sizeof(TYPE)>::StrEx(data, value) )
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj ; Cortex::ArmExclusive<(unsigned)4>::StrEx(volatile unsigned&, unsigned)
00000e  b108              CBZ      r0,|L58.20|
;;;262          return true;
000010  2001              MOVS     r0,#1
                  |L58.18|
;;;263    
;;;264        DSB();
;;;265          
;;;266        return false;
;;;267      }
000012  bd70              POP      {r4-r6,pc}
                  |L58.20|
000014  f7fffffe          BL       _ZN6Cortex3DSBEv ; Cortex::DSB()
000018  2000              MOVS     r0,#0                 ;266
00001a  e7fa              B        |L58.18|
;;;268      
                          ENDP


                          AREA ||area_number.59||, COMGROUP=_ZN6Cortex15SaveConditionalIjEEbRVT_S1_, LINKORDER=||t._ZN6Cortex15SaveConditionalIjEEbRVT_S1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.59||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Cortex15SaveConditionalIjEEbRVT_S1_||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic3OrrIjEET_RVS1_S1_||, COMGROUP=_ZN6Atomic3OrrIjEET_RVS1_S1_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic3OrrIjEET_RVS1_S1_ PROC ; T1 Atomic::Orr<unsigned>(volatile T1&, T1)
;;;182      /// \tparam TYPE ist der Datentyp der atomaren Operation.
;;;183      template<typename TYPE> inline TYPE Orr(TYPE volatile & data, TYPE const mask ) noexcept { return Modify<TYPE, BinOpType::opOrr>(data, mask); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6Atomic6ModifyIjLNS_9BinOpTypeE5EEET_RVS2_S2_ ; T1 Atomic::Modify<unsigned, (Atomic::BinOpType)5>(volatile T1&, T1)
00000e  4606              MOV      r6,r0
000010  4630              MOV      r0,r6
000012  bd70              POP      {r4-r6,pc}
;;;184    
                          ENDP


                          AREA ||area_number.66||, COMGROUP=_ZN6Atomic3OrrIjEET_RVS1_S1_, LINKORDER=||t._ZN6Atomic3OrrIjEET_RVS1_S1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.66||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic3OrrIjEET_RVS1_S1_||
                          DCD      0x00000001

                          AREA ||i._Z14APBClockEnablej||, COMGROUP=_Z14APBClockEnablej, CODE, READONLY, ALIGN=2

                  _Z14APBClockEnablej PROC ; APBClockEnable(unsigned)
;;;342    /// \param[in] num kennzeichnet die APB-Periphery.
;;;343    inline void APBClockEnable(WORD const num) noexcept
000000  b570              PUSH     {r4-r6,lr}
;;;344    {
000002  4604              MOV      r4,r0
;;;345      auto const i = num >> PERIPHERY_INDX_POS;
000004  0a25              LSRS     r5,r4,#8
;;;346      auto const n = num % 32U;
000006  f004061f          AND      r6,r4,#0x1f
;;;347      
;;;348      Atomic::Orr(rbRCC.APBENR[i], 1U << n);
00000a  2201              MOVS     r2,#1
00000c  fa02f106          LSL      r1,r2,r6
000010  4a02              LDR      r2,|L72.28|
000012  eb020085          ADD      r0,r2,r5,LSL #2
000016  f7fffffe          BL       _ZN6Atomic3OrrIjEET_RVS1_S1_ ; T1 Atomic::Orr<unsigned>(volatile T1&, T1)
;;;349    }
00001a  bd70              POP      {r4-r6,pc}
;;;350    
                          ENDP

                  |L72.28|
                          DCD      rbRCC+0x40

                          AREA ||area_number.73||, COMGROUP=_Z14APBClockEnablej, LINKORDER=||i._Z14APBClockEnablej||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.73||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z14APBClockEnablej||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic3BicItEET_RVS1_S1_||, COMGROUP=_ZN6Atomic3BicItEET_RVS1_S1_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic3BicItEET_RVS1_S1_ PROC ; T1 Atomic::Bic<unsigned short>(volatile T1&, T1)
;;;189      /// \tparam TYPE ist der Datentyp der atomaren Operation.
;;;190      template<typename TYPE> inline TYPE Bic(TYPE volatile & data, TYPE const mask ) noexcept { return And(data, (TYPE)(~mask)); }
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  43e0              MVNS     r0,r4
000008  b281              UXTH     r1,r0
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       _ZN6Atomic3AndItEET_RVS1_S1_ ; T1 Atomic::And<unsigned short>(volatile T1&, T1)
000010  4606              MOV      r6,r0
000012  4630              MOV      r0,r6
000014  bd70              POP      {r4-r6,pc}
;;;191    
                          ENDP


                          AREA ||area_number.80||, COMGROUP=_ZN6Atomic3BicItEET_RVS1_S1_, LINKORDER=||t._ZN6Atomic3BicItEET_RVS1_S1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.80||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic3BicItEET_RVS1_S1_||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic3OrrItEET_RVS1_S1_||, COMGROUP=_ZN6Atomic3OrrItEET_RVS1_S1_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic3OrrItEET_RVS1_S1_ PROC ; T1 Atomic::Orr<unsigned short>(volatile T1&, T1)
;;;182      /// \tparam TYPE ist der Datentyp der atomaren Operation.
;;;183      template<typename TYPE> inline TYPE Orr(TYPE volatile & data, TYPE const mask ) noexcept { return Modify<TYPE, BinOpType::opOrr>(data, mask); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6Atomic6ModifyItLNS_9BinOpTypeE5EEET_RVS2_S2_ ; T1 Atomic::Modify<unsigned short, (Atomic::BinOpType)5>(volatile T1&, T1)
00000e  4606              MOV      r6,r0
000010  4630              MOV      r0,r6
000012  bd70              POP      {r4-r6,pc}
;;;184    
                          ENDP


                          AREA ||area_number.87||, COMGROUP=_ZN6Atomic3OrrItEET_RVS1_S1_, LINKORDER=||t._ZN6Atomic3OrrItEET_RVS1_S1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.87||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic3OrrItEET_RVS1_S1_||
                          DCD      0x00000001

                          AREA ||t._Z8EnableAFILj2EEvRV14__regbank_GPIOjjbRAT__Kh||, COMGROUP=_Z8EnableAFILj2EEvRV14__regbank_GPIOjjbRAT__Kh, CODE, READONLY, ALIGN=1

                  _Z8EnableAFILj2EEvRV14__regbank_GPIOjjbRAT__Kh PROC ; void EnableAF<(unsigned)2>(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char(&)[T1])
;;;197    template<unsigned DIM>
;;;198    inline void EnableAF(RegbankTypeGPIO volatile & gpio, WORD const af, WORD const sp, bool const od, BYTE const (& nums)[DIM])
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;199    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dd8020          LDR      r8,[sp,#0x20]
;;;200      EnableAF(gpio, af, sp, od, nums, DIM);
000010  2002              MOVS     r0,#2
000012  463b              MOV      r3,r7
000014  4632              MOV      r2,r6
000016  4629              MOV      r1,r5
000018  e9cd8000          STRD     r8,r0,[sp,#0]
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       _Z8EnableAFRV14__regbank_GPIOjjbPKhj ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char*, unsigned)
;;;201    }
000022  e8bd81fc          POP      {r2-r8,pc}
;;;202    
                          ENDP


                          AREA ||area_number.94||, COMGROUP=_Z8EnableAFILj2EEvRV14__regbank_GPIOjjbRAT__Kh, LINKORDER=||t._Z8EnableAFILj2EEvRV14__regbank_GPIOjjbRAT__Kh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.94||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||t._Z8EnableAFILj2EEvRV14__regbank_GPIOjjbRAT__Kh||
                          DCD      0x8001acb0

                          AREA ||t._Z8EnableAFILj3EEvRV14__regbank_GPIOjjbRAT__Kh||, COMGROUP=_Z8EnableAFILj3EEvRV14__regbank_GPIOjjbRAT__Kh, CODE, READONLY, ALIGN=1

                  _Z8EnableAFILj3EEvRV14__regbank_GPIOjjbRAT__Kh PROC ; void EnableAF<(unsigned)3>(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char(&)[T1])
;;;197    template<unsigned DIM>
;;;198    inline void EnableAF(RegbankTypeGPIO volatile & gpio, WORD const af, WORD const sp, bool const od, BYTE const (& nums)[DIM])
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;199    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dd8020          LDR      r8,[sp,#0x20]
;;;200      EnableAF(gpio, af, sp, od, nums, DIM);
000010  2003              MOVS     r0,#3
000012  463b              MOV      r3,r7
000014  4632              MOV      r2,r6
000016  4629              MOV      r1,r5
000018  e9cd8000          STRD     r8,r0,[sp,#0]
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       _Z8EnableAFRV14__regbank_GPIOjjbPKhj ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char*, unsigned)
;;;201    }
000022  e8bd81fc          POP      {r2-r8,pc}
;;;202    
                          ENDP


                          AREA ||area_number.101||, COMGROUP=_Z8EnableAFILj3EEvRV14__regbank_GPIOjjbRAT__Kh, LINKORDER=||t._Z8EnableAFILj3EEvRV14__regbank_GPIOjjbRAT__Kh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.101||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||t._Z8EnableAFILj3EEvRV14__regbank_GPIOjjbRAT__Kh||
                          DCD      0x8001acb0

                          AREA ||i._ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj, CODE, READONLY, ALIGN=1

                  _ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj PROC ; Cortex::ArmExclusive<(unsigned)4>::LdrEx(const volatile unsigned&)
;;;67         
;;;68         static WORD LdrEx(WORD const volatile & data)                   noexcept { return _LdrExW(&data); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _LdrExW
00000a  4605              MOV      r5,r0
00000c  4628              MOV      r0,r5
00000e  bd70              POP      {r4-r6,pc}
;;;69         static bool StrEx(WORD       volatile & data, WORD const value) noexcept { return _StrExW(&data, value) != 0U; }
                          ENDP


                          AREA ||area_number.108||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj, LINKORDER=||i._ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.108||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj||

                          AREA ||.ARM.extab||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj, DATA, READONLY, ALIGN=2

                          REQUIRE __cxa_call_unexpected
                  ||.extab._ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj||
                          DCD      0x80aab0b0
000004  0002000b          DCW      0x0002,0x000b
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||i._ZN6Cortex3DMBEv||, COMGROUP=_ZN6Cortex3DMBEv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex3DMBEv PROC ; Cortex::DMB()
;;;121    
;;;122      FORCE_INLINE void DMB() noexcept { SCHEDULE_BARRIER(); __dmb(0xF); SCHEDULE_BARRIER(); }  
000000  bf00              NOP      
000002  bf00              NOP      
000004  f3bf8f5f          DMB      
000008  bf00              NOP      
00000a  bf00              NOP      
00000c  4770              BX       lr
;;;123      FORCE_INLINE void DSB() noexcept { SCHEDULE_BARRIER(); __dsb(0xF); SCHEDULE_BARRIER(); }
                          ENDP


                          AREA ||area_number.116||, COMGROUP=_ZN6Cortex3DMBEv, LINKORDER=||i._ZN6Cortex3DMBEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.116||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex3DMBEv||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex3DSBEv||, COMGROUP=_ZN6Cortex3DSBEv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex3DSBEv PROC ; Cortex::DSB()
;;;122      FORCE_INLINE void DMB() noexcept { SCHEDULE_BARRIER(); __dmb(0xF); SCHEDULE_BARRIER(); }  
;;;123      FORCE_INLINE void DSB() noexcept { SCHEDULE_BARRIER(); __dsb(0xF); SCHEDULE_BARRIER(); }
000000  bf00              NOP      
000002  bf00              NOP      
000004  f3bf8f4f          DSB      
000008  bf00              NOP      
00000a  bf00              NOP      
00000c  4770              BX       lr
;;;124      FORCE_INLINE void ISB() noexcept { SCHEDULE_BARRIER(); __isb(0xF); SCHEDULE_BARRIER(); }
                          ENDP


                          AREA ||area_number.123||, COMGROUP=_ZN6Cortex3DSBEv, LINKORDER=||i._ZN6Cortex3DSBEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.123||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex3DSBEv||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj, CODE, READONLY, ALIGN=1

                  _ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj PROC ; Cortex::ArmExclusive<(unsigned)4>::StrEx(volatile unsigned&, unsigned)
;;;68         static WORD LdrEx(WORD const volatile & data)                   noexcept { return _LdrExW(&data); }
;;;69         static bool StrEx(WORD       volatile & data, WORD const value) noexcept { return _StrExW(&data, value) != 0U; }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _StrExW
00000e  b108              CBZ      r0,|L129.20|
000010  2001              MOVS     r0,#1
000012  e000              B        |L129.22|
                  |L129.20|
000014  2000              MOVS     r0,#0
                  |L129.22|
000016  4606              MOV      r6,r0
000018  4630              MOV      r0,r6
00001a  bd70              POP      {r4-r6,pc}
;;;70     
                          ENDP


                          AREA ||area_number.130||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj, LINKORDER=||i._ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.130||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj||

                          AREA ||area_number.131||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.131||, ||.ARM.extab||
                          REQUIRE __cxa_call_unexpected
                  ||.extab._ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj||
                          DCD      0x80aab0b0
000004  0002000f          DCW      0x0002,0x000f
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||t._ZN6Atomic6ModifyIjLNS_9BinOpTypeE5EEET_RVS2_S2_||, COMGROUP=_ZN6Atomic6ModifyIjLNS_9BinOpTypeE5EEET_RVS2_S2_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic6ModifyIjLNS_9BinOpTypeE5EEET_RVS2_S2_ PROC ; T1 Atomic::Modify<unsigned, (Atomic::BinOpType)5>(volatile T1&, T1)
;;;54       template<typename TYPE, BinOpType OP> 
;;;55       inline TYPE Modify(TYPE volatile & data, TYPE const operand) noexcept
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;56       {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;57         TYPE result;
;;;58         
;;;59         do 
000008  bf00              NOP      
                  |L137.10|
;;;60         {
;;;61           result = Cortex::LoadLinked(data);
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       _ZN6Cortex10LoadLinkedIjEET_RVKS1_ ; T1 Cortex::LoadLinked<unsigned>(const volatile T1&)
000010  4604              MOV      r4,r0
;;;62         } while ( Cortex::SaveConditional(data, BinOp<TYPE, OP>::Calc(result, operand)) );
000012  4639              MOV      r1,r7
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       _ZN6Atomic5BinOpIjLNS_9BinOpTypeE5EE4CalcEjj ; Atomic::BinOp<unsigned, (Atomic::BinOpType)5>::Calc(unsigned, unsigned)
00001a  4680              MOV      r8,r0
00001c  4641              MOV      r1,r8
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       _ZN6Cortex15SaveConditionalIjEEbRVT_S1_ ; bool Cortex::SaveConditional<unsigned>(volatile T1&, T1)
000024  2800              CMP      r0,#0
000026  d1f0              BNE      |L137.10|
;;;63         
;;;64         return result;
000028  4625              MOV      r5,r4
00002a  4628              MOV      r0,r5
;;;65       }
00002c  e8bd81f0          POP      {r4-r8,pc}
;;;66     
                          ENDP


                          AREA ||area_number.138||, COMGROUP=_ZN6Atomic6ModifyIjLNS_9BinOpTypeE5EEET_RVS2_S2_, LINKORDER=||t._ZN6Atomic6ModifyIjLNS_9BinOpTypeE5EEET_RVS2_S2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.138||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic6ModifyIjLNS_9BinOpTypeE5EEET_RVS2_S2_||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic3AndItEET_RVS1_S1_||, COMGROUP=_ZN6Atomic3AndItEET_RVS1_S1_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic3AndItEET_RVS1_S1_ PROC ; T1 Atomic::And<unsigned short>(volatile T1&, T1)
;;;175      /// \tparam TYPE ist der Datentyp der atomaren Operation.
;;;176      template<typename TYPE> inline TYPE And(TYPE volatile & data, TYPE const mask ) noexcept { return Modify<TYPE, BinOpType::opAnd>(data, mask); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6Atomic6ModifyItLNS_9BinOpTypeE4EEET_RVS2_S2_ ; T1 Atomic::Modify<unsigned short, (Atomic::BinOpType)4>(volatile T1&, T1)
00000e  4606              MOV      r6,r0
000010  4630              MOV      r0,r6
000012  bd70              POP      {r4-r6,pc}
;;;177    
                          ENDP


                          AREA ||area_number.145||, COMGROUP=_ZN6Atomic3AndItEET_RVS1_S1_, LINKORDER=||t._ZN6Atomic3AndItEET_RVS1_S1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.145||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic3AndItEET_RVS1_S1_||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic6ModifyItLNS_9BinOpTypeE5EEET_RVS2_S2_||, COMGROUP=_ZN6Atomic6ModifyItLNS_9BinOpTypeE5EEET_RVS2_S2_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic6ModifyItLNS_9BinOpTypeE5EEET_RVS2_S2_ PROC ; T1 Atomic::Modify<unsigned short, (Atomic::BinOpType)5>(volatile T1&, T1)
;;;54       template<typename TYPE, BinOpType OP> 
;;;55       inline TYPE Modify(TYPE volatile & data, TYPE const operand) noexcept
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;56       {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;57         TYPE result;
;;;58         
;;;59         do 
000008  bf00              NOP      
                  |L151.10|
;;;60         {
;;;61           result = Cortex::LoadLinked(data);
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       _ZN6Cortex10LoadLinkedItEET_RVKS1_ ; T1 Cortex::LoadLinked<unsigned short>(const volatile T1&)
000010  4604              MOV      r4,r0
;;;62         } while ( Cortex::SaveConditional(data, BinOp<TYPE, OP>::Calc(result, operand)) );
000012  4639              MOV      r1,r7
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       _ZN6Atomic5BinOpItLNS_9BinOpTypeE5EE4CalcEtt ; Atomic::BinOp<unsigned short, (Atomic::BinOpType)5>::Calc(unsigned short, unsigned short)
00001a  4680              MOV      r8,r0
00001c  4641              MOV      r1,r8
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       _ZN6Cortex15SaveConditionalItEEbRVT_S1_ ; bool Cortex::SaveConditional<unsigned short>(volatile T1&, T1)
000024  2800              CMP      r0,#0
000026  d1f0              BNE      |L151.10|
;;;63         
;;;64         return result;
000028  4625              MOV      r5,r4
00002a  4628              MOV      r0,r5
;;;65       }
00002c  e8bd81f0          POP      {r4-r8,pc}
;;;66     
                          ENDP


                          AREA ||area_number.152||, COMGROUP=_ZN6Atomic6ModifyItLNS_9BinOpTypeE5EEET_RVS2_S2_, LINKORDER=||t._ZN6Atomic6ModifyItLNS_9BinOpTypeE5EEET_RVS2_S2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.152||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic6ModifyItLNS_9BinOpTypeE5EEET_RVS2_S2_||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic5BinOpIjLNS_9BinOpTypeE5EE4CalcEjj||, COMGROUP=_ZN6Atomic5BinOpIjLNS_9BinOpTypeE5EE4CalcEjj, CODE, READONLY, ALIGN=1

                  _ZN6Atomic5BinOpIjLNS_9BinOpTypeE5EE4CalcEjj PROC ; Atomic::BinOp<unsigned, (Atomic::BinOpType)5>::Calc(unsigned, unsigned)
;;;41       template<typename TYPE> struct BinOp<TYPE, BinOpType::opAnd> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l & r; } };
;;;42       template<typename TYPE> struct BinOp<TYPE, BinOpType::opOrr> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l | r; } };
000000  4602              MOV      r2,r0
000002  ea420001          ORR      r0,r2,r1
000006  4770              BX       lr
;;;43       
                          ENDP


                          AREA ||area_number.159||, COMGROUP=_ZN6Atomic5BinOpIjLNS_9BinOpTypeE5EE4CalcEjj, LINKORDER=||t._ZN6Atomic5BinOpIjLNS_9BinOpTypeE5EE4CalcEjj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.159||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic5BinOpIjLNS_9BinOpTypeE5EE4CalcEjj||
                          DCD      0x00000001

                          AREA ||t._ZN6Cortex10LoadLinkedItEET_RVKS1_||, COMGROUP=_ZN6Cortex10LoadLinkedItEET_RVKS1_, CODE, READONLY, ALIGN=1

                  _ZN6Cortex10LoadLinkedItEET_RVKS1_ PROC ; T1 Cortex::LoadLinked<unsigned short>(const volatile T1&)
;;;247      template<typename TYPE>
;;;248      FORCE_INLINE TYPE LoadLinked(TYPE const volatile & data) noexcept { DMB(); return ArmExclusive<sizeof(TYPE)>::LdrEx(data); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  f7fffffe          BL       _ZN6Cortex3DMBEv ; Cortex::DMB()
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt ; Cortex::ArmExclusive<(unsigned)2>::LdrEx(const volatile unsigned short&)
00000e  4605              MOV      r5,r0
000010  4628              MOV      r0,r5
000012  bd70              POP      {r4-r6,pc}
;;;249      
                          ENDP


                          AREA ||area_number.166||, COMGROUP=_ZN6Cortex10LoadLinkedItEET_RVKS1_, LINKORDER=||t._ZN6Cortex10LoadLinkedItEET_RVKS1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.166||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Cortex10LoadLinkedItEET_RVKS1_||
                          DCD      0x00000001

                          AREA ||t._ZN6Cortex15SaveConditionalItEEbRVT_S1_||, COMGROUP=_ZN6Cortex15SaveConditionalItEEbRVT_S1_, CODE, READONLY, ALIGN=1

                  _ZN6Cortex15SaveConditionalItEEbRVT_S1_ PROC ; bool Cortex::SaveConditional<unsigned short>(volatile T1&, T1)
;;;258      template<typename TYPE>
;;;259      FORCE_INLINE bool SaveConditional(TYPE volatile & data, TYPE const value) noexcept
000000  b570              PUSH     {r4-r6,lr}
;;;260      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;261        if ( ArmExclusive<sizeof(TYPE)>::StrEx(data, value) )
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt ; Cortex::ArmExclusive<(unsigned)2>::StrEx(volatile unsigned short&, unsigned short)
00000e  b108              CBZ      r0,|L172.20|
;;;262          return true;
000010  2001              MOVS     r0,#1
                  |L172.18|
;;;263    
;;;264        DSB();
;;;265          
;;;266        return false;
;;;267      }
000012  bd70              POP      {r4-r6,pc}
                  |L172.20|
000014  f7fffffe          BL       _ZN6Cortex3DSBEv ; Cortex::DSB()
000018  2000              MOVS     r0,#0                 ;266
00001a  e7fa              B        |L172.18|
;;;268      
                          ENDP


                          AREA ||area_number.173||, COMGROUP=_ZN6Cortex15SaveConditionalItEEbRVT_S1_, LINKORDER=||t._ZN6Cortex15SaveConditionalItEEbRVT_S1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.173||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Cortex15SaveConditionalItEEbRVT_S1_||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic6ModifyItLNS_9BinOpTypeE4EEET_RVS2_S2_||, COMGROUP=_ZN6Atomic6ModifyItLNS_9BinOpTypeE4EEET_RVS2_S2_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic6ModifyItLNS_9BinOpTypeE4EEET_RVS2_S2_ PROC ; T1 Atomic::Modify<unsigned short, (Atomic::BinOpType)4>(volatile T1&, T1)
;;;54       template<typename TYPE, BinOpType OP> 
;;;55       inline TYPE Modify(TYPE volatile & data, TYPE const operand) noexcept
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;56       {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;57         TYPE result;
;;;58         
;;;59         do 
000008  bf00              NOP      
                  |L179.10|
;;;60         {
;;;61           result = Cortex::LoadLinked(data);
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       _ZN6Cortex10LoadLinkedItEET_RVKS1_ ; T1 Cortex::LoadLinked<unsigned short>(const volatile T1&)
000010  4604              MOV      r4,r0
;;;62         } while ( Cortex::SaveConditional(data, BinOp<TYPE, OP>::Calc(result, operand)) );
000012  4639              MOV      r1,r7
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       _ZN6Atomic5BinOpItLNS_9BinOpTypeE4EE4CalcEtt ; Atomic::BinOp<unsigned short, (Atomic::BinOpType)4>::Calc(unsigned short, unsigned short)
00001a  4680              MOV      r8,r0
00001c  4641              MOV      r1,r8
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       _ZN6Cortex15SaveConditionalItEEbRVT_S1_ ; bool Cortex::SaveConditional<unsigned short>(volatile T1&, T1)
000024  2800              CMP      r0,#0
000026  d1f0              BNE      |L179.10|
;;;63         
;;;64         return result;
000028  4625              MOV      r5,r4
00002a  4628              MOV      r0,r5
;;;65       }
00002c  e8bd81f0          POP      {r4-r8,pc}
;;;66     
                          ENDP


                          AREA ||area_number.180||, COMGROUP=_ZN6Atomic6ModifyItLNS_9BinOpTypeE4EEET_RVS2_S2_, LINKORDER=||t._ZN6Atomic6ModifyItLNS_9BinOpTypeE4EEET_RVS2_S2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.180||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic6ModifyItLNS_9BinOpTypeE4EEET_RVS2_S2_||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic5BinOpItLNS_9BinOpTypeE5EE4CalcEtt||, COMGROUP=_ZN6Atomic5BinOpItLNS_9BinOpTypeE5EE4CalcEtt, CODE, READONLY, ALIGN=1

                  _ZN6Atomic5BinOpItLNS_9BinOpTypeE5EE4CalcEtt PROC ; Atomic::BinOp<unsigned short, (Atomic::BinOpType)5>::Calc(unsigned short, unsigned short)
;;;41       template<typename TYPE> struct BinOp<TYPE, BinOpType::opAnd> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l & r; } };
;;;42       template<typename TYPE> struct BinOp<TYPE, BinOpType::opOrr> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l | r; } };
000000  4602              MOV      r2,r0
000002  ea420001          ORR      r0,r2,r1
000006  4770              BX       lr
;;;43       
                          ENDP


                          AREA ||area_number.187||, COMGROUP=_ZN6Atomic5BinOpItLNS_9BinOpTypeE5EE4CalcEtt, LINKORDER=||t._ZN6Atomic5BinOpItLNS_9BinOpTypeE5EE4CalcEtt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.187||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic5BinOpItLNS_9BinOpTypeE5EE4CalcEtt||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt||, COMGROUP=_ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt, CODE, READONLY, ALIGN=1

                  _ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt PROC ; Cortex::ArmExclusive<(unsigned)2>::LdrEx(const volatile unsigned short&)
;;;83         
;;;84         static HWRD LdrEx(HWRD const volatile & data)                   noexcept { return _LdrExH(&data); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _LdrExH
00000a  4605              MOV      r5,r0
00000c  4628              MOV      r0,r5
00000e  bd70              POP      {r4-r6,pc}
;;;85         static bool StrEx(HWRD       volatile & data, HWRD const value) noexcept { return _StrExH(&data, value) != 0U; }
                          ENDP


                          AREA ||area_number.194||, COMGROUP=_ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt, LINKORDER=||i._ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.194||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt||

                          AREA ||area_number.195||, COMGROUP=_ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.195||, ||.ARM.extab||
                          REQUIRE __cxa_call_unexpected
                  ||.extab._ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt||
                          DCD      0x80aab0b0
000004  0002000b          DCW      0x0002,0x000b
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||t._ZN6Atomic5BinOpItLNS_9BinOpTypeE4EE4CalcEtt||, COMGROUP=_ZN6Atomic5BinOpItLNS_9BinOpTypeE4EE4CalcEtt, CODE, READONLY, ALIGN=1

                  _ZN6Atomic5BinOpItLNS_9BinOpTypeE4EE4CalcEtt PROC ; Atomic::BinOp<unsigned short, (Atomic::BinOpType)4>::Calc(unsigned short, unsigned short)
;;;40       template<typename TYPE> struct BinOp<TYPE, BinOpType::opMul> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l * r; } };
;;;41       template<typename TYPE> struct BinOp<TYPE, BinOpType::opAnd> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l & r; } };
000000  4602              MOV      r2,r0
000002  ea020001          AND      r0,r2,r1
000006  4770              BX       lr
;;;42       template<typename TYPE> struct BinOp<TYPE, BinOpType::opOrr> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l | r; } };
                          ENDP


                          AREA ||area_number.202||, COMGROUP=_ZN6Atomic5BinOpItLNS_9BinOpTypeE4EE4CalcEtt, LINKORDER=||t._ZN6Atomic5BinOpItLNS_9BinOpTypeE4EE4CalcEtt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.202||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic5BinOpItLNS_9BinOpTypeE4EE4CalcEtt||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt||, COMGROUP=_ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt, CODE, READONLY, ALIGN=1

                  _ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt PROC ; Cortex::ArmExclusive<(unsigned)2>::StrEx(volatile unsigned short&, unsigned short)
;;;84         static HWRD LdrEx(HWRD const volatile & data)                   noexcept { return _LdrExH(&data); }
;;;85         static bool StrEx(HWRD       volatile & data, HWRD const value) noexcept { return _StrExH(&data, value) != 0U; }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _StrExH
00000e  b108              CBZ      r0,|L208.20|
000010  2001              MOVS     r0,#1
000012  e000              B        |L208.22|
                  |L208.20|
000014  2000              MOVS     r0,#0
                  |L208.22|
000016  4606              MOV      r6,r0
000018  4630              MOV      r0,r6
00001a  bd70              POP      {r4-r6,pc}
;;;86       };
                          ENDP


                          AREA ||area_number.209||, COMGROUP=_ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt, LINKORDER=||i._ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.209||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt||

                          AREA ||area_number.210||, COMGROUP=_ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.210||, ||.ARM.extab||
                          REQUIRE __cxa_call_unexpected
                  ||.extab._ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt||
                          DCD      0x80aab0b0
000004  0002000f          DCW      0x0002,0x000f
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.constdata__ZZ8EnableAFRV14__regbank_GPIOjjbjE19__PRETTY_FUNCTION__||, COMGROUP=_ZZ8EnableAFRV14__regbank_GPIOjjbjE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZ8EnableAFRV14__regbank_GPIOjjbjE19__PRETTY_FUNCTION__ ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  20456e61          DCB      0x20,0x45,0x6e,0x61
000008  626c6541          DCB      0x62,0x6c,0x65,0x41
00000c  4628766f          DCB      0x46,0x28,0x76,0x6f
000010  6c617469          DCB      0x6c,0x61,0x74,0x69
000014  6c65205f          DCB      0x6c,0x65,0x20,0x5f
000018  5f726567          DCB      0x5f,0x72,0x65,0x67
00001c  62616e6b          DCB      0x62,0x61,0x6e,0x6b
000020  5f475049          DCB      0x5f,0x47,0x50,0x49
000024  4f20262c          DCB      0x4f,0x20,0x26,0x2c
000028  20756e73          DCB      0x20,0x75,0x6e,0x73
00002c  69676e65          DCB      0x69,0x67,0x6e,0x65
000030  6420696e          DCB      0x64,0x20,0x69,0x6e
000034  742c2075          DCB      0x74,0x2c,0x20,0x75
000038  6e736967          DCB      0x6e,0x73,0x69,0x67
00003c  6e656420          DCB      0x6e,0x65,0x64,0x20
000040  696e742c          DCB      0x69,0x6e,0x74,0x2c
000044  20626f6f          DCB      0x20,0x62,0x6f,0x6f
000048  6c2c2075          DCB      0x6c,0x2c,0x20,0x75
00004c  6e736967          DCB      0x6e,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e7429          DCB      0x69,0x6e,0x74,0x29
000058  00                DCB      0x00

                          AREA ||i.__ARM_common_noexcept_landing||, COMGROUP=__ARM_common_noexcept_landing, CODE, READONLY, ALIGN=1

                  __ARM_common_noexcept_landing PROC
000000  f7ffbffe          B.W      __cxa_call_terminate
                          ENDP


                          AREA ||area_number.219||, COMGROUP=__ARM_common_noexcept_landing, LINKORDER=||i.__ARM_common_noexcept_landing||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.219||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__ARM_common_noexcept_landing||
                          DCD      0x00000001
