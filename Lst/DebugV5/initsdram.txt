; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--cpp11 --list --debug -c --asm --interleave --exceptions --protect_stack -o.\out\debugv5\initsdram.o --asm_dir=.\Lst\DebugV5\ --list_dir=.\Lst\DebugV5\ --depend=.\out\debugv5\initsdram.d --cpu=Cortex-M4 --apcs=interwork --no_unaligned_access -O0 --diag_suppress=9931 -I.\Inc -I.\Inc\Debug -I.\Inc\Cortex -I.\Inc\Drivers -I.\Inc\Utilities -D__UVISION_VERSION=527 -DSTM32F429xx -DCORTEX_M=4 -DDEBUG --omf_browse=.\out\debugv5\initsdram.crf --no_rtti InitSDRAM.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Z9InitSDRAMv PROC ; InitSDRAM()
;;;9      
;;;10     void InitSDRAM() noexcept
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;11     {
;;;12       /*
;;;13       +----------------------------------------------------------------------------------+
;;;14       |                       SDRAM pins assignment                                      |
;;;15       +-------------------+--------------------+--------------------+--------------------+
;;;16       | PD0  <-> FMC_D2   | PE0  <-> FMC_NBL0  | PF0  <-> FMC_A0    | PG0  <-> FMC_A10   |
;;;17       | PD1  <-> FMC_D3   | PE1  <-> FMC_NBL1  | PF1  <-> FMC_A1    | PG1  <-> FMC_A11   |
;;;18       | PD8  <-> FMC_D13  | PE7  <-> FMC_D4    | PF2  <-> FMC_A2    | PG8  <-> FMC_SDCLK |
;;;19       | PD9  <-> FMC_D14  | PE8  <-> FMC_D5    | PF3  <-> FMC_A3    | PG15 <-> FMC_NCAS  |
;;;20       | PD10 <-> FMC_D15  | PE9  <-> FMC_D6    | PF4  <-> FMC_A4    |--------------------+ 
;;;21       | PD14 <-> FMC_D0   | PE10 <-> FMC_D7    | PF5  <-> FMC_A5    |   
;;;22       | PD15 <-> FMC_D1   | PE11 <-> FMC_D8    | PF11 <-> FMC_NRAS  | 
;;;23       +-------------------| PE12 <-> FMC_D9    | PF12 <-> FMC_A6    | 
;;;24                           | PE13 <-> FMC_D10   | PF13 <-> FMC_A7    |    
;;;25                           | PE14 <-> FMC_D11   | PF14 <-> FMC_A8    |
;;;26                           | PE15 <-> FMC_D12   | PF15 <-> FMC_A9    |
;;;27       +-------------------+--------------------+--------------------+
;;;28       | PB5 <-> FMC_SDCKE1| 
;;;29       | PB6 <-> FMC_SDNE1 | 
;;;30       | PC0 <-> FMC_SDNWE |
;;;31       | PG4 <-> FMC_BA0   |
;;;32       | PG5 <-> FMC_BA1   |
;;;33       +-------------------+
;;;34       */
;;;35     
;;;36       AHB1ClockEnableByMask(
000004  207e              MOVS     r0,#0x7e
000006  f7fffffe          BL       _Z21AHB1ClockEnableByMaskj ; AHB1ClockEnableByMask(unsigned)
;;;37       (1U << INDX_RCC_AHB1_GPIOB) |
;;;38       (1U << INDX_RCC_AHB1_GPIOC) |
;;;39       (1U << INDX_RCC_AHB1_GPIOD) |
;;;40       (1U << INDX_RCC_AHB1_GPIOE) |
;;;41       (1U << INDX_RCC_AHB1_GPIOF) |
;;;42       (1U << INDX_RCC_AHB1_GPIOG));
;;;43     
;;;44       static constexpr BYTE const bPins[] = {                5, 6                                  };
;;;45       static constexpr BYTE const dPins[] = { 0, 1,                   8, 9, 10,             14, 15 };
;;;46       static constexpr BYTE const ePins[] = { 0, 1,                7, 8, 9, 10, 11, 12, 13, 14, 15 };
;;;47       static constexpr BYTE const fPins[] = { 0, 1, 2, 3, 4, 5,                 11, 12, 13, 14, 15 };
;;;48       static constexpr BYTE const gPins[] = { 0, 1,       4, 5,       8,                        15 };
;;;49       
;;;50       EnableAF(rbGPIOB, MASK_GPIO_AFR_AF12, MASK_GPIO_OSPEEDR_HIGH, false, bPins);
00000a  4c3e              LDR      r4,|L1.260|
00000c  250c              MOVS     r5,#0xc
00000e  2603              MOVS     r6,#3
000010  2700              MOVS     r7,#0
000012  f8df80f4          LDR      r8,|L1.264|
000016  2002              MOVS     r0,#2
000018  463b              MOV      r3,r7
00001a  4632              MOV      r2,r6
00001c  4629              MOV      r1,r5
00001e  e9cd8000          STRD     r8,r0,[sp,#0]
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       _Z8EnableAFRV14__regbank_GPIOjjbPKhj ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char*, unsigned)
000028  bf00              NOP      
;;;51       EnableAF(rbGPIOC, MASK_GPIO_AFR_AF12, MASK_GPIO_OSPEEDR_HIGH, false, 0U);
00002a  2000              MOVS     r0,#0
00002c  4603              MOV      r3,r0
00002e  2203              MOVS     r2,#3
000030  210c              MOVS     r1,#0xc
000032  9000              STR      r0,[sp,#0]
000034  4835              LDR      r0,|L1.268|
000036  f7fffffe          BL       _Z8EnableAFRV14__regbank_GPIOjjbj ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)
;;;52       EnableAF(rbGPIOD, MASK_GPIO_AFR_AF12, MASK_GPIO_OSPEEDR_HIGH, false, dPins);
00003a  4c35              LDR      r4,|L1.272|
00003c  f8df80d4          LDR      r8,|L1.276|
000040  2007              MOVS     r0,#7
000042  463b              MOV      r3,r7
000044  4632              MOV      r2,r6
000046  4629              MOV      r1,r5
000048  e9cd8000          STRD     r8,r0,[sp,#0]
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       _Z8EnableAFRV14__regbank_GPIOjjbPKhj ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char*, unsigned)
000052  bf00              NOP      
;;;53       EnableAF(rbGPIOE, MASK_GPIO_AFR_AF12, MASK_GPIO_OSPEEDR_HIGH, false, ePins);
000054  4830              LDR      r0,|L1.280|
000056  2300              MOVS     r3,#0
000058  2203              MOVS     r2,#3
00005a  210c              MOVS     r1,#0xc
00005c  9000              STR      r0,[sp,#0]
00005e  482f              LDR      r0,|L1.284|
000060  f7fffffe          BL       _Z8EnableAFILj11EEvRV14__regbank_GPIOjjbRAT__Kh ; void EnableAF<(unsigned)11>(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char(&)[T1])
;;;54       EnableAF(rbGPIOF, MASK_GPIO_AFR_AF12, MASK_GPIO_OSPEEDR_HIGH, false, fPins);
000064  482e              LDR      r0,|L1.288|
000066  2300              MOVS     r3,#0
000068  2203              MOVS     r2,#3
00006a  210c              MOVS     r1,#0xc
00006c  9000              STR      r0,[sp,#0]
00006e  482d              LDR      r0,|L1.292|
000070  f7fffffe          BL       _Z8EnableAFILj11EEvRV14__regbank_GPIOjjbRAT__Kh ; void EnableAF<(unsigned)11>(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char(&)[T1])
;;;55       EnableAF(rbGPIOG, MASK_GPIO_AFR_AF12, MASK_GPIO_OSPEEDR_HIGH, false, gPins);
000074  4d2c              LDR      r5,|L1.296|
000076  240c              MOVS     r4,#0xc
000078  f8df80b0          LDR      r8,|L1.300|
00007c  2006              MOVS     r0,#6
00007e  463b              MOV      r3,r7
000080  4632              MOV      r2,r6
000082  4621              MOV      r1,r4
000084  e9cd8000          STRD     r8,r0,[sp,#0]
000088  4628              MOV      r0,r5
00008a  f7fffffe          BL       _Z8EnableAFRV14__regbank_GPIOjjbPKhj ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char*, unsigned)
00008e  bf00              NOP      
;;;56       
;;;57       AHBClockEnable(PERIPHERY_AHB_FMC);
000090  f44f7000          MOV      r0,#0x200
000094  f7fffffe          BL       _Z14AHBClockEnablej ; AHBClockEnable(unsigned)
;;;58     
;;;59       rbFMC.SDCR1 = MASK_FMC_SDCRx_SDCLK_2HCLK | MASK_FMC_SDCRx_RPIPE_1HCLK;
000098  f44f5020          MOV      r0,#0x2800
00009c  4924              LDR      r1,|L1.304|
00009e  f8c10140          STR      r0,[r1,#0x140]  ; rbFMC
;;;60       rbFMC.SDCR2 = MASK_FMC_SDCRx_CAS_3 | MASK_FMC_SDCRx_NC_08 | MASK_FMC_SDCRx_NR_12 | MASK_FMC_SDCRx_MWID_16 | MASK_FMC_SDCRx_NB;
0000a2  f44f70ea          MOV      r0,#0x1d4
0000a6  f8c10144          STR      r0,[r1,#0x144]  ; rbFMC
;;;61       rbFMC.SDTR1 = (7U << INDX_FMC_SDTRx_TRC) | (2U << INDX_FMC_SDTRx_TRP);
0000aa  4822              LDR      r0,|L1.308|
0000ac  f8c10148          STR      r0,[r1,#0x148]  ; rbFMC
;;;62       rbFMC.SDTR2 = (2U << INDX_FMC_SDTRx_TWR) | (4U << INDX_FMC_SDTRx_TRAS) | (7U << INDX_FMC_SDTRx_TXSR) | (1U << INDX_FMC_SDTRx_TMRD);
0000b0  4821              LDR      r0,|L1.312|
0000b2  f8c1014c          STR      r0,[r1,#0x14c]  ; rbFMC
;;;63       
;;;64       for ( unsigned volatile i = 0U; i < 500000U; i++ ) { Cortex::DSB(); }
0000b6  2000              MOVS     r0,#0
0000b8  9001              STR      r0,[sp,#4]
0000ba  e004              B        |L1.198|
                  |L1.188|
0000bc  f7fffffe          BL       _ZN6Cortex3DSBEv ; Cortex::DSB()
0000c0  9801              LDR      r0,[sp,#4]
0000c2  1c40              ADDS     r0,r0,#1
0000c4  9001              STR      r0,[sp,#4]
                  |L1.198|
0000c6  491d              LDR      r1,|L1.316|
0000c8  9801              LDR      r0,[sp,#4]
0000ca  4288              CMP      r0,r1
0000cc  d3f6              BCC      |L1.188|
;;;65       
;;;66       SDRAM_Command(MASK_FMC_CMR_MODE_CLK_CFG_ENABLE | MASK_FMC_SDCMR_CTB2 | (1U << INDX_FMC_SDCMR_NRFS));
0000ce  2029              MOVS     r0,#0x29
0000d0  f7fffffe          BL       _Z13SDRAM_Commandj ; SDRAM_Command(unsigned)
;;;67       SDRAM_Command(MASK_FMC_CMR_MODE_PALL           | MASK_FMC_SDCMR_CTB2 | (1U << INDX_FMC_SDCMR_NRFS));
0000d4  202a              MOVS     r0,#0x2a
0000d6  f7fffffe          BL       _Z13SDRAM_Commandj ; SDRAM_Command(unsigned)
;;;68       SDRAM_Command(MASK_FMC_CMR_MODE_AUTO_REFRESH   | MASK_FMC_SDCMR_CTB2 | (4U << INDX_FMC_SDCMR_NRFS));
0000da  208b              MOVS     r0,#0x8b
0000dc  f7fffffe          BL       _Z13SDRAM_Commandj ; SDRAM_Command(unsigned)
;;;69       SDRAM_Command(MASK_FMC_CMR_MODE_AUTO_REFRESH   | MASK_FMC_SDCMR_CTB2 | (4U << INDX_FMC_SDCMR_NRFS));
0000e0  208b              MOVS     r0,#0x8b
0000e2  f7fffffe          BL       _Z13SDRAM_Commandj ; SDRAM_Command(unsigned)
;;;70       SDRAM_Command(MASK_FMC_CMR_MODE_LOAD_MODE      | MASK_FMC_SDCMR_CTB2 | (1U << INDX_FMC_SDCMR_NRFS) |
0000e6  4816              LDR      r0,|L1.320|
0000e8  f7fffffe          BL       _Z13SDRAM_Commandj ; SDRAM_Command(unsigned)
;;;71       (SDRAM_MRD_BURST_LENGTH_2 | SDRAM_MRD_BURST_TYPE_SEQUENTIAL | SDRAM_MRD_CAS_LATENCY_3 | SDRAM_MRD_OPERATING_MODE_STANDARD | SDRAM_MRD_WRITEBURST_MODE_SINGLE) << INDX_FMC_SDCMR_MRD);
;;;72     
;;;73       while ( FMC_SDSR_IsBusy() ) { }
0000ec  bf00              NOP      
                  |L1.238|
0000ee  f7fffffe          BL       _Z15FMC_SDSR_IsBusyv ; FMC_SDSR_IsBusy()
0000f2  2800              CMP      r0,#0
0000f4  d1fb              BNE      |L1.238|
;;;74     
;;;75       rbFMC.SDRTR = 1386U << 1;
0000f6  f64020d4          MOV      r0,#0xad4
0000fa  490d              LDR      r1,|L1.304|
0000fc  f8c10154          STR      r0,[r1,#0x154]  ; rbFMC
;;;76     }
000100  e8bd81fc          POP      {r2-r8,pc}
;;;77     
                          ENDP

                  |L1.260|
                          DCD      rbGPIOB
                  |L1.264|
                          DCD      _ZZ9InitSDRAMvE5bPins ; InitSDRAM()::bPins
                  |L1.268|
                          DCD      rbGPIOC
                  |L1.272|
                          DCD      rbGPIOD
                  |L1.276|
                          DCD      _ZZ9InitSDRAMvE5dPins ; InitSDRAM()::dPins
                  |L1.280|
                          DCD      _ZZ9InitSDRAMvE5ePins ; InitSDRAM()::ePins
                  |L1.284|
                          DCD      rbGPIOE
                  |L1.288|
                          DCD      _ZZ9InitSDRAMvE5fPins ; InitSDRAM()::fPins
                  |L1.292|
                          DCD      rbGPIOF
                  |L1.296|
                          DCD      rbGPIOG
                  |L1.300|
                          DCD      _ZZ9InitSDRAMvE5gPins ; InitSDRAM()::gPins
                  |L1.304|
                          DCD      rbFMC
                  |L1.308|
                          DCD      0x00207000
                  |L1.312|
                          DCD      0x00020471
                  |L1.316|
                          DCD      0x0007a120
                  |L1.320|
                          DCD      0x0004622c

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000000
                          RELOC 42, ||.extab._Z9InitSDRAMv||

                          AREA ||.ARM.extab||, DATA, READONLY, ALIGN=2

                          REQUIRE __cxa_call_unexpected
                          REQUIRE __cxa_call_terminate
                  ||.extab._Z9InitSDRAMv||
                          DCD      0x8001acb0
000004  00cc0029          DCW      0x00cc,0x0029
                          DCD      0x80000000
                          DCD      0x00000001
                          RELOC 42, __ARM_common_noexcept_landing
                          DCD      0x00000000

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  _ZZ9InitSDRAMvE5bPins ; InitSDRAM()::bPins
000000  0506              DCB      0x05,0x06
                  _ZZ9InitSDRAMvE5dPins ; InitSDRAM()::dPins
000002  0001              DCB      0x00,0x01
000004  08090a0e          DCB      0x08,0x09,0x0a,0x0e
000008  0f                DCB      0x0f
                  _ZZ9InitSDRAMvE5ePins ; InitSDRAM()::ePins
000009  000107            DCB      0x00,0x01,0x07
00000c  08090a0b          DCB      0x08,0x09,0x0a,0x0b
000010  0c0d0e0f          DCB      0x0c,0x0d,0x0e,0x0f
                  _ZZ9InitSDRAMvE5fPins ; InitSDRAM()::fPins
000014  00010203          DCB      0x00,0x01,0x02,0x03
000018  04050b0c          DCB      0x04,0x05,0x0b,0x0c
00001c  0d0e0f            DCB      0x0d,0x0e,0x0f
                  _ZZ9InitSDRAMvE5gPins ; InitSDRAM()::gPins
00001f  00                DCB      0x00
000020  01040508          DCB      0x01,0x04,0x05,0x08
000024  0f                DCB      0x0f

                          AREA ||.constdata__ZZ8EnableAFRV14__regbank_GPIOjjbjEs||, COMGROUP=_ZZ8EnableAFRV14__regbank_GPIOjjbjEs, DATA, READONLY, ALIGN=0

                  _ZZ8EnableAFRV14__regbank_GPIOjjbjEs ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)::string
000000  6e203c20          DCB      0x6e,0x20,0x3c,0x20
000004  31365500          DCB      0x31,0x36,0x55,0x00

                          AREA ||.constdata__ZZ8EnableAFRV14__regbank_GPIOjjbjEs_0||, COMGROUP=_ZZ8EnableAFRV14__regbank_GPIOjjbjEs_0, DATA, READONLY, ALIGN=0

                  _ZZ8EnableAFRV14__regbank_GPIOjjbjEs_0 ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)::string (instance 2)
000000  52425f47          DCB      0x52,0x42,0x5f,0x47
000004  50494f2e          DCB      0x50,0x49,0x4f,0x2e
000008  6800              DCB      0x68,0x00

                          AREA ||.constdata__ZZ8EnableAFRV14__regbank_GPIOjjbjEs_1||, COMGROUP=_ZZ8EnableAFRV14__regbank_GPIOjjbjEs_1, DATA, READONLY, ALIGN=0

                  _ZZ8EnableAFRV14__regbank_GPIOjjbjEs_1 ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)::string (instance 3)
000000  6166203c          DCB      0x61,0x66,0x20,0x3c
000004  20313655          DCB      0x20,0x31,0x36,0x55
000008  00                DCB      0x00

                          AREA ||t._ZN6Atomic4BfldIjEET_RVS1_S1_S1_||, COMGROUP=_ZN6Atomic4BfldIjEET_RVS1_S1_S1_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic4BfldIjEET_RVS1_S1_S1_ PROC ; T1 Atomic::Bfld<unsigned>(volatile T1&, T1, T1)
;;;326      
;;;327      template<typename TYPE> inline TYPE Bfld(TYPE volatile & data, TYPE const set, TYPE const res) noexcept
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;328      {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;329        TYPE value;
;;;330        
;;;331        do 
00000a  bf00              NOP      
                  |L22.12|
;;;332        {
;;;333          value = Cortex::LoadLinked(data);
00000c  4640              MOV      r0,r8
00000e  f7fffffe          BL       _ZN6Cortex10LoadLinkedIjEET_RVKS1_ ; T1 Cortex::LoadLinked<unsigned>(const volatile T1&)
000012  4604              MOV      r4,r0
;;;334        } while ( Cortex::SaveConditional(data, (TYPE)(set | (value & ~res))) );
000014  ea240006          BIC      r0,r4,r6
000018  ea400105          ORR      r1,r0,r5
00001c  4640              MOV      r0,r8
00001e  f7fffffe          BL       _ZN6Cortex15SaveConditionalIjEEbRVT_S1_ ; bool Cortex::SaveConditional<unsigned>(volatile T1&, T1)
000022  2800              CMP      r0,#0
000024  d1f2              BNE      |L22.12|
;;;335        
;;;336        return value;
000026  4627              MOV      r7,r4
000028  4638              MOV      r0,r7
;;;337      }
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;338    };
                          ENDP


                          AREA ||area_number.23||, COMGROUP=_ZN6Atomic4BfldIjEET_RVS1_S1_S1_, LINKORDER=||t._ZN6Atomic4BfldIjEET_RVS1_S1_S1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic4BfldIjEET_RVS1_S1_S1_||
                          DCD      0x00000001

                          AREA ||i._Z8EnableAFRV14__regbank_GPIOjjbj||, COMGROUP=_Z8EnableAFRV14__regbank_GPIOjjbj, CODE, READONLY, ALIGN=2

                  _Z8EnableAFRV14__regbank_GPIOjjbj PROC ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)
;;;165    
;;;166    inline void EnableAF(RegbankTypeGPIO volatile & gpio, WORD const af, WORD const sp, bool const od, unsigned const n) noexcept 
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;167    {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
00000a  469b              MOV      r11,r3
00000c  9c0e              LDR      r4,[sp,#0x38]
;;;168      ASSERT(n < 16U);
00000e  2c10              CMP      r4,#0x10
000010  d200              BCS      |L29.20|
000012  e005              B        |L29.32|
                  |L29.20|
000014  4b27              LDR      r3,|L29.180|
000016  22a8              MOVS     r2,#0xa8
000018  4927              LDR      r1,|L29.184|
00001a  4828              LDR      r0,|L29.188|
00001c  f7fffffe          BL       _Z15AssertionFailedPKcS0_jS0_ ; AssertionFailed(const char*, const char*, unsigned, const char*)
                  |L29.32|
;;;169      ASSERT(af < 16U);
000020  2f10              CMP      r7,#0x10
000022  d200              BCS      |L29.38|
000024  e005              B        |L29.50|
                  |L29.38|
000026  4b23              LDR      r3,|L29.180|
000028  22a9              MOVS     r2,#0xa9
00002a  4923              LDR      r1,|L29.184|
00002c  4824              LDR      r0,|L29.192|
00002e  f7fffffe          BL       _Z15AssertionFailedPKcS0_jS0_ ; AssertionFailed(const char*, const char*, unsigned, const char*)
                  |L29.50|
;;;170    
;;;171      auto const pos((n % 8U) * 4U);
000032  0760              LSLS     r0,r4,#29
000034  ea4f68d0          LSR      r8,r0,#27
;;;172      WORD const set(af            << pos);
000038  fa07f008          LSL      r0,r7,r8
00003c  9003              STR      r0,[sp,#0xc]
;;;173      WORD const res(MASK_GPIO_AFR << pos);
00003e  200f              MOVS     r0,#0xf
000040  fa00f008          LSL      r0,r0,r8
000044  9002              STR      r0,[sp,#8]
;;;174      auto const indx(n / 8U);
000046  08e1              LSRS     r1,r4,#3
000048  9101              STR      r1,[sp,#4]
;;;175    
;;;176      Atomic::Bfld(gpio.AFR[indx], set, res);
00004a  f1050220          ADD      r2,r5,#0x20
00004e  9901              LDR      r1,[sp,#4]
000050  eb020081          ADD      r0,r2,r1,LSL #2
000054  e9dd2102          LDRD     r2,r1,[sp,#8]
000058  f7fffffe          BL       _ZN6Atomic4BfldIjEET_RVS1_S1_S1_ ; T1 Atomic::Bfld<unsigned>(volatile T1&, T1, T1)
;;;177      
;;;178      HWRD const mask = 1U << n;
00005c  2001              MOVS     r0,#1
00005e  40a0              LSLS     r0,r0,r4
000060  b280              UXTH     r0,r0
000062  9000              STR      r0,[sp,#0]
;;;179      
;;;180      if ( od )
000064  f1bb0f00          CMP      r11,#0
000068  d004              BEQ      |L29.116|
;;;181        Atomic::Orr(gpio.OTYPER, mask);
00006a  1d28              ADDS     r0,r5,#4
00006c  9900              LDR      r1,[sp,#0]
00006e  f7fffffe          BL       _ZN6Atomic3OrrItEET_RVS1_S1_ ; T1 Atomic::Orr<unsigned short>(volatile T1&, T1)
000072  e003              B        |L29.124|
                  |L29.116|
;;;182      else
;;;183        Atomic::Bic(gpio.OTYPER, mask);
000074  1d28              ADDS     r0,r5,#4
000076  9900              LDR      r1,[sp,#0]
000078  f7fffffe          BL       _ZN6Atomic3BicItEET_RVS1_S1_ ; T1 Atomic::Bic<unsigned short>(volatile T1&, T1)
                  |L29.124|
;;;184    
;;;185      WrGpioSP(gpio, n, sp);
00007c  bf00              NOP      
00007e  ea4f0944          LSL      r9,r4,#1
000082  2003              MOVS     r0,#3
000084  fa00f209          LSL      r2,r0,r9
000088  f0060003          AND      r0,r6,#3
00008c  fa00f109          LSL      r1,r0,r9
000090  f1050008          ADD      r0,r5,#8
000094  f7fffffe          BL       _ZN6Atomic4BfldIjEET_RVS1_S1_S1_ ; T1 Atomic::Bfld<unsigned>(volatile T1&, T1, T1)
;;;186      WrGpioMD(gpio, n, MASK_GPIO_MODER_ALTFNC);     
000098  f04f0902          MOV      r9,#2
00009c  ea4f0a44          LSL      r10,r4,#1
0000a0  2003              MOVS     r0,#3
0000a2  fa00f20a          LSL      r2,r0,r10
0000a6  fa09f10a          LSL      r1,r9,r10
0000aa  4628              MOV      r0,r5
0000ac  f7fffffe          BL       _ZN6Atomic4BfldIjEET_RVS1_S1_S1_ ; T1 Atomic::Bfld<unsigned>(volatile T1&, T1, T1)
;;;187    }
0000b0  e8bd9fff          POP      {r0-r12,pc}
;;;188    
                          ENDP

                  |L29.180|
                          DCD      _ZZ8EnableAFRV14__regbank_GPIOjjbjE19__PRETTY_FUNCTION__ ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)::__PRETTY_FUNCTION__
                  |L29.184|
                          DCD      _ZZ8EnableAFRV14__regbank_GPIOjjbjEs_0 ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)::string (instance 2)
                  |L29.188|
                          DCD      _ZZ8EnableAFRV14__regbank_GPIOjjbjEs ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)::string
                  |L29.192|
                          DCD      _ZZ8EnableAFRV14__regbank_GPIOjjbjEs_1 ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)::string (instance 3)

                          AREA ||area_number.30||, COMGROUP=_Z8EnableAFRV14__regbank_GPIOjjbj, LINKORDER=||i._Z8EnableAFRV14__regbank_GPIOjjbj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z8EnableAFRV14__regbank_GPIOjjbj||
                          DCD      0x00000001

                          AREA ||i._Z8EnableAFRV14__regbank_GPIOjjbPKhj||, COMGROUP=_Z8EnableAFRV14__regbank_GPIOjjbPKhj, CODE, READONLY, ALIGN=1

                  _Z8EnableAFRV14__regbank_GPIOjjbPKhj PROC ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char*, unsigned)
;;;188    
;;;189    inline void EnableAF(RegbankTypeGPIO volatile & gpio, WORD const af, WORD const sp, bool const od, BYTE const * nums, unsigned dim)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;190    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  e9dd4908          LDRD     r4,r9,[sp,#0x20]
;;;191      while ( dim-- > 0U )
000010  e008              B        |L37.36|
                  |L37.18|
;;;192      {
;;;193        EnableAF(gpio, af, sp, od, *nums++);
000012  f8140b01          LDRB     r0,[r4],#1
000016  4643              MOV      r3,r8
000018  463a              MOV      r2,r7
00001a  4631              MOV      r1,r6
00001c  9000              STR      r0,[sp,#0]
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       _Z8EnableAFRV14__regbank_GPIOjjbj ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)
                  |L37.36|
000024  f1b90000          SUBS     r0,r9,#0              ;191
000028  f1a90901          SUB      r9,r9,#1              ;191
00002c  d1f1              BNE      |L37.18|
;;;194      }
;;;195    }
00002e  e8bd83f8          POP      {r3-r9,pc}
;;;196    
                          ENDP


                          AREA ||area_number.38||, COMGROUP=_Z8EnableAFRV14__regbank_GPIOjjbPKhj, LINKORDER=||i._Z8EnableAFRV14__regbank_GPIOjjbPKhj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.38||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z8EnableAFRV14__regbank_GPIOjjbPKhj||
                          DCD      0x00000001

                          AREA ||t._ZN6Cortex10LoadLinkedIjEET_RVKS1_||, COMGROUP=_ZN6Cortex10LoadLinkedIjEET_RVKS1_, CODE, READONLY, ALIGN=1

                  _ZN6Cortex10LoadLinkedIjEET_RVKS1_ PROC ; T1 Cortex::LoadLinked<unsigned>(const volatile T1&)
;;;247      template<typename TYPE>
;;;248      FORCE_INLINE TYPE LoadLinked(TYPE const volatile & data) noexcept { DMB(); return ArmExclusive<sizeof(TYPE)>::LdrEx(data); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  f7fffffe          BL       _ZN6Cortex3DMBEv ; Cortex::DMB()
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj ; Cortex::ArmExclusive<(unsigned)4>::LdrEx(const volatile unsigned&)
00000e  4605              MOV      r5,r0
000010  4628              MOV      r0,r5
000012  bd70              POP      {r4-r6,pc}
;;;249      
                          ENDP


                          AREA ||area_number.46||, COMGROUP=_ZN6Cortex10LoadLinkedIjEET_RVKS1_, LINKORDER=||t._ZN6Cortex10LoadLinkedIjEET_RVKS1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.46||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Cortex10LoadLinkedIjEET_RVKS1_||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex3DSBEv||, COMGROUP=_ZN6Cortex3DSBEv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex3DSBEv PROC ; Cortex::DSB()
;;;122      FORCE_INLINE void DMB() noexcept { SCHEDULE_BARRIER(); __dmb(0xF); SCHEDULE_BARRIER(); }  
;;;123      FORCE_INLINE void DSB() noexcept { SCHEDULE_BARRIER(); __dsb(0xF); SCHEDULE_BARRIER(); }
000000  bf00              NOP      
000002  bf00              NOP      
000004  f3bf8f4f          DSB      
000008  bf00              NOP      
00000a  bf00              NOP      
00000c  4770              BX       lr
;;;124      FORCE_INLINE void ISB() noexcept { SCHEDULE_BARRIER(); __isb(0xF); SCHEDULE_BARRIER(); }
                          ENDP


                          AREA ||area_number.53||, COMGROUP=_ZN6Cortex3DSBEv, LINKORDER=||i._ZN6Cortex3DSBEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.53||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex3DSBEv||
                          DCD      0x00000001

                          AREA ||t._ZN6Cortex15SaveConditionalIjEEbRVT_S1_||, COMGROUP=_ZN6Cortex15SaveConditionalIjEEbRVT_S1_, CODE, READONLY, ALIGN=1

                  _ZN6Cortex15SaveConditionalIjEEbRVT_S1_ PROC ; bool Cortex::SaveConditional<unsigned>(volatile T1&, T1)
;;;258      template<typename TYPE>
;;;259      FORCE_INLINE bool SaveConditional(TYPE volatile & data, TYPE const value) noexcept
000000  b570              PUSH     {r4-r6,lr}
;;;260      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;261        if ( ArmExclusive<sizeof(TYPE)>::StrEx(data, value) )
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj ; Cortex::ArmExclusive<(unsigned)4>::StrEx(volatile unsigned&, unsigned)
00000e  b108              CBZ      r0,|L59.20|
;;;262          return true;
000010  2001              MOVS     r0,#1
                  |L59.18|
;;;263    
;;;264        DSB();
;;;265          
;;;266        return false;
;;;267      }
000012  bd70              POP      {r4-r6,pc}
                  |L59.20|
000014  f7fffffe          BL       _ZN6Cortex3DSBEv ; Cortex::DSB()
000018  2000              MOVS     r0,#0                 ;266
00001a  e7fa              B        |L59.18|
;;;268      
                          ENDP


                          AREA ||area_number.60||, COMGROUP=_ZN6Cortex15SaveConditionalIjEEbRVT_S1_, LINKORDER=||t._ZN6Cortex15SaveConditionalIjEEbRVT_S1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.60||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Cortex15SaveConditionalIjEEbRVT_S1_||
                          DCD      0x00000001

                          AREA ||i._Z21AHB1ClockEnableByMaskj||, COMGROUP=_Z21AHB1ClockEnableByMaskj, CODE, READONLY, ALIGN=2

                  _Z21AHB1ClockEnableByMaskj PROC ; AHB1ClockEnableByMask(unsigned)
;;;323    
;;;324    inline void AHB1ClockEnableByMask(WORD const mask) noexcept
000000  b510              PUSH     {r4,lr}
;;;325    {
000002  4604              MOV      r4,r0
;;;326      Atomic::Orr(rbRCC.AHBENR[0], mask);
000004  4621              MOV      r1,r4
000006  4802              LDR      r0,|L66.16|
000008  f7fffffe          BL       _ZN6Atomic3OrrIjEET_RVS1_S1_ ; T1 Atomic::Orr<unsigned>(volatile T1&, T1)
;;;327    }
00000c  bd10              POP      {r4,pc}
;;;328    
                          ENDP

00000e  0000              DCW      0x0000
                  |L66.16|
                          DCD      rbRCC+0x30

                          AREA ||area_number.67||, COMGROUP=_Z21AHB1ClockEnableByMaskj, LINKORDER=||i._Z21AHB1ClockEnableByMaskj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.67||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z21AHB1ClockEnableByMaskj||
                          DCD      0x00000001

                          AREA ||i._Z14AHBClockEnablej||, COMGROUP=_Z14AHBClockEnablej, CODE, READONLY, ALIGN=2

                  _Z14AHBClockEnablej PROC ; AHBClockEnable(unsigned)
;;;332    /// \param[in] num kennzeichnet die AHB-Periphery.
;;;333    inline void AHBClockEnable(WORD const num) noexcept
000000  b570              PUSH     {r4-r6,lr}
;;;334    {
000002  4604              MOV      r4,r0
;;;335      auto const i = num >> PERIPHERY_INDX_POS;
000004  0a25              LSRS     r5,r4,#8
;;;336      auto const n = num % 32U;
000006  f004061f          AND      r6,r4,#0x1f
;;;337      
;;;338      Atomic::Orr(rbRCC.AHBENR[i], 1U << n);
00000a  2201              MOVS     r2,#1
00000c  fa02f106          LSL      r1,r2,r6
000010  4a02              LDR      r2,|L73.28|
000012  eb020085          ADD      r0,r2,r5,LSL #2
000016  f7fffffe          BL       _ZN6Atomic3OrrIjEET_RVS1_S1_ ; T1 Atomic::Orr<unsigned>(volatile T1&, T1)
;;;339    }
00001a  bd70              POP      {r4-r6,pc}
;;;340    
                          ENDP

                  |L73.28|
                          DCD      rbRCC+0x30

                          AREA ||area_number.74||, COMGROUP=_Z14AHBClockEnablej, LINKORDER=||i._Z14AHBClockEnablej||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.74||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z14AHBClockEnablej||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic3BicItEET_RVS1_S1_||, COMGROUP=_ZN6Atomic3BicItEET_RVS1_S1_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic3BicItEET_RVS1_S1_ PROC ; T1 Atomic::Bic<unsigned short>(volatile T1&, T1)
;;;189      /// \tparam TYPE ist der Datentyp der atomaren Operation.
;;;190      template<typename TYPE> inline TYPE Bic(TYPE volatile & data, TYPE const mask ) noexcept { return And(data, (TYPE)(~mask)); }
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  43e0              MVNS     r0,r4
000008  b281              UXTH     r1,r0
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       _ZN6Atomic3AndItEET_RVS1_S1_ ; T1 Atomic::And<unsigned short>(volatile T1&, T1)
000010  4606              MOV      r6,r0
000012  4630              MOV      r0,r6
000014  bd70              POP      {r4-r6,pc}
;;;191    
                          ENDP


                          AREA ||area_number.81||, COMGROUP=_ZN6Atomic3BicItEET_RVS1_S1_, LINKORDER=||t._ZN6Atomic3BicItEET_RVS1_S1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.81||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic3BicItEET_RVS1_S1_||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic3OrrItEET_RVS1_S1_||, COMGROUP=_ZN6Atomic3OrrItEET_RVS1_S1_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic3OrrItEET_RVS1_S1_ PROC ; T1 Atomic::Orr<unsigned short>(volatile T1&, T1)
;;;182      /// \tparam TYPE ist der Datentyp der atomaren Operation.
;;;183      template<typename TYPE> inline TYPE Orr(TYPE volatile & data, TYPE const mask ) noexcept { return Modify<TYPE, BinOpType::opOrr>(data, mask); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6Atomic6ModifyItLNS_9BinOpTypeE5EEET_RVS2_S2_ ; T1 Atomic::Modify<unsigned short, (Atomic::BinOpType)5>(volatile T1&, T1)
00000e  4606              MOV      r6,r0
000010  4630              MOV      r0,r6
000012  bd70              POP      {r4-r6,pc}
;;;184    
                          ENDP


                          AREA ||area_number.88||, COMGROUP=_ZN6Atomic3OrrItEET_RVS1_S1_, LINKORDER=||t._ZN6Atomic3OrrItEET_RVS1_S1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.88||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic3OrrItEET_RVS1_S1_||
                          DCD      0x00000001

                          AREA ||i._Z15FMC_SDSR_IsBusyv||, COMGROUP=_Z15FMC_SDSR_IsBusyv, CODE, READONLY, ALIGN=2

                  _Z15FMC_SDSR_IsBusyv PROC ; FMC_SDSR_IsBusy()
;;;178    
;;;179    inline bool FMC_SDSR_IsBusy()
000000  2020              MOVS     r0,#0x20
000002  4905              LDR      r1,|L94.24|
000004  f8d11158          LDR      r1,[r1,#0x158]  ; rbFMC
000008  4001              ANDS     r1,r1,r0
00000a  b109              CBZ      r1,|L94.16|
00000c  2101              MOVS     r1,#1
00000e  e000              B        |L94.18|
                  |L94.16|
000010  2100              MOVS     r1,#0
                  |L94.18|
;;;180    {
;;;181      return CheckFMC_SDSR(MASK_FMC_SDSR_BUSY);
000012  4608              MOV      r0,r1
;;;182    }
000014  4770              BX       lr
;;;183    
                          ENDP

000016  0000              DCW      0x0000
                  |L94.24|
                          DCD      rbFMC

                          AREA ||area_number.95||, COMGROUP=_Z15FMC_SDSR_IsBusyv, LINKORDER=||i._Z15FMC_SDSR_IsBusyv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.95||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z15FMC_SDSR_IsBusyv||
                          DCD      0x00000001

                          AREA ||i._Z13SDRAM_Commandj||, COMGROUP=_Z13SDRAM_Commandj, CODE, READONLY, ALIGN=2

                  _Z13SDRAM_Commandj PROC ; SDRAM_Command(unsigned)
;;;183    
;;;184    inline void SDRAM_Command(WORD const sdcmrVal)
000000  b510              PUSH     {r4,lr}
;;;185    {
000002  4604              MOV      r4,r0
;;;186      while ( FMC_SDSR_IsBusy() ) { }
000004  bf00              NOP      
                  |L101.6|
000006  f7fffffe          BL       _Z15FMC_SDSR_IsBusyv ; FMC_SDSR_IsBusy()
00000a  2800              CMP      r0,#0
00000c  d1fb              BNE      |L101.6|
;;;187      
;;;188      rbFMC.SDCMR = sdcmrVal;
00000e  4802              LDR      r0,|L101.24|
000010  f8c04150          STR      r4,[r0,#0x150]  ; rbFMC
;;;189    }
000014  bd10              POP      {r4,pc}
;;;190    
                          ENDP

000016  0000              DCW      0x0000
                  |L101.24|
                          DCD      rbFMC

                          AREA ||area_number.102||, COMGROUP=_Z13SDRAM_Commandj, LINKORDER=||i._Z13SDRAM_Commandj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.102||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._Z13SDRAM_Commandj||
                          DCD      0x80a8b0b0

                          AREA ||t._Z8EnableAFILj11EEvRV14__regbank_GPIOjjbRAT__Kh||, COMGROUP=_Z8EnableAFILj11EEvRV14__regbank_GPIOjjbRAT__Kh, CODE, READONLY, ALIGN=1

                  _Z8EnableAFILj11EEvRV14__regbank_GPIOjjbRAT__Kh PROC ; void EnableAF<(unsigned)11>(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char(&)[T1])
;;;197    template<unsigned DIM>
;;;198    inline void EnableAF(RegbankTypeGPIO volatile & gpio, WORD const af, WORD const sp, bool const od, BYTE const (& nums)[DIM])
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;199    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dd8020          LDR      r8,[sp,#0x20]
;;;200      EnableAF(gpio, af, sp, od, nums, DIM);
000010  200b              MOVS     r0,#0xb
000012  463b              MOV      r3,r7
000014  4632              MOV      r2,r6
000016  4629              MOV      r1,r5
000018  e9cd8000          STRD     r8,r0,[sp,#0]
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       _Z8EnableAFRV14__regbank_GPIOjjbPKhj ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char*, unsigned)
;;;201    }
000022  e8bd81fc          POP      {r2-r8,pc}
;;;202    
                          ENDP


                          AREA ||area_number.109||, COMGROUP=_Z8EnableAFILj11EEvRV14__regbank_GPIOjjbRAT__Kh, LINKORDER=||t._Z8EnableAFILj11EEvRV14__regbank_GPIOjjbRAT__Kh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.109||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||t._Z8EnableAFILj11EEvRV14__regbank_GPIOjjbRAT__Kh||
                          DCD      0x8001acb0

                          AREA ||i._ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj, CODE, READONLY, ALIGN=1

                  _ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj PROC ; Cortex::ArmExclusive<(unsigned)4>::LdrEx(const volatile unsigned&)
;;;67         
;;;68         static WORD LdrEx(WORD const volatile & data)                   noexcept { return _LdrExW(&data); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _LdrExW
00000a  4605              MOV      r5,r0
00000c  4628              MOV      r0,r5
00000e  bd70              POP      {r4-r6,pc}
;;;69         static bool StrEx(WORD       volatile & data, WORD const value) noexcept { return _StrExW(&data, value) != 0U; }
                          ENDP


                          AREA ||area_number.116||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj, LINKORDER=||i._ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.116||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj||

                          AREA ||area_number.117||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.117||, ||.ARM.extab||
                          REQUIRE __cxa_call_unexpected
                  ||.extab._ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj||
                          DCD      0x80aab0b0
000004  0002000b          DCW      0x0002,0x000b
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||i._ZN6Cortex3DMBEv||, COMGROUP=_ZN6Cortex3DMBEv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex3DMBEv PROC ; Cortex::DMB()
;;;121    
;;;122      FORCE_INLINE void DMB() noexcept { SCHEDULE_BARRIER(); __dmb(0xF); SCHEDULE_BARRIER(); }  
000000  bf00              NOP      
000002  bf00              NOP      
000004  f3bf8f5f          DMB      
000008  bf00              NOP      
00000a  bf00              NOP      
00000c  4770              BX       lr
;;;123      FORCE_INLINE void DSB() noexcept { SCHEDULE_BARRIER(); __dsb(0xF); SCHEDULE_BARRIER(); }
                          ENDP


                          AREA ||area_number.124||, COMGROUP=_ZN6Cortex3DMBEv, LINKORDER=||i._ZN6Cortex3DMBEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.124||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex3DMBEv||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj, CODE, READONLY, ALIGN=1

                  _ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj PROC ; Cortex::ArmExclusive<(unsigned)4>::StrEx(volatile unsigned&, unsigned)
;;;68         static WORD LdrEx(WORD const volatile & data)                   noexcept { return _LdrExW(&data); }
;;;69         static bool StrEx(WORD       volatile & data, WORD const value) noexcept { return _StrExW(&data, value) != 0U; }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _StrExW
00000e  b108              CBZ      r0,|L130.20|
000010  2001              MOVS     r0,#1
000012  e000              B        |L130.22|
                  |L130.20|
000014  2000              MOVS     r0,#0
                  |L130.22|
000016  4606              MOV      r6,r0
000018  4630              MOV      r0,r6
00001a  bd70              POP      {r4-r6,pc}
;;;70     
                          ENDP


                          AREA ||area_number.131||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj, LINKORDER=||i._ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.131||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj||

                          AREA ||area_number.132||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.132||, ||.ARM.extab||
                          REQUIRE __cxa_call_unexpected
                  ||.extab._ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj||
                          DCD      0x80aab0b0
000004  0002000f          DCW      0x0002,0x000f
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||t._ZN6Atomic3OrrIjEET_RVS1_S1_||, COMGROUP=_ZN6Atomic3OrrIjEET_RVS1_S1_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic3OrrIjEET_RVS1_S1_ PROC ; T1 Atomic::Orr<unsigned>(volatile T1&, T1)
;;;182      /// \tparam TYPE ist der Datentyp der atomaren Operation.
;;;183      template<typename TYPE> inline TYPE Orr(TYPE volatile & data, TYPE const mask ) noexcept { return Modify<TYPE, BinOpType::opOrr>(data, mask); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6Atomic6ModifyIjLNS_9BinOpTypeE5EEET_RVS2_S2_ ; T1 Atomic::Modify<unsigned, (Atomic::BinOpType)5>(volatile T1&, T1)
00000e  4606              MOV      r6,r0
000010  4630              MOV      r0,r6
000012  bd70              POP      {r4-r6,pc}
;;;184    
                          ENDP


                          AREA ||area_number.139||, COMGROUP=_ZN6Atomic3OrrIjEET_RVS1_S1_, LINKORDER=||t._ZN6Atomic3OrrIjEET_RVS1_S1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.139||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic3OrrIjEET_RVS1_S1_||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic3AndItEET_RVS1_S1_||, COMGROUP=_ZN6Atomic3AndItEET_RVS1_S1_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic3AndItEET_RVS1_S1_ PROC ; T1 Atomic::And<unsigned short>(volatile T1&, T1)
;;;175      /// \tparam TYPE ist der Datentyp der atomaren Operation.
;;;176      template<typename TYPE> inline TYPE And(TYPE volatile & data, TYPE const mask ) noexcept { return Modify<TYPE, BinOpType::opAnd>(data, mask); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6Atomic6ModifyItLNS_9BinOpTypeE4EEET_RVS2_S2_ ; T1 Atomic::Modify<unsigned short, (Atomic::BinOpType)4>(volatile T1&, T1)
00000e  4606              MOV      r6,r0
000010  4630              MOV      r0,r6
000012  bd70              POP      {r4-r6,pc}
;;;177    
                          ENDP


                          AREA ||area_number.146||, COMGROUP=_ZN6Atomic3AndItEET_RVS1_S1_, LINKORDER=||t._ZN6Atomic3AndItEET_RVS1_S1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.146||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic3AndItEET_RVS1_S1_||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic6ModifyItLNS_9BinOpTypeE5EEET_RVS2_S2_||, COMGROUP=_ZN6Atomic6ModifyItLNS_9BinOpTypeE5EEET_RVS2_S2_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic6ModifyItLNS_9BinOpTypeE5EEET_RVS2_S2_ PROC ; T1 Atomic::Modify<unsigned short, (Atomic::BinOpType)5>(volatile T1&, T1)
;;;54       template<typename TYPE, BinOpType OP> 
;;;55       inline TYPE Modify(TYPE volatile & data, TYPE const operand) noexcept
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;56       {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;57         TYPE result;
;;;58         
;;;59         do 
000008  bf00              NOP      
                  |L152.10|
;;;60         {
;;;61           result = Cortex::LoadLinked(data);
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       _ZN6Cortex10LoadLinkedItEET_RVKS1_ ; T1 Cortex::LoadLinked<unsigned short>(const volatile T1&)
000010  4604              MOV      r4,r0
;;;62         } while ( Cortex::SaveConditional(data, BinOp<TYPE, OP>::Calc(result, operand)) );
000012  4639              MOV      r1,r7
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       _ZN6Atomic5BinOpItLNS_9BinOpTypeE5EE4CalcEtt ; Atomic::BinOp<unsigned short, (Atomic::BinOpType)5>::Calc(unsigned short, unsigned short)
00001a  4680              MOV      r8,r0
00001c  4641              MOV      r1,r8
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       _ZN6Cortex15SaveConditionalItEEbRVT_S1_ ; bool Cortex::SaveConditional<unsigned short>(volatile T1&, T1)
000024  2800              CMP      r0,#0
000026  d1f0              BNE      |L152.10|
;;;63         
;;;64         return result;
000028  4625              MOV      r5,r4
00002a  4628              MOV      r0,r5
;;;65       }
00002c  e8bd81f0          POP      {r4-r8,pc}
;;;66     
                          ENDP


                          AREA ||area_number.153||, COMGROUP=_ZN6Atomic6ModifyItLNS_9BinOpTypeE5EEET_RVS2_S2_, LINKORDER=||t._ZN6Atomic6ModifyItLNS_9BinOpTypeE5EEET_RVS2_S2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.153||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic6ModifyItLNS_9BinOpTypeE5EEET_RVS2_S2_||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic6ModifyIjLNS_9BinOpTypeE5EEET_RVS2_S2_||, COMGROUP=_ZN6Atomic6ModifyIjLNS_9BinOpTypeE5EEET_RVS2_S2_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic6ModifyIjLNS_9BinOpTypeE5EEET_RVS2_S2_ PROC ; T1 Atomic::Modify<unsigned, (Atomic::BinOpType)5>(volatile T1&, T1)
;;;54       template<typename TYPE, BinOpType OP> 
;;;55       inline TYPE Modify(TYPE volatile & data, TYPE const operand) noexcept
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;56       {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;57         TYPE result;
;;;58         
;;;59         do 
000008  bf00              NOP      
                  |L159.10|
;;;60         {
;;;61           result = Cortex::LoadLinked(data);
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       _ZN6Cortex10LoadLinkedIjEET_RVKS1_ ; T1 Cortex::LoadLinked<unsigned>(const volatile T1&)
000010  4604              MOV      r4,r0
;;;62         } while ( Cortex::SaveConditional(data, BinOp<TYPE, OP>::Calc(result, operand)) );
000012  4639              MOV      r1,r7
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       _ZN6Atomic5BinOpIjLNS_9BinOpTypeE5EE4CalcEjj ; Atomic::BinOp<unsigned, (Atomic::BinOpType)5>::Calc(unsigned, unsigned)
00001a  4680              MOV      r8,r0
00001c  4641              MOV      r1,r8
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       _ZN6Cortex15SaveConditionalIjEEbRVT_S1_ ; bool Cortex::SaveConditional<unsigned>(volatile T1&, T1)
000024  2800              CMP      r0,#0
000026  d1f0              BNE      |L159.10|
;;;63         
;;;64         return result;
000028  4625              MOV      r5,r4
00002a  4628              MOV      r0,r5
;;;65       }
00002c  e8bd81f0          POP      {r4-r8,pc}
;;;66     
                          ENDP


                          AREA ||area_number.160||, COMGROUP=_ZN6Atomic6ModifyIjLNS_9BinOpTypeE5EEET_RVS2_S2_, LINKORDER=||t._ZN6Atomic6ModifyIjLNS_9BinOpTypeE5EEET_RVS2_S2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.160||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic6ModifyIjLNS_9BinOpTypeE5EEET_RVS2_S2_||
                          DCD      0x00000001

                          AREA ||t._ZN6Cortex10LoadLinkedItEET_RVKS1_||, COMGROUP=_ZN6Cortex10LoadLinkedItEET_RVKS1_, CODE, READONLY, ALIGN=1

                  _ZN6Cortex10LoadLinkedItEET_RVKS1_ PROC ; T1 Cortex::LoadLinked<unsigned short>(const volatile T1&)
;;;247      template<typename TYPE>
;;;248      FORCE_INLINE TYPE LoadLinked(TYPE const volatile & data) noexcept { DMB(); return ArmExclusive<sizeof(TYPE)>::LdrEx(data); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  f7fffffe          BL       _ZN6Cortex3DMBEv ; Cortex::DMB()
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt ; Cortex::ArmExclusive<(unsigned)2>::LdrEx(const volatile unsigned short&)
00000e  4605              MOV      r5,r0
000010  4628              MOV      r0,r5
000012  bd70              POP      {r4-r6,pc}
;;;249      
                          ENDP


                          AREA ||area_number.167||, COMGROUP=_ZN6Cortex10LoadLinkedItEET_RVKS1_, LINKORDER=||t._ZN6Cortex10LoadLinkedItEET_RVKS1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.167||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Cortex10LoadLinkedItEET_RVKS1_||
                          DCD      0x00000001

                          AREA ||t._ZN6Cortex15SaveConditionalItEEbRVT_S1_||, COMGROUP=_ZN6Cortex15SaveConditionalItEEbRVT_S1_, CODE, READONLY, ALIGN=1

                  _ZN6Cortex15SaveConditionalItEEbRVT_S1_ PROC ; bool Cortex::SaveConditional<unsigned short>(volatile T1&, T1)
;;;258      template<typename TYPE>
;;;259      FORCE_INLINE bool SaveConditional(TYPE volatile & data, TYPE const value) noexcept
000000  b570              PUSH     {r4-r6,lr}
;;;260      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;261        if ( ArmExclusive<sizeof(TYPE)>::StrEx(data, value) )
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt ; Cortex::ArmExclusive<(unsigned)2>::StrEx(volatile unsigned short&, unsigned short)
00000e  b108              CBZ      r0,|L173.20|
;;;262          return true;
000010  2001              MOVS     r0,#1
                  |L173.18|
;;;263    
;;;264        DSB();
;;;265          
;;;266        return false;
;;;267      }
000012  bd70              POP      {r4-r6,pc}
                  |L173.20|
000014  f7fffffe          BL       _ZN6Cortex3DSBEv ; Cortex::DSB()
000018  2000              MOVS     r0,#0                 ;266
00001a  e7fa              B        |L173.18|
;;;268      
                          ENDP


                          AREA ||area_number.174||, COMGROUP=_ZN6Cortex15SaveConditionalItEEbRVT_S1_, LINKORDER=||t._ZN6Cortex15SaveConditionalItEEbRVT_S1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.174||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Cortex15SaveConditionalItEEbRVT_S1_||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic6ModifyItLNS_9BinOpTypeE4EEET_RVS2_S2_||, COMGROUP=_ZN6Atomic6ModifyItLNS_9BinOpTypeE4EEET_RVS2_S2_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic6ModifyItLNS_9BinOpTypeE4EEET_RVS2_S2_ PROC ; T1 Atomic::Modify<unsigned short, (Atomic::BinOpType)4>(volatile T1&, T1)
;;;54       template<typename TYPE, BinOpType OP> 
;;;55       inline TYPE Modify(TYPE volatile & data, TYPE const operand) noexcept
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;56       {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;57         TYPE result;
;;;58         
;;;59         do 
000008  bf00              NOP      
                  |L180.10|
;;;60         {
;;;61           result = Cortex::LoadLinked(data);
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       _ZN6Cortex10LoadLinkedItEET_RVKS1_ ; T1 Cortex::LoadLinked<unsigned short>(const volatile T1&)
000010  4604              MOV      r4,r0
;;;62         } while ( Cortex::SaveConditional(data, BinOp<TYPE, OP>::Calc(result, operand)) );
000012  4639              MOV      r1,r7
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       _ZN6Atomic5BinOpItLNS_9BinOpTypeE4EE4CalcEtt ; Atomic::BinOp<unsigned short, (Atomic::BinOpType)4>::Calc(unsigned short, unsigned short)
00001a  4680              MOV      r8,r0
00001c  4641              MOV      r1,r8
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       _ZN6Cortex15SaveConditionalItEEbRVT_S1_ ; bool Cortex::SaveConditional<unsigned short>(volatile T1&, T1)
000024  2800              CMP      r0,#0
000026  d1f0              BNE      |L180.10|
;;;63         
;;;64         return result;
000028  4625              MOV      r5,r4
00002a  4628              MOV      r0,r5
;;;65       }
00002c  e8bd81f0          POP      {r4-r8,pc}
;;;66     
                          ENDP


                          AREA ||area_number.181||, COMGROUP=_ZN6Atomic6ModifyItLNS_9BinOpTypeE4EEET_RVS2_S2_, LINKORDER=||t._ZN6Atomic6ModifyItLNS_9BinOpTypeE4EEET_RVS2_S2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.181||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic6ModifyItLNS_9BinOpTypeE4EEET_RVS2_S2_||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic5BinOpItLNS_9BinOpTypeE5EE4CalcEtt||, COMGROUP=_ZN6Atomic5BinOpItLNS_9BinOpTypeE5EE4CalcEtt, CODE, READONLY, ALIGN=1

                  _ZN6Atomic5BinOpItLNS_9BinOpTypeE5EE4CalcEtt PROC ; Atomic::BinOp<unsigned short, (Atomic::BinOpType)5>::Calc(unsigned short, unsigned short)
;;;41       template<typename TYPE> struct BinOp<TYPE, BinOpType::opAnd> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l & r; } };
;;;42       template<typename TYPE> struct BinOp<TYPE, BinOpType::opOrr> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l | r; } };
000000  4602              MOV      r2,r0
000002  ea420001          ORR      r0,r2,r1
000006  4770              BX       lr
;;;43       
                          ENDP


                          AREA ||area_number.188||, COMGROUP=_ZN6Atomic5BinOpItLNS_9BinOpTypeE5EE4CalcEtt, LINKORDER=||t._ZN6Atomic5BinOpItLNS_9BinOpTypeE5EE4CalcEtt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.188||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic5BinOpItLNS_9BinOpTypeE5EE4CalcEtt||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic5BinOpIjLNS_9BinOpTypeE5EE4CalcEjj||, COMGROUP=_ZN6Atomic5BinOpIjLNS_9BinOpTypeE5EE4CalcEjj, CODE, READONLY, ALIGN=1

                  _ZN6Atomic5BinOpIjLNS_9BinOpTypeE5EE4CalcEjj PROC ; Atomic::BinOp<unsigned, (Atomic::BinOpType)5>::Calc(unsigned, unsigned)
;;;41       template<typename TYPE> struct BinOp<TYPE, BinOpType::opAnd> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l & r; } };
;;;42       template<typename TYPE> struct BinOp<TYPE, BinOpType::opOrr> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l | r; } };
000000  4602              MOV      r2,r0
000002  ea420001          ORR      r0,r2,r1
000006  4770              BX       lr
;;;43       
                          ENDP


                          AREA ||area_number.195||, COMGROUP=_ZN6Atomic5BinOpIjLNS_9BinOpTypeE5EE4CalcEjj, LINKORDER=||t._ZN6Atomic5BinOpIjLNS_9BinOpTypeE5EE4CalcEjj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.195||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic5BinOpIjLNS_9BinOpTypeE5EE4CalcEjj||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt||, COMGROUP=_ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt, CODE, READONLY, ALIGN=1

                  _ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt PROC ; Cortex::ArmExclusive<(unsigned)2>::LdrEx(const volatile unsigned short&)
;;;83         
;;;84         static HWRD LdrEx(HWRD const volatile & data)                   noexcept { return _LdrExH(&data); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _LdrExH
00000a  4605              MOV      r5,r0
00000c  4628              MOV      r0,r5
00000e  bd70              POP      {r4-r6,pc}
;;;85         static bool StrEx(HWRD       volatile & data, HWRD const value) noexcept { return _StrExH(&data, value) != 0U; }
                          ENDP


                          AREA ||area_number.202||, COMGROUP=_ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt, LINKORDER=||i._ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.202||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt||

                          AREA ||area_number.203||, COMGROUP=_ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.203||, ||.ARM.extab||
                          REQUIRE __cxa_call_unexpected
                  ||.extab._ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt||
                          DCD      0x80aab0b0
000004  0002000b          DCW      0x0002,0x000b
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||t._ZN6Atomic5BinOpItLNS_9BinOpTypeE4EE4CalcEtt||, COMGROUP=_ZN6Atomic5BinOpItLNS_9BinOpTypeE4EE4CalcEtt, CODE, READONLY, ALIGN=1

                  _ZN6Atomic5BinOpItLNS_9BinOpTypeE4EE4CalcEtt PROC ; Atomic::BinOp<unsigned short, (Atomic::BinOpType)4>::Calc(unsigned short, unsigned short)
;;;40       template<typename TYPE> struct BinOp<TYPE, BinOpType::opMul> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l * r; } };
;;;41       template<typename TYPE> struct BinOp<TYPE, BinOpType::opAnd> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l & r; } };
000000  4602              MOV      r2,r0
000002  ea020001          AND      r0,r2,r1
000006  4770              BX       lr
;;;42       template<typename TYPE> struct BinOp<TYPE, BinOpType::opOrr> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l | r; } };
                          ENDP


                          AREA ||area_number.210||, COMGROUP=_ZN6Atomic5BinOpItLNS_9BinOpTypeE4EE4CalcEtt, LINKORDER=||t._ZN6Atomic5BinOpItLNS_9BinOpTypeE4EE4CalcEtt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.210||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic5BinOpItLNS_9BinOpTypeE4EE4CalcEtt||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt||, COMGROUP=_ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt, CODE, READONLY, ALIGN=1

                  _ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt PROC ; Cortex::ArmExclusive<(unsigned)2>::StrEx(volatile unsigned short&, unsigned short)
;;;84         static HWRD LdrEx(HWRD const volatile & data)                   noexcept { return _LdrExH(&data); }
;;;85         static bool StrEx(HWRD       volatile & data, HWRD const value) noexcept { return _StrExH(&data, value) != 0U; }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _StrExH
00000e  b108              CBZ      r0,|L216.20|
000010  2001              MOVS     r0,#1
000012  e000              B        |L216.22|
                  |L216.20|
000014  2000              MOVS     r0,#0
                  |L216.22|
000016  4606              MOV      r6,r0
000018  4630              MOV      r0,r6
00001a  bd70              POP      {r4-r6,pc}
;;;86       };
                          ENDP


                          AREA ||area_number.217||, COMGROUP=_ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt, LINKORDER=||i._ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.217||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt||

                          AREA ||area_number.218||, COMGROUP=_ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.218||, ||.ARM.extab||
                          REQUIRE __cxa_call_unexpected
                  ||.extab._ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt||
                          DCD      0x80aab0b0
000004  0002000f          DCW      0x0002,0x000f
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.constdata__ZZ8EnableAFRV14__regbank_GPIOjjbjE19__PRETTY_FUNCTION__||, COMGROUP=_ZZ8EnableAFRV14__regbank_GPIOjjbjE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZ8EnableAFRV14__regbank_GPIOjjbjE19__PRETTY_FUNCTION__ ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  20456e61          DCB      0x20,0x45,0x6e,0x61
000008  626c6541          DCB      0x62,0x6c,0x65,0x41
00000c  4628766f          DCB      0x46,0x28,0x76,0x6f
000010  6c617469          DCB      0x6c,0x61,0x74,0x69
000014  6c65205f          DCB      0x6c,0x65,0x20,0x5f
000018  5f726567          DCB      0x5f,0x72,0x65,0x67
00001c  62616e6b          DCB      0x62,0x61,0x6e,0x6b
000020  5f475049          DCB      0x5f,0x47,0x50,0x49
000024  4f20262c          DCB      0x4f,0x20,0x26,0x2c
000028  20756e73          DCB      0x20,0x75,0x6e,0x73
00002c  69676e65          DCB      0x69,0x67,0x6e,0x65
000030  6420696e          DCB      0x64,0x20,0x69,0x6e
000034  742c2075          DCB      0x74,0x2c,0x20,0x75
000038  6e736967          DCB      0x6e,0x73,0x69,0x67
00003c  6e656420          DCB      0x6e,0x65,0x64,0x20
000040  696e742c          DCB      0x69,0x6e,0x74,0x2c
000044  20626f6f          DCB      0x20,0x62,0x6f,0x6f
000048  6c2c2075          DCB      0x6c,0x2c,0x20,0x75
00004c  6e736967          DCB      0x6e,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e7429          DCB      0x69,0x6e,0x74,0x29
000058  00                DCB      0x00

                          AREA ||i.__ARM_common_noexcept_landing||, COMGROUP=__ARM_common_noexcept_landing, CODE, READONLY, ALIGN=1

                  __ARM_common_noexcept_landing PROC
000000  f7ffbffe          B.W      __cxa_call_terminate
                          ENDP


                          AREA ||area_number.227||, COMGROUP=__ARM_common_noexcept_landing, LINKORDER=||i.__ARM_common_noexcept_landing||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.227||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__ARM_common_noexcept_landing||
                          DCD      0x00000001
