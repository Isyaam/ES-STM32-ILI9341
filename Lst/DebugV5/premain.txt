; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--cpp11 --list --debug -c --asm --interleave --exceptions --protect_stack -o.\out\debugv5\premain.o --asm_dir=.\Lst\DebugV5\ --list_dir=.\Lst\DebugV5\ --depend=.\out\debugv5\premain.d --cpu=Cortex-M4 --apcs=interwork --no_unaligned_access -O0 --diag_suppress=9931 -I.\Inc -I.\Inc\Debug -I.\Inc\Cortex -I.\Inc\Drivers -I.\Inc\Utilities -D__UVISION_VERSION=527 -DSTM32F429xx -DCORTEX_M=4 -DDEBUG --omf_browse=.\out\debugv5\premain.crf --no_rtti Src\Target\PreMain.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  __cxa_pure_virtual PROC
;;;15     
;;;16     extern "C" void __cxa_pure_virtual()  
000000  b510              PUSH     {r4,lr}
;;;17     { 
;;;18       ITM_PUTS(__FUNCTION__);
000002  4852              LDR      r0,|L1.332|
000004  f7fffffe          BL       _Z7ItmPutSPKc ; ItmPutS(const char*)
;;;19       DEBUG_BREAK(2);
000008  be02              BKPT     #2
;;;20       
;;;21       Cortex::Reset();
00000a  f7fffffe          BL       _ZN6Cortex5ResetEv ; Cortex::Reset()
;;;22     }
;;;23     
                          ENDP

                  __aeabi_atexit PROC
;;;24     extern "C" int __aeabi_atexit(void *, void (*)(void *), void * d) 
00000e  4603              MOV      r3,r0
;;;25     { 
;;;26       // Keine at-exit-Funktionen, da das Programm nie beendet wird bzw. Ã¼ber Reset beu gestartet wird.
;;;27       
;;;28       return 0; // 0 ==> OK; non-0 ==> failed 
000010  2000              MOVS     r0,#0
;;;29     }
000012  4770              BX       lr
;;;30       
                          ENDP

                  __aeabi_idiv0 PROC
;;;31     extern "C" int __aeabi_idiv0(void) 
000014  b510              PUSH     {r4,lr}
;;;32     { 
;;;33       ITM_PUTS(__FUNCTION__);
000016  484e              LDR      r0,|L1.336|
000018  f7fffffe          BL       _Z7ItmPutSPKc ; ItmPutS(const char*)
;;;34       DEBUG_BREAK(2); 
00001c  be02              BKPT     #2
;;;35       
;;;36       return 0;
00001e  2000              MOVS     r0,#0
;;;37     }
000020  bd10              POP      {r4,pc}
;;;38     
                          ENDP

                  __ARM_exceptions_init PROC
;;;39     extern "C" void __ARM_exceptions_init(void) { __cxa_get_globals(); } // pre-allocate memory for exceptions
000022  b510              PUSH     {r4,lr}
000024  f7fffffe          BL       __cxa_get_globals
000028  bd10              POP      {r4,pc}
;;;40     
                          ENDP

                  __default_signal_handler PROC
;;;43     
;;;44     extern "C" void __default_signal_handler(int const sig, int)
00002a  b510              PUSH     {r4,lr}
;;;45     {
00002c  4604              MOV      r4,r0
;;;46       ITM_PUTS(__FUNCTION__);
00002e  4849              LDR      r0,|L1.340|
000030  f7fffffe          BL       _Z7ItmPutSPKc ; ItmPutS(const char*)
;;;47     
;;;48       switch(sig)
000034  2c0c              CMP      r4,#0xc
000036  d01b              BEQ      |L1.112|
000038  dc06              BGT      |L1.72|
00003a  2c01              CMP      r4,#1
00003c  d00c              BEQ      |L1.88|
00003e  2c06              CMP      r4,#6
000040  d00e              BEQ      |L1.96|
000042  2c07              CMP      r4,#7
000044  d11c              BNE      |L1.128|
000046  e00f              B        |L1.104|
                  |L1.72|
000048  2c0d              CMP      r4,#0xd
00004a  d015              BEQ      |L1.120|
00004c  2c0e              CMP      r4,#0xe
00004e  d117              BNE      |L1.128|
;;;49       {
;;;50         case SIGOUTOFHEAP: ITM_PUTS("SIGOUTOFHEAP"  ); break;
000050  a041              ADR      r0,|L1.344|
000052  f7fffffe          BL       _Z7ItmPutSPKc ; ItmPutS(const char*)
000056  e017              B        |L1.136|
                  |L1.88|
;;;51         case SIGABRT     : ITM_PUTS("SIGABRT"       ); break;
000058  a043              ADR      r0,|L1.360|
00005a  f7fffffe          BL       _Z7ItmPutSPKc ; ItmPutS(const char*)
00005e  e013              B        |L1.136|
                  |L1.96|
;;;52         case SIGTERM     : ITM_PUTS("SIGTERM"       ); break;
000060  a043              ADR      r0,|L1.368|
000062  f7fffffe          BL       _Z7ItmPutSPKc ; ItmPutS(const char*)
000066  e00f              B        |L1.136|
                  |L1.104|
;;;53         case SIGSTAK     : ITM_PUTS("SIGSTAK"       ); break;
000068  a043              ADR      r0,|L1.376|
00006a  f7fffffe          BL       _Z7ItmPutSPKc ; ItmPutS(const char*)
00006e  e00b              B        |L1.136|
                  |L1.112|
;;;54         case SIGPVFN     : ITM_PUTS("SIGPVFN"       ); break;
000070  a043              ADR      r0,|L1.384|
000072  f7fffffe          BL       _Z7ItmPutSPKc ; ItmPutS(const char*)
000076  e007              B        |L1.136|
                  |L1.120|
;;;55         case SIGCPPL     : ITM_PUTS("SIGCPPL"       ); break;
000078  a043              ADR      r0,|L1.392|
00007a  f7fffffe          BL       _Z7ItmPutSPKc ; ItmPutS(const char*)
00007e  e003              B        |L1.136|
                  |L1.128|
;;;56         default          : ITM_PUTS("Unknown signal"); break;
000080  a043              ADR      r0,|L1.400|
000082  f7fffffe          BL       _Z7ItmPutSPKc ; ItmPutS(const char*)
000086  bf00              NOP      
                  |L1.136|
000088  bf00              NOP                            ;50
;;;57       }
;;;58       
;;;59       DEBUG_BREAK(2);
00008a  be02              BKPT     #2
;;;60     
;;;61       Cortex::Reset();
00008c  f7fffffe          BL       _ZN6Cortex5ResetEv ; Cortex::Reset()
;;;62     }
;;;63     
                          ENDP

                  __cxa_guard_acquire PROC
;;;64     extern "C" __weak int  __cxa_guard_acquire(WORD volatile * const guard)
000090  b510              PUSH     {r4,lr}
;;;65     {
000092  4604              MOV      r4,r0
;;;66       ASSERT(Cortex::IsThreadMode());
000094  f7fffffe          BL       _ZN6Cortex12IsThreadModeEv ; Cortex::IsThreadMode()
000098  b100              CBZ      r0,|L1.156|
00009a  e005              B        |L1.168|
                  |L1.156|
00009c  4b40              LDR      r3,|L1.416|
00009e  2242              MOVS     r2,#0x42
0000a0  a140              ADR      r1,|L1.420|
0000a2  a043              ADR      r0,|L1.432|
0000a4  f7fffffe          BL       _Z15AssertionFailedPKcS0_jS0_ ; AssertionFailed(const char*, const char*, unsigned, const char*)
                  |L1.168|
;;;67     
;;;68       if ( *guard == 1U )
0000a8  6820              LDR      r0,[r4,#0]
0000aa  2801              CMP      r0,#1
0000ac  d101              BNE      |L1.178|
;;;69       {
;;;70         return 0;
0000ae  2000              MOVS     r0,#0
                  |L1.176|
;;;71       } else
;;;72       {
;;;73         return 1;
;;;74       }
;;;75     }
0000b0  bd10              POP      {r4,pc}
                  |L1.178|
0000b2  2001              MOVS     r0,#1                 ;73
0000b4  e7fc              B        |L1.176|
;;;76     
                          ENDP

                  __cxa_guard_release PROC
;;;77     extern "C" __weak void __cxa_guard_release(WORD volatile * const guard)
0000b6  2101              MOVS     r1,#1
;;;78     {
;;;79       *guard = 1U;
0000b8  6001              STR      r1,[r0,#0]
;;;80     }
0000ba  4770              BX       lr
;;;81     
                          ENDP

                  __cxa_guard_abort PROC
;;;82     extern "C" __weak void __cxa_guard_abort()
0000bc  b510              PUSH     {r4,lr}
;;;83     {
;;;84       ITM_PUTS(FUNC);
0000be  4842              LDR      r0,|L1.456|
0000c0  f7fffffe          BL       _Z7ItmPutSPKc ; ItmPutS(const char*)
;;;85       DEBUG_BREAK(2);
0000c4  be02              BKPT     #2
;;;86     
;;;87       Cortex::Reset();
0000c6  f7fffffe          BL       _ZN6Cortex5ResetEv ; Cortex::Reset()
;;;88     }
;;;89     
                          ENDP

                  _mutex_acquire PROC
                  ||__tagsym$$used||
;;;94     
;;;95     extern "C" __weak void _mutex_acquire(WORD * const handle)
0000ca  b510              PUSH     {r4,lr}
;;;96     { 
0000cc  4604              MOV      r4,r0
;;;97       ASSERT(Cortex::IsThreadMode()); 
0000ce  f7fffffe          BL       _ZN6Cortex12IsThreadModeEv ; Cortex::IsThreadMode()
0000d2  b100              CBZ      r0,|L1.214|
0000d4  e005              B        |L1.226|
                  |L1.214|
0000d6  4b3d              LDR      r3,|L1.460|
0000d8  2261              MOVS     r2,#0x61
0000da  a132              ADR      r1,|L1.420|
0000dc  a034              ADR      r0,|L1.432|
0000de  f7fffffe          BL       _Z15AssertionFailedPKcS0_jS0_ ; AssertionFailed(const char*, const char*, unsigned, const char*)
                  |L1.226|
;;;98       ASSERT(*handle == magicnum);
0000e2  493b              LDR      r1,|L1.464|
0000e4  6820              LDR      r0,[r4,#0]
0000e6  4288              CMP      r0,r1
0000e8  d100              BNE      |L1.236|
0000ea  e005              B        |L1.248|
                  |L1.236|
0000ec  4b37              LDR      r3,|L1.460|
0000ee  2262              MOVS     r2,#0x62
0000f0  a12c              ADR      r1,|L1.420|
0000f2  a038              ADR      r0,|L1.468|
0000f4  f7fffffe          BL       _Z15AssertionFailedPKcS0_jS0_ ; AssertionFailed(const char*, const char*, unsigned, const char*)
                  |L1.248|
;;;99     }
0000f8  bd10              POP      {r4,pc}
;;;100    
                          ENDP

                  _mutex_release PROC
                  |symbol_number.34|
;;;101    extern "C" __weak void _mutex_release(WORD * const handle) 
0000fa  b510              PUSH     {r4,lr}
;;;102    { 
0000fc  4604              MOV      r4,r0
;;;103      ASSERT(Cortex::IsThreadMode()); 
0000fe  f7fffffe          BL       _ZN6Cortex12IsThreadModeEv ; Cortex::IsThreadMode()
000102  b100              CBZ      r0,|L1.262|
000104  e005              B        |L1.274|
                  |L1.262|
000106  4b38              LDR      r3,|L1.488|
000108  2267              MOVS     r2,#0x67
00010a  a126              ADR      r1,|L1.420|
00010c  a028              ADR      r0,|L1.432|
00010e  f7fffffe          BL       _Z15AssertionFailedPKcS0_jS0_ ; AssertionFailed(const char*, const char*, unsigned, const char*)
                  |L1.274|
;;;104      ASSERT(*handle == magicnum);
000112  492f              LDR      r1,|L1.464|
000114  6820              LDR      r0,[r4,#0]
000116  4288              CMP      r0,r1
000118  d100              BNE      |L1.284|
00011a  e005              B        |L1.296|
                  |L1.284|
00011c  4b32              LDR      r3,|L1.488|
00011e  2268              MOVS     r2,#0x68
000120  a120              ADR      r1,|L1.420|
000122  a02c              ADR      r0,|L1.468|
000124  f7fffffe          BL       _Z15AssertionFailedPKcS0_jS0_ ; AssertionFailed(const char*, const char*, unsigned, const char*)
                  |L1.296|
;;;105    }
000128  bd10              POP      {r4,pc}
;;;106    
                          ENDP

                  _mutex_initialize PROC
;;;107    extern "C" __weak int  _mutex_initialize(WORD * const handle)
00012a  b510              PUSH     {r4,lr}
;;;108    {
00012c  4604              MOV      r4,r0
;;;109      ASSERT(Cortex::IsThreadMode()); 
00012e  f7fffffe          BL       _ZN6Cortex12IsThreadModeEv ; Cortex::IsThreadMode()
000132  b100              CBZ      r0,|L1.310|
000134  e005              B        |L1.322|
                  |L1.310|
000136  4b2d              LDR      r3,|L1.492|
000138  226d              MOVS     r2,#0x6d
00013a  a11a              ADR      r1,|L1.420|
00013c  a01c              ADR      r0,|L1.432|
00013e  f7fffffe          BL       _Z15AssertionFailedPKcS0_jS0_ ; AssertionFailed(const char*, const char*, unsigned, const char*)
                  |L1.322|
;;;110    
;;;111      *handle = magicnum;
000142  4823              LDR      r0,|L1.464|
000144  6020              STR      r0,[r4,#0]
;;;112      
;;;113      return 1; // 1=multi threaded application, 0=single threaded application
000146  2001              MOVS     r0,#1
;;;114    }  
000148  bd10              POP      {r4,pc}
;;;115    
                          ENDP

00014a  0000              DCW      0x0000
                  |L1.332|
                          DCD      _ZZ18__cxa_pure_virtualE12__FUNCTION__ ; __cxa_pure_virtual::__FUNCTION__
                  |L1.336|
                          DCD      _ZZ13__aeabi_idiv0E12__FUNCTION__ ; __aeabi_idiv0::__FUNCTION__
                  |L1.340|
                          DCD      _ZZ24__default_signal_handlerE12__FUNCTION__ ; __default_signal_handler::__FUNCTION__
                  |L1.344|
000158  5349474f          DCB      "SIGOUTOFHEAP",0
00015c  55544f46
000160  48454150
000164  00      
000165  00                DCB      0
000166  00                DCB      0
000167  00                DCB      0
                  |L1.360|
000168  53494741          DCB      "SIGABRT",0
00016c  42525400
                  |L1.368|
000170  53494754          DCB      "SIGTERM",0
000174  45524d00
                  |L1.376|
000178  53494753          DCB      "SIGSTAK",0
00017c  54414b00
                  |L1.384|
000180  53494750          DCB      "SIGPVFN",0
000184  56464e00
                  |L1.392|
000188  53494743          DCB      "SIGCPPL",0
00018c  50504c00
                  |L1.400|
000190  556e6b6e          DCB      "Unknown signal",0
000194  6f776e20
000198  7369676e
00019c  616c00  
00019f  00                DCB      0
                  |L1.416|
                          DCD      _ZZ19__cxa_guard_acquireE19__PRETTY_FUNCTION__ ; __cxa_guard_acquire::__PRETTY_FUNCTION__
                  |L1.420|
0001a4  5072654d          DCB      "PreMain.cpp",0
0001a8  61696e2e
0001ac  63707000
                  |L1.432|
0001b0  436f7274          DCB      "Cortex::IsThreadMode()",0
0001b4  65783a3a
0001b8  49735468
0001bc  72656164
0001c0  4d6f6465
0001c4  282900  
0001c7  00                DCB      0
                  |L1.456|
                          DCD      _ZZ17__cxa_guard_abortE19__PRETTY_FUNCTION__ ; __cxa_guard_abort::__PRETTY_FUNCTION__
                  |L1.460|
                          DCD      _ZZ14_mutex_acquireE19__PRETTY_FUNCTION__ ; _mutex_acquire::__PRETTY_FUNCTION__
                  |L1.464|
                          DCD      0x00affe00
                  |L1.468|
0001d4  2a68616e          DCB      "*handle == magicnum",0
0001d8  646c6520
0001dc  3d3d206d
0001e0  61676963
0001e4  6e756d00
                  |L1.488|
                          DCD      _ZZ14_mutex_releaseE19__PRETTY_FUNCTION__ ; _mutex_release::__PRETTY_FUNCTION__
                  |L1.492|
                          DCD      _ZZ17_mutex_initializeE19__PRETTY_FUNCTION__ ; _mutex_initialize::__PRETTY_FUNCTION__

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000022
                          RELOC 42, ||.text||
                          DCD      0x80a8b0b0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  _ZZ18__cxa_pure_virtualE12__FUNCTION__ ; __cxa_pure_virtual::__FUNCTION__
000000  5f5f6378          DCB      0x5f,0x5f,0x63,0x78
000004  615f7075          DCB      0x61,0x5f,0x70,0x75
000008  72655f76          DCB      0x72,0x65,0x5f,0x76
00000c  69727475          DCB      0x69,0x72,0x74,0x75
000010  616c00            DCB      0x61,0x6c,0x00
                  _ZZ13__aeabi_idiv0E12__FUNCTION__ ; __aeabi_idiv0::__FUNCTION__
000013  5f                DCB      0x5f
000014  5f616561          DCB      0x5f,0x61,0x65,0x61
000018  62695f69          DCB      0x62,0x69,0x5f,0x69
00001c  64697630          DCB      0x64,0x69,0x76,0x30
000020  00                DCB      0x00
                  _ZZ24__default_signal_handlerE12__FUNCTION__ ; __default_signal_handler::__FUNCTION__
000021  5f5f64            DCB      0x5f,0x5f,0x64
000024  65666175          DCB      0x65,0x66,0x61,0x75
000028  6c745f73          DCB      0x6c,0x74,0x5f,0x73
00002c  69676e61          DCB      0x69,0x67,0x6e,0x61
000030  6c5f6861          DCB      0x6c,0x5f,0x68,0x61
000034  6e646c65          DCB      0x6e,0x64,0x6c,0x65
000038  7200              DCB      0x72,0x00
                  _ZZ19__cxa_guard_acquireE19__PRETTY_FUNCTION__ ; __cxa_guard_acquire::__PRETTY_FUNCTION__
00003a  696e              DCB      0x69,0x6e
00003c  74205f5f          DCB      0x74,0x20,0x5f,0x5f
000040  6378615f          DCB      0x63,0x78,0x61,0x5f
000044  67756172          DCB      0x67,0x75,0x61,0x72
000048  645f6163          DCB      0x64,0x5f,0x61,0x63
00004c  71756972          DCB      0x71,0x75,0x69,0x72
000050  6528766f          DCB      0x65,0x28,0x76,0x6f
000054  6c617469          DCB      0x6c,0x61,0x74,0x69
000058  6c652075          DCB      0x6c,0x65,0x20,0x75
00005c  6e736967          DCB      0x6e,0x73,0x69,0x67
000060  6e656420          DCB      0x6e,0x65,0x64,0x20
000064  696e7420          DCB      0x69,0x6e,0x74,0x20
000068  2a292043          DCB      0x2a,0x29,0x20,0x43
00006c  00                DCB      0x00
                  _ZZ17__cxa_guard_abortE19__PRETTY_FUNCTION__ ; __cxa_guard_abort::__PRETTY_FUNCTION__
00006d  766f69            DCB      0x76,0x6f,0x69
000070  64205f5f          DCB      0x64,0x20,0x5f,0x5f
000074  6378615f          DCB      0x63,0x78,0x61,0x5f
000078  67756172          DCB      0x67,0x75,0x61,0x72
00007c  645f6162          DCB      0x64,0x5f,0x61,0x62
000080  6f727428          DCB      0x6f,0x72,0x74,0x28
000084  29204300          DCB      0x29,0x20,0x43,0x00
                  _ZZ14_mutex_acquireE19__PRETTY_FUNCTION__ ; _mutex_acquire::__PRETTY_FUNCTION__
000088  766f6964          DCB      0x76,0x6f,0x69,0x64
00008c  205f6d75          DCB      0x20,0x5f,0x6d,0x75
000090  7465785f          DCB      0x74,0x65,0x78,0x5f
000094  61637175          DCB      0x61,0x63,0x71,0x75
000098  69726528          DCB      0x69,0x72,0x65,0x28
00009c  756e7369          DCB      0x75,0x6e,0x73,0x69
0000a0  676e6564          DCB      0x67,0x6e,0x65,0x64
0000a4  20696e74          DCB      0x20,0x69,0x6e,0x74
0000a8  202a2920          DCB      0x20,0x2a,0x29,0x20
0000ac  4300              DCB      0x43,0x00
                  _ZZ14_mutex_releaseE19__PRETTY_FUNCTION__ ; _mutex_release::__PRETTY_FUNCTION__
0000ae  766f              DCB      0x76,0x6f
0000b0  6964205f          DCB      0x69,0x64,0x20,0x5f
0000b4  6d757465          DCB      0x6d,0x75,0x74,0x65
0000b8  785f7265          DCB      0x78,0x5f,0x72,0x65
0000bc  6c656173          DCB      0x6c,0x65,0x61,0x73
0000c0  6528756e          DCB      0x65,0x28,0x75,0x6e
0000c4  7369676e          DCB      0x73,0x69,0x67,0x6e
0000c8  65642069          DCB      0x65,0x64,0x20,0x69
0000cc  6e74202a          DCB      0x6e,0x74,0x20,0x2a
0000d0  29204300          DCB      0x29,0x20,0x43,0x00
                  _ZZ17_mutex_initializeE19__PRETTY_FUNCTION__ ; _mutex_initialize::__PRETTY_FUNCTION__
0000d4  696e7420          DCB      0x69,0x6e,0x74,0x20
0000d8  5f6d7574          DCB      0x5f,0x6d,0x75,0x74
0000dc  65785f69          DCB      0x65,0x78,0x5f,0x69
0000e0  6e697469          DCB      0x6e,0x69,0x74,0x69
0000e4  616c697a          DCB      0x61,0x6c,0x69,0x7a
0000e8  6528756e          DCB      0x65,0x28,0x75,0x6e
0000ec  7369676e          DCB      0x73,0x69,0x67,0x6e
0000f0  65642069          DCB      0x65,0x64,0x20,0x69
0000f4  6e74202a          DCB      0x6e,0x74,0x20,0x2a
0000f8  29204300          DCB      0x29,0x20,0x43,0x00

                          AREA ||i._ZN6Cortex12IsThreadModeEv||, COMGROUP=_ZN6Cortex12IsThreadModeEv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex12IsThreadModeEv PROC ; Cortex::IsThreadMode()
;;;283      /// \note Die Bestimmung, ob sich der Prozessor im Thread-Modus befindet, erfolgt anhand der aktuellen ISR-Nummer.
;;;284      FORCE_INLINE bool IsThreadMode() noexcept { return GetCurrentIsrNum() == isrNum_THREAD_MODE; }
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _ZN6Cortex16GetCurrentIsrNumEv ; Cortex::GetCurrentIsrNum()
000006  b908              CBNZ     r0,|L15.12|
000008  2001              MOVS     r0,#1
00000a  e000              B        |L15.14|
                  |L15.12|
00000c  2000              MOVS     r0,#0
                  |L15.14|
00000e  4604              MOV      r4,r0
000010  4620              MOV      r0,r4
000012  bd10              POP      {r4,pc}
;;;285    
                          ENDP


                          AREA ||area_number.16||, COMGROUP=_ZN6Cortex12IsThreadModeEv, LINKORDER=||i._ZN6Cortex12IsThreadModeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex12IsThreadModeEv||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex16GetCurrentIsrNumEv||, COMGROUP=_ZN6Cortex16GetCurrentIsrNumEv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex16GetCurrentIsrNumEv PROC ; Cortex::GetCurrentIsrNum()
;;;278      /// \return Nummer der aktiven Exception.
;;;279      FORCE_INLINE WORD GetCurrentIsrNum() noexcept { return GetIPSR(); }
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _ZN6Cortex7GetIPSREv ; Cortex::GetIPSR()
000006  4604              MOV      r4,r0
000008  4620              MOV      r0,r4
00000a  bd10              POP      {r4,pc}
;;;280    
                          ENDP


                          AREA ||area_number.23||, COMGROUP=_ZN6Cortex16GetCurrentIsrNumEv, LINKORDER=||i._ZN6Cortex16GetCurrentIsrNumEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex16GetCurrentIsrNumEv||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex7GetIPSREv||, COMGROUP=_ZN6Cortex7GetIPSREv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex7GetIPSREv PROC ; Cortex::GetIPSR()
;;;220    
;;;221      FORCE_INLINE WORD GetIPSR() noexcept { return ARM_RSR(ipsr); }
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _Z12ARM_RSR_ipsrv ; ARM_RSR_ipsr()
000006  4604              MOV      r4,r0
000008  4620              MOV      r0,r4
00000a  bd10              POP      {r4,pc}
;;;222      FORCE_INLINE WORD GetAPSR() noexcept { return ARM_RSR(apsr); }
                          ENDP


                          AREA ||area_number.30||, COMGROUP=_ZN6Cortex7GetIPSREv, LINKORDER=||i._ZN6Cortex7GetIPSREv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex7GetIPSREv||
                          DCD      0x00000001

                          AREA ||i._Z12ARM_RSR_ipsrv||, COMGROUP=_Z12ARM_RSR_ipsrv, CODE, READONLY, ALIGN=1

                  _Z12ARM_RSR_ipsrv PROC ; ARM_RSR_ipsr()
;;;54     DEFINE_ARM_RSR(apsr)
;;;55     DEFINE_ARM_RSR(ipsr)
000000  f3ef8105          MRS      r1,IPSR
000004  4608              MOV      r0,r1
000006  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||area_number.37||, COMGROUP=_Z12ARM_RSR_ipsrv, LINKORDER=||i._Z12ARM_RSR_ipsrv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.37||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z12ARM_RSR_ipsrv||
                          DCD      0x00000001

                          AREA ||i.__ARM_common_noexcept_landing||, COMGROUP=__ARM_common_noexcept_landing, CODE, READONLY, ALIGN=1

                  __ARM_common_noexcept_landing PROC
000000  f7ffbffe          B.W      __cxa_call_terminate
                          ENDP


                          AREA ||area_number.44||, COMGROUP=__ARM_common_noexcept_landing, LINKORDER=||i.__ARM_common_noexcept_landing||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.44||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__ARM_common_noexcept_landing||
                          DCD      0x00000001
