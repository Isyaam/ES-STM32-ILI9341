L 1 "InitSDRAM.cpp"
N/// \file InitSDRAM.cpp
N/// Funktion zur Initialisierung des SDRAM.
N
N#include <Compiler.h>
L 1 ".\Inc\Compiler.h" 1
N//
N// Compiler.h
N//
N
N/// \file Compiler.h
N/// Compiler-spezifische Definitions, Macros und Funktionen.
N/// Um die Quellen auch zu Testzwecken auch mit anderen Compilern (z.B. MSC) übersetzen zu können, müssten in dieser Datei
N/// mittels bedingter Kompilierung verschiedene Makros für die unterschiedlichen Compiler definiert werden.
N
N#if ! defined(guard_COMPILER_H) && defined(__arm__)
X#if ! 0L && 1L
N# define guard_COMPILER_H
N
N# if ! defined(__cplusplus)
X# if ! 1L
S#  error C++ only!
N# endif
N
N# if   defined(_DEBUG)  && ! defined(DEBUG)
X# if   0L  && ! 1L
S#  define DEBUG
N# endif
N
N# if   defined(RELEASE) &&   defined(DEBUG)
X# if   0L &&   1L
S#  error You cannot define RELEASE and DEBUG at the same time
N# endif
N# if ! defined(RELEASE) && ! defined(DEBUG)
X# if ! 0L && ! 1L
S#  error You must define ether RELEASE or DEBUG
N# endif
N
N# include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060037
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
N      namespace std {
N          #define __CLIBNS std::
N          extern "C" {
N    #else
S      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !1L || 0L
S
S    /* 7.18.2.1 */
S
S    /* minimum values of exact-width signed integer types */
S#define INT8_MIN                   -128
S#define INT16_MIN                -32768
S#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
S#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
S
S    /* maximum values of exact-width signed integer types */
S#define INT8_MAX                    127
S#define INT16_MAX                 32767
S#define INT32_MAX            2147483647
S#define INT64_MAX  __INT64_C(9223372036854775807)
S
S    /* maximum values of exact-width unsigned integer types */
S#define UINT8_MAX                   255
S#define UINT16_MAX                65535
S#define UINT32_MAX           4294967295u
S#define UINT64_MAX __UINT64_C(18446744073709551615)
S
S    /* 7.18.2.2 */
S
S    /* minimum values of minimum-width signed integer types */
S#define INT_LEAST8_MIN                   -128
S#define INT_LEAST16_MIN                -32768
S#define INT_LEAST32_MIN          (~0x7fffffff)
S#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
S
S    /* maximum values of minimum-width signed integer types */
S#define INT_LEAST8_MAX                    127
S#define INT_LEAST16_MAX                 32767
S#define INT_LEAST32_MAX            2147483647
S#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
S
S    /* maximum values of minimum-width unsigned integer types */
S#define UINT_LEAST8_MAX                   255
S#define UINT_LEAST16_MAX                65535
S#define UINT_LEAST32_MAX           4294967295u
S#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
S
S    /* 7.18.2.3 */
S
S    /* minimum values of fastest minimum-width signed integer types */
S#define INT_FAST8_MIN           (~0x7fffffff)
S#define INT_FAST16_MIN          (~0x7fffffff)
S#define INT_FAST32_MIN          (~0x7fffffff)
S#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
S
S    /* maximum values of fastest minimum-width signed integer types */
S#define INT_FAST8_MAX             2147483647
S#define INT_FAST16_MAX            2147483647
S#define INT_FAST32_MAX            2147483647
S#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
S
S    /* maximum values of fastest minimum-width unsigned integer types */
S#define UINT_FAST8_MAX            4294967295u
S#define UINT_FAST16_MAX           4294967295u
S#define UINT_FAST32_MAX           4294967295u
S#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
S
S    /* 7.18.2.4 */
S
S    /* minimum value of pointer-holding signed integer type */
S#if __sizeof_ptr == 8
S#define INTPTR_MIN INT64_MIN
S#else
S#define INTPTR_MIN INT32_MIN
S#endif
S
S    /* maximum value of pointer-holding signed integer type */
S#if __sizeof_ptr == 8
S#define INTPTR_MAX INT64_MAX
S#else
S#define INTPTR_MAX INT32_MAX
S#endif
S
S    /* maximum value of pointer-holding unsigned integer type */
S#if __sizeof_ptr == 8
S#define UINTPTR_MAX UINT64_MAX
S#else
S#define UINTPTR_MAX UINT32_MAX
S#endif
S
S    /* 7.18.2.5 */
S
S    /* minimum value of greatest-width signed integer type */
S#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
S
S    /* maximum value of greatest-width signed integer type */
S#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
S
S    /* maximum value of greatest-width unsigned integer type */
S#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
S
S    /* 7.18.3 */
S
S    /* limits of ptrdiff_t */
S#if __sizeof_ptr == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
S#else
S#define PTRDIFF_MIN INT32_MIN
S#define PTRDIFF_MAX INT32_MAX
S#endif
S
S    /* limits of sig_atomic_t */
S#define SIG_ATOMIC_MIN (~0x7fffffff)
S#define SIG_ATOMIC_MAX   2147483647
S
S    /* limit of size_t */
S#if __sizeof_ptr == 8
S#define SIZE_MAX UINT64_MAX
S#else
S#define SIZE_MAX UINT32_MAX
S#endif
S
S    /* limits of wchar_t */
S    /* NB we have to undef and redef because they're defined in both
S     * stdint.h and wchar.h */
S#undef WCHAR_MIN
S#undef WCHAR_MAX
S
S#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
S#else
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   65535
S#endif
S
S    /* limits of wint_t */
S#define WINT_MIN (~0x7fffffff)
S#define WINT_MAX 2147483647
S
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !1L || 0L
S
S    /* 7.18.4.1 macros for minimum-width integer constants */
S#define INT8_C(x)   (x)
S#define INT16_C(x)  (x)
S#define INT32_C(x)  (x)
S#define INT64_C(x)  __INT64_C(x)
S
S#define UINT8_C(x)  (x ## u)
S#define UINT16_C(x) (x ## u)
S#define UINT32_C(x) (x ## u)
S#define UINT64_C(x) __UINT64_C(x)
S
S    /* 7.18.4.2 macros for greatest-width integer constants */
S#define INTMAX_C(x)  __ESCAPE__(x ## ll)
S#define UINTMAX_C(x) __ESCAPE__(x ## ull)
S
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
N         }  /* extern "C" */
N      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
N    #ifndef __STDINT_NO_EXPORTS
N      using ::std::int8_t;
N      using ::std::int16_t;
N      using ::std::int32_t;
N      using ::std::int64_t;
N      using ::std::uint8_t;
N      using ::std::uint16_t;
N      using ::std::uint32_t;
N      using ::std::uint64_t;
N      using ::std::int_least8_t;
N      using ::std::int_least16_t;
N      using ::std::int_least32_t;
N      using ::std::int_least64_t;
N      using ::std::uint_least8_t;
N      using ::std::uint_least16_t;
N      using ::std::uint_least32_t;
N      using ::std::uint_least64_t;
N      using ::std::int_fast8_t;
N      using ::std::int_fast16_t;
N      using ::std::int_fast32_t;
N      using ::std::int_fast64_t;
N      using ::std::uint_fast8_t;
N      using ::std::uint_fast16_t;
N      using ::std::uint_fast32_t;
N      using ::std::uint_fast64_t;
N      using ::std::intptr_t;
N      using ::std::uintptr_t;
N      using ::std::intmax_t;
N      using ::std::uintmax_t;
N    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 29 ".\Inc\Compiler.h" 2
N# include <stdbool.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdbool.h" 1
N/* stdbool.h: ISO/IEC 9899:1999 (C99), section 7.16 */
N
N/* Copyright (C) ARM Ltd., 2002
N * All rights reserved
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: drodgman $
N */
N
N#ifndef __bool_true_false_are_defined
N#define __bool_true_false_are_defined 1
N#define __ARMCLIB_VERSION 5060037
N
N  #ifndef __cplusplus /* In C++, 'bool', 'true' and 'false' and keywords */
S    #define bool _Bool
S    #define true 1
S    #define false 0
N  #else
N    #ifdef __GNUC__
S      /* GNU C++ supports direct inclusion of stdbool.h to provide C99
S         compatibility by defining _Bool */
S      #define _Bool bool
N    #endif
N  #endif
N
N#endif /* __bool_true_false_are_defined */
N
L 30 ".\Inc\Compiler.h" 2
N
N# define BYTE                   uint8_t               ///< Byte-Datentyp (8 Bits).
N# define WORD                   uint32_t              ///< Wort-Datentyp (nach ARM-Konvention 32 Bits, d.h. 4 Bytes).
N# define HWRD                   uint16_t              ///< Halbwort-Datentyp (nach ARM-Konvention 16 Bits, d.h. 2 Bytes).
N# define DWRD                   uint64_t              ///< Doppelwort-Datentyp (nach ARM-Konvention 8 Bytes).
N
N// Nomenklatur <s>INT<nn>:
N// <s> = U bzw. S für unsigned bzw. signed
N// <nn> = 08, 12, 32, 64 für 8 bis 64 Bits
N
N# define UINT64                 uint64_t              ///< 8 byte unsigned int.
N# define SINT64                 int64_t               ///< 8 byte signed int.
N
N# define UINT32                 uint32_t              ///< 4 byte unsigned int.
N# define SINT32                 int32_t               ///< 4 byte signed int.
N
N# define UINT16                 uint16_t              ///< 2 byte unsigned int.
N# define SINT16                 int16_t               ///< 2 byte signed int.
N
N# define UINT08                 uint8_t               ///< Single byte unsigned int.
N# define SINT08                 int8_t                ///< Single byte signed int.
N
N# include <stddef.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stddef.h" 1
N/* stddef.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.1.4 */
N
N/* Copyright (C) ARM Ltd., 1999
N * All rights reserved
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright 1991 ARM Limited. All rights reserved.             */
N/* version 0.05 */
N
N/*
N * The following types and macros are defined in several headers referred to in
N * the descriptions of the functions declared in that header. They are also
N * defined in this header file.
N */
N
N#ifndef __stddef_h
N#define __stddef_h
N#define __ARMCLIB_VERSION 5060037
N
N  #ifndef __STDDEF_DECLS
N  #define __STDDEF_DECLS
N    #undef __CLIBNS
N    #ifdef __cplusplus
N        namespace std {
N        #define __CLIBNS ::std::
N        extern "C" {
N    #else
S      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if __sizeof_ptr == 8
X#if 4 == 8
S  typedef signed long ptrdiff_t;
N#else
N  typedef signed int ptrdiff_t;
N#endif
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 1L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
S   /* the unsigned integral type of the result of the sizeof operator. */
N#endif
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
S  #if !defined(__STRICT_ANSI__)
S  /* unconditional in non-strict C for consistency of debug info */
S    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #else
S      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #endif
S  #elif !defined(__wchar_t)
S    #define __wchar_t 1
S    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #else
S      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #endif
S   /*
S    * An integral type whose range of values can represent distinct codes for
S    * all members of the largest extended character set specified among the
S    * supported locales; the null character shall have the code value zero and
S    * each member of the basic character set shall have a code value when used
S    * as the lone character in an integer character constant.
S    */
S  #endif
N#endif
N
N#undef NULL  /* others (e.g. <stdio.h>) also define */
N#define NULL 0
N   /* null pointer constant. */
N
N#ifdef __clang__
S  #define offsetof(t, d) __builtin_offsetof(t, d)
N#else
N  /* EDG uses __INTADDR__ to avoid errors when strict */
N  #define offsetof(t, memb) ((__CLIBNS size_t)__INTADDR__(&(((t *)0)->memb)))
N#endif
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 201112L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (0L && 201112L <= __STDC_VERSION__) || (1L && 201103L <= 201103L)
N  typedef long double max_align_t;
N#endif
N
N    #ifdef __cplusplus
N         }  /* extern "C" */
N      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDDEF_DECLS */
N
N
N  #ifdef __cplusplus
N    #ifndef __STDDEF_NO_EXPORTS
N      using ::std::size_t;
N      using ::std::ptrdiff_t;
N      #if !defined(__STRICT_ANSI__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X      #if !0L || (1L && 201103L <= 201103L)
N        using ::std::max_align_t;
N      #endif
N    #endif 
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of stddef.h */
N
L 53 ".\Inc\Compiler.h" 2
N
N# if __ARMCC_VERSION >= 6000000
X# if 5060750 >= 6000000
S#  pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
S#  pragma clang diagnostic ignored "-Wnested-anon-types"
S#  pragma clang diagnostic ignored "-Wc++17-compat-mangling"
S#  pragma clang diagnostic ignored "-Wc++98-compat-pedantic"
S#  pragma clang diagnostic ignored "-Wc++98-compat"
S#  pragma clang diagnostic ignored "-Wgcc-compat"
S
S#  define IMPORT(X)             asm(".global " #X);
S
Sstatic __attribute__((always_inline)) inline void ___barrier(void) { asm volatile("" ::: "memory", "cc"); }
S
S#  define SCHEDULE_BARRIER      ___barrier
S#  define FORCE_STORES          ___barrier
S#  define MEMORY_CHANGED        ___barrier
S
S#  define __weak                __attribute__((weak))
S#  define __svc(...)
S#  define __align(x)            __attribute__((aligned(x)))
S
S#  define __clrex               __builtin_arm_clrex
S#  define __dmb                 __builtin_arm_dmb
S#  define __dsb                 __builtin_arm_dsb
S#  define __isb                 __builtin_arm_isb
S#  define __wfi                 __builtin_arm_wfi
S#  define __wfe                 __builtin_arm_wfe
S#  define __rbit                __builtin_arm_rbit
S#  define __rev                 __builtin_bswap32
S#  define __clz                 __builtin_clz
S
S#  define ARM_RSR(NAME)         __builtin_arm_rsr(#NAME)
S#  define ARM_WSR(NAME, VALUE)  __builtin_arm_wsr(#NAME, VALUE)
S
S#  define DEFINE_ARM_RSR(NAME)  inline WORD ARM_RSR_ ## NAME()                 noexcept { return ARM_RSR(NAME); }
S#  define DEFINE_ARM_WSR(NAME)  inline void ARM_WSR_ ## NAME(WORD const value) noexcept { ARM_WSR(NAME, value); }
S
S#  define OFFSET_OF(S, M)       __builtin_offsetof(S, M)
S
S#  define BREAKPOINT(v)         asm volatile("bkpt %0" :: "i"(v))
S
S#  define WRITEONLY             /// not implemented
S#  define READONLY              const
S
S#  define __AT(ADDR)            __attribute__((section(".ARM.__at_" #ADDR)))
S#  define LOCATE_AT(ADDR)       __AT(ADDR)
S
S#  define FORCE_INLINE          __attribute__((always_inline)) inline
S
S#  define FILE                  __FILE__
S#  define FUNC                  __FUNCTION__
S#  define LINE                  __LINE__
N# else
N#  pragma anon_unions
N#  define PRAGMA(X)             _Pragma(#X)
N
N#  define IMPORT(X)             PRAGMA(import(X))
N
N#  define SCHEDULE_BARRIER()    __schedule_barrier() ///< Compiler-spezifische Pseudo-Anweisung, um die compiler-bedingte Umsortierung von Befehlen über diese Grenze hinaus zu unterbinden. 
N#  define FORCE_STORES()        __force_stores()
N#  define MEMORY_CHANGED()      __memory_changed()
N
N#  define DEFINE_ARM_RSR(NAME)  inline WORD ARM_RSR_ ## NAME()                 noexcept { register WORD NAME __asm(#NAME); return NAME; }
N#  define DEFINE_ARM_WSR(NAME)  inline void ARM_WSR_ ## NAME(WORD const value) noexcept { register WORD NAME __asm(#NAME); NAME = value; }
N
N#  define ARM_RSR(NAME)         ARM_RSR_ ## NAME()
N#  define ARM_WSR(NAME, VALUE)  ARM_WSR_ ## NAME(VALUE)
N
N#  define OFFSET_OF(S, M)       offsetof(S, M)
N
N#  define BREAKPOINT(n)         __breakpoint(n)
N
N#  define WRITEONLY             __writeonly
N#  define READONLY              const
N
N#  define LOCATE_AT(ADDR)       __attribute__((at(ADDR)))
N
N#  define FORCE_INLINE          __forceinline
N
N#  define FILE                  __MODULE__            ///< Name der aktuellen Datei.
N
N#  define FUNC                  __PRETTY_FUNCTION__   ///< Name der aktuellen Funktion.
N#  define LINE                  __LINE__              ///< Aktuelle Zeilennummer.
N# endif
N
Nnamespace std { using nullptr_t = decltype(nullptr); }
N
N# if defined(DEBUG) && ! defined(NO_BREAK)
X# if 1L && ! 0L
N#  define DEBUG_BREAK(n)        BREAKPOINT(n)
N# else
S#  define DEBUG_BREAK(n)
N# endif
N
N# define __CONCAT(A, B)         A##B
N# define CONCAT(A, B)           __CONCAT(A, B)
N
Ntemplate<typename TYPE, unsigned DIM> constexpr unsigned ArrayDim(TYPE const (&)[DIM]) noexcept { return DIM; }
Ntemplate<typename TYPE, unsigned DIM> constexpr unsigned ArrayMax(TYPE const (&)[DIM]) noexcept { return DIM - 1U; }
N
Ntemplate<typename TYPE, unsigned H, unsigned W> constexpr unsigned MatrixRows(TYPE const (&)[H][W]) noexcept { return H; }
Ntemplate<typename TYPE, unsigned H, unsigned W> constexpr unsigned MatrixCols(TYPE const (&)[H][W]) noexcept { return W; }
N
N/// Achtung: Die obigen Varianten zur Bestimmung von Feld oder Matrixdimensionen funktionieren nicht, wenn das Feld
N/// nicht-statische Member-Variable in einer Klasse ist, weil der this-Zeiger nicht constexpr ist.
N
Ninline void * operator new   (unsigned, void * const p) noexcept { return p; }
Ninline void   operator delete(void *, void *) noexcept { }
N
N#endif
N
L 5 "InitSDRAM.cpp" 2
N
N#include <RB_RCC.h>
L 1 ".\Inc\Drivers\RB_RCC.h" 1
N //
N// RB_RCC.h
N//
N
N/// \file RB_RCC.h
N/// Reset and clock control (RCC).
N
N#ifndef guard_RB_RCC_H
N# define  guard_RB_RCC_H
N
N# include <RB.h>
L 1 ".\Inc\Drivers\RB.h" 1
N//
N// RB.h
N//
N
N/// \file RB.h
N/// Macros zur Definition der Register-Bits für STM32Fxxx.
N
N#ifndef guard_RB_H
N# define guard_RB_H
N
N# include <Compiler.h>
L 1 ".\Inc\Compiler.h" 1
N//
N// Compiler.h
N//
N
N/// \file Compiler.h
N/// Compiler-spezifische Definitions, Macros und Funktionen.
N/// Um die Quellen auch zu Testzwecken auch mit anderen Compilern (z.B. MSC) übersetzen zu können, müssten in dieser Datei
N/// mittels bedingter Kompilierung verschiedene Makros für die unterschiedlichen Compiler definiert werden.
N
N#if ! defined(guard_COMPILER_H) && defined(__arm__)
X#if ! 1L && 1L
S# define guard_COMPILER_H
S
S# if ! defined(__cplusplus)
S#  error C++ only!
S# endif
S
S# if   defined(_DEBUG)  && ! defined(DEBUG)
S#  define DEBUG
S# endif
S
S# if   defined(RELEASE) &&   defined(DEBUG)
S#  error You cannot define RELEASE and DEBUG at the same time
S# endif
S# if ! defined(RELEASE) && ! defined(DEBUG)
S#  error You must define ether RELEASE or DEBUG
S# endif
S
S# include <stdint.h>
S# include <stdbool.h>
S
S# define BYTE                   uint8_t               ///< Byte-Datentyp (8 Bits).
S# define WORD                   uint32_t              ///< Wort-Datentyp (nach ARM-Konvention 32 Bits, d.h. 4 Bytes).
S# define HWRD                   uint16_t              ///< Halbwort-Datentyp (nach ARM-Konvention 16 Bits, d.h. 2 Bytes).
S# define DWRD                   uint64_t              ///< Doppelwort-Datentyp (nach ARM-Konvention 8 Bytes).
S
S// Nomenklatur <s>INT<nn>:
S// <s> = U bzw. S für unsigned bzw. signed
S// <nn> = 08, 12, 32, 64 für 8 bis 64 Bits
S
S# define UINT64                 uint64_t              ///< 8 byte unsigned int.
S# define SINT64                 int64_t               ///< 8 byte signed int.
S
S# define UINT32                 uint32_t              ///< 4 byte unsigned int.
S# define SINT32                 int32_t               ///< 4 byte signed int.
S
S# define UINT16                 uint16_t              ///< 2 byte unsigned int.
S# define SINT16                 int16_t               ///< 2 byte signed int.
S
S# define UINT08                 uint8_t               ///< Single byte unsigned int.
S# define SINT08                 int8_t                ///< Single byte signed int.
S
S# include <stddef.h>
S
S# if __ARMCC_VERSION >= 6000000
S#  pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
S#  pragma clang diagnostic ignored "-Wnested-anon-types"
S#  pragma clang diagnostic ignored "-Wc++17-compat-mangling"
S#  pragma clang diagnostic ignored "-Wc++98-compat-pedantic"
S#  pragma clang diagnostic ignored "-Wc++98-compat"
S#  pragma clang diagnostic ignored "-Wgcc-compat"
S
S#  define IMPORT(X)             asm(".global " #X);
S
Sstatic __attribute__((always_inline)) inline void ___barrier(void) { asm volatile("" ::: "memory", "cc"); }
S
S#  define SCHEDULE_BARRIER      ___barrier
S#  define FORCE_STORES          ___barrier
S#  define MEMORY_CHANGED        ___barrier
S
S#  define __weak                __attribute__((weak))
S#  define __svc(...)
S#  define __align(x)            __attribute__((aligned(x)))
S
S#  define __clrex               __builtin_arm_clrex
S#  define __dmb                 __builtin_arm_dmb
S#  define __dsb                 __builtin_arm_dsb
S#  define __isb                 __builtin_arm_isb
S#  define __wfi                 __builtin_arm_wfi
S#  define __wfe                 __builtin_arm_wfe
S#  define __rbit                __builtin_arm_rbit
S#  define __rev                 __builtin_bswap32
S#  define __clz                 __builtin_clz
S
S#  define ARM_RSR(NAME)         __builtin_arm_rsr(#NAME)
S#  define ARM_WSR(NAME, VALUE)  __builtin_arm_wsr(#NAME, VALUE)
S
S#  define DEFINE_ARM_RSR(NAME)  inline WORD ARM_RSR_ ## NAME()                 noexcept { return ARM_RSR(NAME); }
S#  define DEFINE_ARM_WSR(NAME)  inline void ARM_WSR_ ## NAME(WORD const value) noexcept { ARM_WSR(NAME, value); }
S
S#  define OFFSET_OF(S, M)       __builtin_offsetof(S, M)
S
S#  define BREAKPOINT(v)         asm volatile("bkpt %0" :: "i"(v))
S
S#  define WRITEONLY             /// not implemented
S#  define READONLY              const
S
S#  define __AT(ADDR)            __attribute__((section(".ARM.__at_" #ADDR)))
S#  define LOCATE_AT(ADDR)       __AT(ADDR)
S
S#  define FORCE_INLINE          __attribute__((always_inline)) inline
S
S#  define FILE                  __FILE__
S#  define FUNC                  __FUNCTION__
S#  define LINE                  __LINE__
S# else
S#  pragma anon_unions
S#  define PRAGMA(X)             _Pragma(#X)
S
S#  define IMPORT(X)             PRAGMA(import(X))
S
S#  define SCHEDULE_BARRIER()    __schedule_barrier() ///< Compiler-spezifische Pseudo-Anweisung, um die compiler-bedingte Umsortierung von Befehlen über diese Grenze hinaus zu unterbinden. 
S#  define FORCE_STORES()        __force_stores()
S#  define MEMORY_CHANGED()      __memory_changed()
S
S#  define DEFINE_ARM_RSR(NAME)  inline WORD ARM_RSR_ ## NAME()                 noexcept { register WORD NAME __asm(#NAME); return NAME; }
S#  define DEFINE_ARM_WSR(NAME)  inline void ARM_WSR_ ## NAME(WORD const value) noexcept { register WORD NAME __asm(#NAME); NAME = value; }
S
S#  define ARM_RSR(NAME)         ARM_RSR_ ## NAME()
S#  define ARM_WSR(NAME, VALUE)  ARM_WSR_ ## NAME(VALUE)
S
S#  define OFFSET_OF(S, M)       offsetof(S, M)
S
S#  define BREAKPOINT(n)         __breakpoint(n)
S
S#  define WRITEONLY             __writeonly
S#  define READONLY              const
S
S#  define LOCATE_AT(ADDR)       __attribute__((at(ADDR)))
S
S#  define FORCE_INLINE          __forceinline
S
S#  define FILE                  __MODULE__            ///< Name der aktuellen Datei.
S
S#  define FUNC                  __PRETTY_FUNCTION__   ///< Name der aktuellen Funktion.
S#  define LINE                  __LINE__              ///< Aktuelle Zeilennummer.
S# endif
S
Snamespace std { using nullptr_t = decltype(nullptr); }
S
S# if defined(DEBUG) && ! defined(NO_BREAK)
S#  define DEBUG_BREAK(n)        BREAKPOINT(n)
S# else
S#  define DEBUG_BREAK(n)
S# endif
S
S# define __CONCAT(A, B)         A##B
S# define CONCAT(A, B)           __CONCAT(A, B)
S
Stemplate<typename TYPE, unsigned DIM> constexpr unsigned ArrayDim(TYPE const (&)[DIM]) noexcept { return DIM; }
Stemplate<typename TYPE, unsigned DIM> constexpr unsigned ArrayMax(TYPE const (&)[DIM]) noexcept { return DIM - 1U; }
S
Stemplate<typename TYPE, unsigned H, unsigned W> constexpr unsigned MatrixRows(TYPE const (&)[H][W]) noexcept { return H; }
Stemplate<typename TYPE, unsigned H, unsigned W> constexpr unsigned MatrixCols(TYPE const (&)[H][W]) noexcept { return W; }
S
S/// Achtung: Die obigen Varianten zur Bestimmung von Feld oder Matrixdimensionen funktionieren nicht, wenn das Feld
S/// nicht-statische Member-Variable in einer Klasse ist, weil der this-Zeiger nicht constexpr ist.
S
Sinline void * operator new   (unsigned, void * const p) noexcept { return p; }
Sinline void   operator delete(void *, void *) noexcept { }
S
N#endif
N
L 12 ".\Inc\Drivers\RB.h" 2
N
N# define REG_BITMASK(N)         (1U << INDX_ ## N)
N
N# define SET_REG_BIT(RB, REG, BIT) ( rb ## RB.REG |=  MASK_ ## RB ## _ ## REG ## _ ## BIT)   
N# define RES_REG_BIT(RB, REG, BIT) ( rb ## RB.REG &= ~MASK_ ## RB ## _ ## REG ## _ ## BIT)   
N# define GET_REG_BIT(RB, REG, BIT) ((rb ## RB.REG &   MASK_ ## RB ## _ ## REG ## _ ## BIT) != 0)   
N
Ntypedef struct __regbank_MPU
N{
N  union {
N    WORD TYPE;
X    uint32_t TYPE;
N    struct {
N      BYTE res0;
X      uint8_t res0;
N      BYTE TYPE_DREGION;
X      uint8_t TYPE_DREGION;
N      BYTE TYPE_IREGION;
X      uint8_t TYPE_IREGION;
N      BYTE res3;
X      uint8_t res3;
N    };
N  };
N  WORD CTRL;                    
X  uint32_t CTRL;                    
N  WORD RNR;                     
X  uint32_t RNR;                     
N  WORD RBAR;                    
X  uint32_t RBAR;                    
N  WORD RASR;                    
X  uint32_t RASR;                    
N  WORD RBAR_A1;                 
X  uint32_t RBAR_A1;                 
N  WORD RASR_A1;                 
X  uint32_t RASR_A1;                 
N  WORD RBAR_A2;                 
X  uint32_t RBAR_A2;                 
N  WORD RASR_A2;
X  uint32_t RASR_A2;
N  WORD RBAR_A3;
X  uint32_t RBAR_A3;
N  WORD RASR_A3;
X  uint32_t RASR_A3;
N} RegbankTypeMPU;
N
Nextern RegbankTypeMPU volatile rbMPU;
N
N# define MASK_MPU_RASR_ENABLE   1U
N
N# define INDX_MPU_RASR_SIZE     1
N
N# define INDX_MPU_RASR_SRD      8
N
N# define INDX_MPU_RASR_B        16
N# define MASK_MPU_RASR_B        (1U << INDX_MPU_RASR_B)
N
N# define INDX_MPU_RASR_C        17
N# define MASK_MPU_RASR_C        (1U << INDX_MPU_RASR_C)
N
N# define INDX_MPU_RASR_S        18
N# define MASK_MPU_RASR_S        (1U << INDX_MPU_RASR_S)
N
N# define INDX_MPU_RASR_TEX      19
N
N# define INDX_MPU_RASR_AP       24
N
N# define INDX_MPU_RASR_XN       28
N
N/// The processor prevents instruction accesses (a fault exception is 
N/// generated on execution of an instruction executed from an XN region).
N# define MASK_MPU_RASR_XN       (1U << INDX_MPU_RASR_XN) 
N
N// Memory region sizes
N
N# define MASK_MPU_RASR_SIZE_001KB (0x09U << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_002KB (0x0AU << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_004KB (0x0BU << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_008KB (0x0CU << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_016KB (0x0DU << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_032KB (0x0EU << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_064KB (0x0FU << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_128KB (0x10U << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_256KB (0x11U << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_512KB (0x12U << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_001MB (0x13U << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_002MB (0x14U << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_004MB (0x15U << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_008MB (0x16U << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_016MB (0x17U << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_032MB (0x18U << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_064MB (0x19U << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_128MB (0x1AU << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_256MB (0x1BU << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_512MB (0x1CU << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_001GB (0x1DU << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_002GB (0x1EU << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_004GB (0x1FU << INDX_MPU_RASR_SIZE)
N
N// Memory region permissions (privileged, user; NA=no access)
N
N#define  MASK_MPU_RASR_AP_NA_NA  (0x0U << INDX_MPU_RASR_AP)
N#define  MASK_MPU_RASR_AP_RW_NA  (0x1U << INDX_MPU_RASR_AP)
N#define  MASK_MPU_RASR_AP_RW_RO  (0x2U << INDX_MPU_RASR_AP)
N#define  MASK_MPU_RASR_AP_RW_RW  (0x3U << INDX_MPU_RASR_AP) ///< Memory region full access (privileged: read/write, user: read/write).
N#define  MASK_MPU_RASR_AP_RO_NA  (0x5U << INDX_MPU_RASR_AP) 
N#define  MASK_MPU_RASR_AP_RO_RO  (0x6U << INDX_MPU_RASR_AP) 
N
N// Memory region types
N
N#define  MPU_REGION_STRONGLY_ORDERED 0x0
N#define  MPU_REGION_DEVICE      MASK_MPU_RASR_B
N#define  MPU_REGION_NORMAL_WB   (MASK_MPU_RASR_B | MASK_MPU_RASR_C) ///< Write-back, no write allocate
N#define  MPU_REGION_NORMAL_WT   MASK_MPU_RASR_C                     ///< Write-through, no write allocate
N#define  MPU_REGION_NORMAL_WBWA (MASK_MPU_RASR_B | MASK_MPU_RASR_C | (1U << INDX_MPU_RASR_TEX)) ///< Write-through, write and read allocate
N
N// Control regiszer values
N
N# define MASK_MPU_CTRL_ENABLE   0x1U
N
N# define MASK_MPU_CTRL_HFNMIENA 0x2U
N
N# define MASK_MPU_CTRL_PRIVDEFENA 0x4U              ///< Enables privileged software access to the default memory map
N
Ntypedef struct __regbank_DBG
N{
N  WORD DHCSR;
X  uint32_t DHCSR;
N  WORD DCRSR;
X  uint32_t DCRSR;
N  WORD DCRDR;
X  uint32_t DCRDR;
N  WORD DEMCR;
X  uint32_t DEMCR;
N} RegbankTypeDBG;
N
Nextern RegbankTypeDBG volatile rbDBG;
N
N/// \cond RB_DEFS
N
N// DEMCR definitions
N
N# define INDX_DBG_DEMCR_TRCENA  24
N# define MASK_DBG_DEMCR_TRCENA  (WORD)REG_BITMASK(DBG_DEMCR_TRCENA)
N
N/// \endcond
N
N// Die ersten drei Hexziffern der Adresse bilden den Prefix für die verschiedenene I/O-Bereiche.
N
N# define PERIPH_ADDR_PREFIX     0x400 ///< Cortex-Mx periphery start address prefix
N# define EXTPER_ADDR_PREFIX     0x500
N# define DEVICE_ADDR_PREFIX     0xA00 ///< Cortex-Mx external device start address prefix.
N# define PRVPER_ADDR_PREFIX     0xE00 ///< Cortex-Mx private peripheral bus (PPB, 1MB) address prefix (first 3 hex digits of address).
N
Nvoid TriggerWatchdog() noexcept;
N
N#endif
N
L 12 ".\Inc\Drivers\RB_RCC.h" 2
N
N/// Registerbank für RCC
Ntypedef struct __regbank_RCC
N{
N  WORD CR;                                            ///< Control register.
X  uint32_t CR;                                            
N  WORD PLLCFGR;                                       ///< PLL configuration register.
X  uint32_t PLLCFGR;                                       
N  WORD CFGR;                                          ///< Configuration register.
X  uint32_t CFGR;                                          
N  WORD CIR;                                           ///< clock interrupt register.
X  uint32_t CIR;                                           
N  WORD AHB1RSTR;                                      ///< AHB1 peripheral reset register.
X  uint32_t AHB1RSTR;                                      
N  WORD AHB2RSTR;                                      ///< AHB2 peripheral reset register.
X  uint32_t AHB2RSTR;                                      
N  WORD AHB3RSTR;                                      ///< AHB3 peripheral reset register.
X  uint32_t AHB3RSTR;                                      
N
N  WORD reserved0;
X  uint32_t reserved0;
N
N  WORD APB1RSTR;                                      ///< APB1 peripheral reset register.
X  uint32_t APB1RSTR;                                      
N  WORD APB2RSTR;                                      ///< APB2 peripheral reset register.
X  uint32_t APB2RSTR;                                      
N
N  WORD reserved1[2];
X  uint32_t reserved1[2];
N
N  union {
N    struct {
N      WORD AHB1ENR;                                   ///< AHB1 enable register.
X      uint32_t AHB1ENR;                                   
N      WORD AHB2ENR;                                   ///< AHB2 enable register.
X      uint32_t AHB2ENR;                                   
N      WORD AHB3ENR;                                   ///< AHB3 enable register.
X      uint32_t AHB3ENR;                                   
N    };
N    WORD AHBENR[3];                                   ///< AHB1..3 enable registers.
X    uint32_t AHBENR[3];                                   
N  };
N
N  WORD reserved2;
X  uint32_t reserved2;
N
N  union {
N    struct {
N      WORD APB1ENR;                                   ///< APB1 enable registers.
X      uint32_t APB1ENR;                                   
N      WORD APB2ENR;                                   ///< APB2 enable registers.
X      uint32_t APB2ENR;                                   
N    };
N    WORD APBENR[2];                                   ///< APB1..2 enable registers.
X    uint32_t APBENR[2];                                   
N  };
N  
N  WORD reserved3[2];
X  uint32_t reserved3[2];
N  
N  WORD AHB1LPENR;
X  uint32_t AHB1LPENR;
N  WORD AHB2LPENR;
X  uint32_t AHB2LPENR;
N  WORD AHB3LPENR;
X  uint32_t AHB3LPENR;
N  WORD reserved4;
X  uint32_t reserved4;
N  WORD APB1LPENR;
X  uint32_t APB1LPENR;
N  WORD APB2LPENR;
X  uint32_t APB2LPENR;
N  WORD reserved5[2];
X  uint32_t reserved5[2];
N  
N  WORD BDCR;                                          ///< Backup domain control register.
X  uint32_t BDCR;                                          
N  WORD CSR;                                           ///< Control & status register.
X  uint32_t CSR;                                           
N
N  WORD reserved6[2];
X  uint32_t reserved6[2];
N
N  WORD SSCGR;                                         ///< Spread spectrum clock generation register.
X  uint32_t SSCGR;                                         
N  WORD PLLI2SCFGR;                                    ///< PLLI2S configuration register.
X  uint32_t PLLI2SCFGR;                                    
N  WORD PLLSAICFGR;
X  uint32_t PLLSAICFGR;
N  WORD DCKCFGR;
X  uint32_t DCKCFGR;
N} RegbankTypeRCC;
N
Nextern RegbankTypeRCC volatile 	rbRCC;                 ///< RCC-Registerbank.
N
Nstatic_assert(offsetof(RegbankTypeRCC, PLLSAICFGR) == 0x88, "Invalid RegbankTypeRCC [PLLSAICFGR]");
Xstatic_assert(((::std:: size_t)__INTADDR__(&(((RegbankTypeRCC *)0)->PLLSAICFGR))) == 0x88, "Invalid RegbankTypeRCC [PLLSAICFGR]");
Nstatic_assert(offsetof(RegbankTypeRCC, DCKCFGR) == 0x8C, "Invalid RegbankTypeRCC [DCKCFGR]");
Xstatic_assert(((::std:: size_t)__INTADDR__(&(((RegbankTypeRCC *)0)->DCKCFGR))) == 0x8C, "Invalid RegbankTypeRCC [DCKCFGR]");
N
N/// \cond RB_DEFS
N
N// CR
N
N# define INDX_RCC_CR_HSEON      16
N# define MASK_RCC_CR_HSEON      (WORD)REG_BITMASK(RCC_CR_HSEON)
N
N# define INDX_RCC_CR_HSERDY     17 
N# define MASK_RCC_CR_HSERDY     (WORD)REG_BITMASK(RCC_CR_HSERDY)
N
N# define INDX_RCC_CR_PLLON      24 
N# define MASK_RCC_CR_PLLON      (WORD)REG_BITMASK(RCC_CR_PLLON)
N
N# define INDX_RCC_CR_PLLRDY     25 
N# define MASK_RCC_CR_PLLRDY     (WORD)REG_BITMASK(RCC_CR_PLLRDY)
N
N# define INDX_RCC_CR_PLLI2SON   26 
N# define MASK_RCC_CR_PLLI2SON   (WORD)REG_BITMASK(RCC_CR_PLLI2SON)
N
N# define INDX_RCC_CR_PLLI2SRDY  27 
N# define MASK_RCC_CR_PLLI2SRDY  (WORD)REG_BITMASK(RCC_CR_PLLI2SRDY)
N
N# define INDX_RCC_CR_PLLSAION   28 
N# define MASK_RCC_CR_PLLSAION   (WORD)REG_BITMASK(RCC_CR_PLLSAION)
N
N# define INDX_RCC_CR_PLLSAIRDY  29
N# define MASK_RCC_CR_PLLSAIRDY  (WORD)REG_BITMASK(RCC_CR_PLLSAIRDY)
N
N// CFGR
N
N# define INDX_RCC_CFGR_SW       0 
N# define MASK_RCC_CFGR_SW       (WORD)0x3
N# define MASK_RCC_CFGR_SW_HSI   (WORD)0x0
N# define MASK_RCC_CFGR_SW_HSE   (WORD)0x1
N# define MASK_RCC_CFGR_SW_PLL   (WORD)0x2
N
N# define INDX_RCC_CFGR_SWS      2 
N# define MASK_RCC_CFGR_SWS      (WORD)(MASK_RCC_CFGR_SW     << INDX_RCC_CFGR_SWS)
N# define MASK_RCC_CFGR_SWS_HSI  (WORD)(MASK_RCC_CFGR_SW_HSI << INDX_RCC_CFGR_SWS)
N# define MASK_RCC_CFGR_SWS_HSE  (WORD)(MASK_RCC_CFGR_SW_HSE << INDX_RCC_CFGR_SWS)
N# define MASK_RCC_CFGR_SWS_PLL  (WORD)(MASK_RCC_CFGR_SW_PLL << INDX_RCC_CFGR_SWS)
N
N# define INDX_RCC_CFGR_HPRE     4                     /// AHB prescaler: HCLK = SYSCLK / HPRE.
N# define MASK_RCC_CFGR_HPRE     (WORD)(0xFU << INDX_RCC_CFGR_HPRE)
N# define MASK_RCC_CFGR_HPRE_001 (WORD)(0x0U << INDX_RCC_CFGR_HPRE)
N# define MASK_RCC_CFGR_HPRE_002 (WORD)(0x8U << INDX_RCC_CFGR_HPRE)
N# define MASK_RCC_CFGR_HPRE_004 (WORD)(0x9U << INDX_RCC_CFGR_HPRE)
N# define MASK_RCC_CFGR_HPRE_008 (WORD)(0xAU << INDX_RCC_CFGR_HPRE)
N# define MASK_RCC_CFGR_HPRE_016 (WORD)(0xBU << INDX_RCC_CFGR_HPRE)
N# define MASK_RCC_CFGR_HPRE_064 (WORD)(0xCU << INDX_RCC_CFGR_HPRE)
N# define MASK_RCC_CFGR_HPRE_128 (WORD)(0xDU << INDX_RCC_CFGR_HPRE)
N# define MASK_RCC_CFGR_HPRE_256 (WORD)(0xEU << INDX_RCC_CFGR_HPRE)
N# define MASK_RCC_CFGR_HPRE_512 (WORD)(0xFU << INDX_RCC_CFGR_HPRE)
N
N# define INDX_RCC_CFGR_PPRE1    10                    ///< APB1 prescaler: PCLK1 = HCLK / PRE1.
N# define MASK_RCC_CFGR_PPRE1    (WORD)(0x7U << INDX_RCC_CFGR_PPRE1)
N# define MASK_RCC_CFGR_PPRE1_01 (WORD)(0x0U << INDX_RCC_CFGR_PPRE1)
N# define MASK_RCC_CFGR_PPRE1_02 (WORD)(0x4U << INDX_RCC_CFGR_PPRE1)
N# define MASK_RCC_CFGR_PPRE1_04 (WORD)(0x5U << INDX_RCC_CFGR_PPRE1)
N# define MASK_RCC_CFGR_PPRE1_08 (WORD)(0x6U << INDX_RCC_CFGR_PPRE1)
N# define MASK_RCC_CFGR_PPRE1_16 (WORD)(0x7U << INDX_RCC_CFGR_PPRE1)
N
N# define INDX_RCC_CFGR_PPRE2    13                    ///< APB2 prescaler: PCLK2 = HCLK / PRE2.
N# define MASK_RCC_CFGR_PPRE2    (WORD)(0x7U << INDX_RCC_CFGR_PPRE2)
N# define MASK_RCC_CFGR_PPRE2_01 (WORD)(0x0U << INDX_RCC_CFGR_PPRE2)
N# define MASK_RCC_CFGR_PPRE2_02 (WORD)(0x4U << INDX_RCC_CFGR_PPRE2)
N# define MASK_RCC_CFGR_PPRE2_04 (WORD)(0x5U << INDX_RCC_CFGR_PPRE2)
N# define MASK_RCC_CFGR_PPRE2_08 (WORD)(0x6U << INDX_RCC_CFGR_PPRE2)
N# define MASK_RCC_CFGR_PPRE2_16 (WORD)(0x7U << INDX_RCC_CFGR_PPRE2)
N
N# define INDX_RCC_CFGR_I2SSRC   23
N# define MASK_RCC_CFGR_I2SSRC   (WORD)REG_BITMASK(RCC_CFGR_I2SSRC)
N  
N// PLLCFGR
N
N# define INDX_RCC_PLLCFGR_PLLM  0
N# define MASK_RCC_PLLCFGR_PLLM  (WORD)(0x03FU << INDX_RCC_PLLCFGR_PLLM)  
N
N# define INDX_RCC_PLLCFGR_PLLN  6
N# define MASK_RCC_PLLCFGR_PLLN  (WORD)(0x1FFU << INDX_RCC_PLLCFGR_PLLN)  
N
N# define INDX_RCC_PLLCFGR_PLLP  16
N# define MASK_RCC_PLLCFGR_PLLP  (WORD)(0x003U << INDX_RCC_PLLCFGR_PLLP)  
N
N# define INDX_RCC_PLLCFGR_PLLQ  24
N# define MASK_RCC_PLLCFGR_PLLQ  (WORD)(0x00FU << INDX_RCC_PLLCFGR_PLLQ)  
N
N# define INDX_RCC_PLLCFGR_PLLSRC 22
N# define MASK_RCC_PLLCFGR_PLLSRC (WORD)REG_BITMASK(RCC_PLLCFGR_PLLSRC)
N
N# define MASK_RCC_PLLCFGR       (MASK_RCC_PLLCFGR_PLLM | MASK_RCC_PLLCFGR_PLLN | MASK_RCC_PLLCFGR_PLLP | MASK_RCC_PLLCFGR_PLLQ | MASK_RCC_PLLCFGR_PLLSRC)
N
N// BDCR
N
N# define INDX_RCC_BDCR_LSEON    0
N# define MASK_RCC_BDCR_LSEON    (WORD)REG_BITMASK(RCC_BDCR_LSEON)
N
N# define INDX_RCC_BDCR_LSERDY   1
N# define MASK_RCC_BDCR_LSERDY   (WORD)REG_BITMASK(RCC_BDCR_LSERDY)
N
N# define INDX_RCC_BDCR_RTCSEL   8
N# define MASK_RCC_BDCR_RTCSEL   (WORD)(0x3U << INDX_RCC_BDCR_RTCSEL)
N# define MASK_RCC_BDCR_RTCSEL_OFF (WORD)(0x0U << INDX_RCC_BDCR_RTCSEL)
N# define MASK_RCC_BDCR_RTCSEL_LSE (WORD)(0x1U << INDX_RCC_BDCR_RTCSEL)
N# define MASK_RCC_BDCR_RTCSEL_LSI (WORD)(0x2U << INDX_RCC_BDCR_RTCSEL)
N# define MASK_RCC_BDCR_RTCSEL_HSE (WORD)(0x3U << INDX_RCC_BDCR_RTCSEL)
N
N# define INDX_RCC_BDCR_RTCEN    15
N# define MASK_RCC_BDCR_RTCEN    (WORD)REG_BITMASK(RCC_BDCR_RTCEN)
N
N// SSCGR
N
N# define INDX_RCC_SSCGR_MODPER  0                     // MODPER = round(f_PLL_IN / (4 * f_mod))
N                                                      // f_mod = modulation frequency, max. 10 kHz
N
N# define INDX_RCC_SSCGR_INCSTEP 13                    // INCSTEP = round((0xFFFFU * md * PLLN) / (100 * 5 * MODPER))
N                                                      // md = peak modulation depth (in percent, max 2 %, min 0.25 %)
N                                                      // MODPER * INCSTEP <= 0xFFFFU
N
N# define INDX_RCC_SSCGR_SPREADSEL 30
N# define MASK_RCC_SSCGR_SPREADSEL (WORD)REG_BITMASK(RCC_SSCGR_SPREADSEL)
N
N# define INDX_RCC_SSCGR_SSCGEN  31
N# define MASK_RCC_SSCGR_SSCGEN  (WORD)REG_BITMASK(RCC_SSCGR_SSCGEN)
N
N// PLLI2SCFGR
N
N# define INDX_RCC_PLLI2SCFGR_N  6
N# define MASK_RCC_PLLI2SCFGR_N  (WORD)(0x1FFU << INDX_RCC_PLLI2SCFGR_N)
N
N# define INDX_RCC_PLLI2SCFGR_R  28
N# define MASK_RCC_PLLI2SCFGR_R  (WORD)(0x7U << INDX_RCC_PLLI2SCFGR_R)
N
N// PLLSAICFGR
N
N# define INDX_RCC_PLLSAICFGR_PLLSAIR 28
N
N# define INDX_RCC_PLLSAICFGR_PLLSAIQ 24
N
N# define INDX_RCC_PLLSAICFGR_PLLSAIP 16
N
N# define INDX_RCC_PLLSAICFGR_PLLSAIN 6
N
N// DCKCFGR
N
N# define INDX_RCC_DCKCFGR_PLLI2SDIVQ 0
N# define MASK_RCC_DCKCFGR_PLLI2SDIVQ (WORD)(0x1FU << INDX_RCC_DCKCFGR_PLLI2SDIVQ)
N
N# define INDX_RCC_DCKCFGR_PLLSAIDIVQ 8
N# define MASK_RCC_DCKCFGR_PLLSAIDIVQ (WORD)(0x1FU << INDX_RCC_DCKCFGR_PLLSAIDIVQ)
N
N# define INDX_RCC_DCKCFGR_PLLSAIDIVR 16
N# define MASK_RCC_DCKCFGR_PLLSAIDIVR (WORD)(0x3U << INDX_RCC_DCKCFGR_PLLSAIDIVR)
N
N# define INDX_RCC_DCKCFGR_SAI1ASRC 20
N# define MASK_RCC_DCKCFGR_SAI1ASRC (WORD)(3U << INDX_RCC_DCKCFGR_SAI1ASRC)
N
N# define INDX_RCC_DCKCFGR_SAI1BSRC 22
N# define MASK_RCC_DCKCFGR_SAI1BSRC (WORD)(3U << INDX_RCC_DCKCFGR_SAI1BSRC)
N
N# define INDX_RCC_DCKCFGR_TIMPRE 24
N# define MASK_RCC_DCKCFGR_TIMPRE (WORD)REG_BITMASK(RCC_DCKCFGR_TIMPRE)
N
N/// \endcond
N
N# include <RB_RCC_AHB.h>
L 1 ".\Inc\Drivers\RB_RCC_AHB.h" 1
N//
N// RB_RCC_AHB.h (STM32F2xx)
N//
N
N/// \file RB_RCC_AHB.h
N/// AHB definitions for  reset and clock control (RCC).
N
N#ifndef guard_RB_RCC_AHB_H
N# define  guard_RB_RCC_AHB_H
N
N# define INDX_RCC_AHB1_ETHPTP   28
N# define MASK_RCC_AHB1_ETHPTP   (WORD)REG_BITMASK(RCC_AHB1_ETHPTP)
N
N# define INDX_RCC_AHB1_ETHRX    27
N# define MASK_RCC_AHB1_ETHRX    (WORD)REG_BITMASK(RCC_AHB1_ETHRX)
N
N# define INDX_RCC_AHB1_ETHTX    26
N# define MASK_RCC_AHB1_ETHTX    (WORD)REG_BITMASK(RCC_AHB1_ETHTX)
N
N# define INDX_RCC_AHB1_ETHMAC   25
N# define MASK_RCC_AHB1_ETHMAC   (WORD)REG_BITMASK(RCC_AHB1_ETHMAC)
N
N# define INDX_RCC_AHB1_DMA_2D   23
N# define MASK_RCC_AHB1_DMA_2D   (WORD)REG_BITMASK(RCC_AHB1_DMA_2D)
N
N# define INDX_RCC_AHB1_DMA2     22
N# define MASK_RCC_AHB1_DMA2     (WORD)REG_BITMASK(RCC_AHB1_DMA2)
N
N# define INDX_RCC_AHB1_DMA1     21
N# define MASK_RCC_AHB1_DMA1     (WORD)REG_BITMASK(RCC_AHB1_DMA1)
N
N# define INDX_RCC_AHB1_CCM      20                    // STM32F4xx only (core coupled memory)
N# define MASK_RCC_AHB1_CCM      (WORD)REG_BITMASK(RCC_AHB1_CCM)
N
N# define INDX_RCC_AHB1_TCM      20                    // STM32F7xx only (tightly coupled memory)
N# define MASK_RCC_AHB1_TCM      (WORD)REG_BITMASK(RCC_AHB1_TCM)
N
N# define INDX_RCC_AHB1_BKPSRAM  18
N# define MASK_RCC_AHB1_BKPSRAM  (WORD)REG_BITMASK(RCC_AHB1_BKPSRAM)
N
N# define INDX_RCC_AHB1_CRC      12
N# define MASK_RCC_AHB1_CRC      (WORD)REG_BITMASK(RCC_AHB1_CRC)
N
N# define INDX_RCC_AHB1_GPIOK    10
N# define MASK_RCC_AHB1_GPIOK    (WORD)REG_BITMASK(RCC_AHB1_GPIOK)
N
N# define INDX_RCC_AHB1_GPIOJ    9
N# define MASK_RCC_AHB1_GPIOJ    (WORD)REG_BITMASK(RCC_AHB1_GPIOJ)
N
N# define INDX_RCC_AHB1_GPIOI    8
N# define MASK_RCC_AHB1_GPIOI    (WORD)REG_BITMASK(RCC_AHB1_GPIOI)
N
N# define INDX_RCC_AHB1_GPIOH    7
N# define MASK_RCC_AHB1_GPIOH    (WORD)REG_BITMASK(RCC_AHB1_GPIOH)
N
N# define INDX_RCC_AHB1_GPIOG    6
N# define MASK_RCC_AHB1_GPIOG    (WORD)REG_BITMASK(RCC_AHB1_GPIOG)
N
N# define INDX_RCC_AHB1_GPIOF    5
N# define MASK_RCC_AHB1_GPIOF    (WORD)REG_BITMASK(RCC_AHB1_GPIOF)
N
N# define INDX_RCC_AHB1_GPIOE    4
N# define MASK_RCC_AHB1_GPIOE    (WORD)REG_BITMASK(RCC_AHB1_GPIOE)
N
N# define INDX_RCC_AHB1_GPIOD    3
N# define MASK_RCC_AHB1_GPIOD    (WORD)REG_BITMASK(RCC_AHB1_GPIOD)
N
N# define INDX_RCC_AHB1_GPIOC    2
N# define MASK_RCC_AHB1_GPIOC    (WORD)REG_BITMASK(RCC_AHB1_GPIOC)
N
N# define INDX_RCC_AHB1_GPIOB    1
N# define MASK_RCC_AHB1_GPIOB    (WORD)REG_BITMASK(RCC_AHB1_GPIOB)
N
N# define INDX_RCC_AHB1_GPIOA    0
N# define MASK_RCC_AHB1_GPIOA    (WORD)REG_BITMASK(RCC_AHB1_GPIOA)
N
N# define INDX_RCC_AHB2_RNG      6
N# define MASK_RCC_AHB2_RNG      (WORD)REG_BITMASK(RCC_AHB2_RNG)
N
N# define INDX_RCC_AHB2_DCMI     0
N# define MASK_RCC_AHB2_DCMI     (WORD)REG_BITMASK(RCC_AHB2_DCMI)
N
N# define INDX_RCC_AHB3_FMC      0
N# define MASK_RCC_AHB3_FCM      (WORD)REG_BITMASK(RCC_AHB3_FMC)
N
N#endif
L 242 ".\Inc\Drivers\RB_RCC.h" 2
N
N# define PERIPHERY_INDX_POS     8U
N  
N# define PERIPHERY_APB_1        (0 << PERIPHERY_INDX_POS)
N# define PERIPHERY_APB_2        (1 << PERIPHERY_INDX_POS)
N
N# define PERIPHERY_APB_TIM02    (PERIPHERY_APB_1 |  0U)
N# define PERIPHERY_APB_TIM03    (PERIPHERY_APB_1 |  1U)
N# define PERIPHERY_APB_TIM04    (PERIPHERY_APB_1 |  2U)
N# define PERIPHERY_APB_TIM05    (PERIPHERY_APB_1 |  3U)
N# define PERIPHERY_APB_TIM06    (PERIPHERY_APB_1 |  4U)
N# define PERIPHERY_APB_TIM07    (PERIPHERY_APB_1 |  5U)
N# define PERIPHERY_APB_TIM12    (PERIPHERY_APB_1 |  6U)
N# define PERIPHERY_APB_TIM13    (PERIPHERY_APB_1 |  7U)
N# define PERIPHERY_APB_TIM14    (PERIPHERY_APB_1 |  8U)
N# define PERIPHERY_APB_SPI2     (PERIPHERY_APB_1 | 14U)
N# define PERIPHERY_APB_SPI3     (PERIPHERY_APB_1 | 15U)
N# define PERIPHERY_APB_USART2   (PERIPHERY_APB_1 | 17U)
N# define PERIPHERY_APB_USART3   (PERIPHERY_APB_1 | 18U)
N# define PERIPHERY_APB_UART4    (PERIPHERY_APB_1 | 19U)
N# define PERIPHERY_APB_UART5    (PERIPHERY_APB_1 | 20U)
N# define PERIPHERY_APB_I2C1     (PERIPHERY_APB_1 | 21U)
N# define PERIPHERY_APB_I2C2     (PERIPHERY_APB_1 | 22U)
N# define PERIPHERY_APB_I2C3     (PERIPHERY_APB_1 | 23U)
N# define PERIPHERY_APB_CAN1     (PERIPHERY_APB_1 | 25U)
N# define PERIPHERY_APB_CAN2     (PERIPHERY_APB_1 | 26U)
N# define PERIPHERY_APB_PWR      (PERIPHERY_APB_1 | 28U)
N# define PERIPHERY_APB_DAC      (PERIPHERY_APB_1 | 29U)
N
N# define PERIPHERY_APB_TIM01    (PERIPHERY_APB_2 |  0U)
N# define PERIPHERY_APB_TIM08    (PERIPHERY_APB_2 |  1U)
N# define PERIPHERY_APB_USART1   (PERIPHERY_APB_2 |  4U)
N# define PERIPHERY_APB_USART6   (PERIPHERY_APB_2 |  5U)
N# define PERIPHERY_APB_ADC1     (PERIPHERY_APB_2 |  8U)
N# define PERIPHERY_APB_ADC2     (PERIPHERY_APB_2 |  9U)
N# define PERIPHERY_APB_ASC3     (PERIPHERY_APB_2 | 10U)
N# define PERIPHERY_APB_SDIO     (PERIPHERY_APB_2 | 11U)
N# define PERIPHERY_APB_SPI1     (PERIPHERY_APB_2 | 12U)
N# define PERIPHERY_APB_SPI4     (PERIPHERY_APB_2 | 13U)
N# define PERIPHERY_APB_SYSCFG   (PERIPHERY_APB_2 | 14U)
N# define PERIPHERY_APB_TIM09    (PERIPHERY_APB_2 | 16U)
N# define PERIPHERY_APB_TIM10    (PERIPHERY_APB_2 | 17U)
N# define PERIPHERY_APB_TIM11    (PERIPHERY_APB_2 | 18U)
N# define PERIPHERY_APB_SPI5     (PERIPHERY_APB_2 | 20U)
N# define PERIPHERY_APB_SPI6     (PERIPHERY_APB_2 | 21U)
N# define PERIPHERY_APB_SAI1     (PERIPHERY_APB_2 | 22U)
N# define PERIPHERY_APB_LTDC     (PERIPHERY_APB_2 | 26U)
N
N# define PERIPHERY_AHB_1        (0 << PERIPHERY_INDX_POS)
N# define PERIPHERY_AHB_2        (1 << PERIPHERY_INDX_POS)
N# define PERIPHERY_AHB_3        (2 << PERIPHERY_INDX_POS)
N                                                                
N# define PERIPHERY_AHB_CCM      (PERIPHERY_AHB_1 | INDX_RCC_AHB1_CCM)
N# define PERIPHERY_AHB_TCM      (PERIPHERY_AHB_1 | INDX_RCC_AHB1_TCM)
N# define PERIPHERY_AHB_DMA2     (PERIPHERY_AHB_1 | INDX_RCC_AHB1_DMA2)
N# define PERIPHERY_AHB_DMA1     (PERIPHERY_AHB_1 | INDX_RCC_AHB1_DMA1)
N# define PERIPHERY_AHB_BKPSRAM  (PERIPHERY_AHB_1 | INDX_RCC_AHB1_BKPSRAM)
N# define PERIPHERY_AHB_CRC      (PERIPHERY_AHB_1 | INDX_RCC_AHB1_CRC)
N# define PERIPHERY_AHB_GPIOK    (PERIPHERY_AHB_1 | INDX_RCC_AHB1_GPIOK)
N# define PERIPHERY_AHB_GPIOJ    (PERIPHERY_AHB_1 | INDX_RCC_AHB1_GPIOJ)
N# define PERIPHERY_AHB_GPIOI    (PERIPHERY_AHB_1 | INDX_RCC_AHB1_GPIOI)
N# define PERIPHERY_AHB_GPIOH    (PERIPHERY_AHB_1 | INDX_RCC_AHB1_GPIOH)
N# define PERIPHERY_AHB_GPIOG    (PERIPHERY_AHB_1 | INDX_RCC_AHB1_GPIOG)
N# define PERIPHERY_AHB_GPIOF    (PERIPHERY_AHB_1 | INDX_RCC_AHB1_GPIOF)
N# define PERIPHERY_AHB_GPIOE    (PERIPHERY_AHB_1 | INDX_RCC_AHB1_GPIOE)
N# define PERIPHERY_AHB_GPIOD    (PERIPHERY_AHB_1 | INDX_RCC_AHB1_GPIOD)
N# define PERIPHERY_AHB_GPIOC    (PERIPHERY_AHB_1 | INDX_RCC_AHB1_GPIOC)
N# define PERIPHERY_AHB_GPIOB    (PERIPHERY_AHB_1 | INDX_RCC_AHB1_GPIOB)
N# define PERIPHERY_AHB_GPIOA    (PERIPHERY_AHB_1 | INDX_RCC_AHB1_GPIOA)
N# define PERIPHERY_AHB_DMA_2D   (PERIPHERY_AHB_1 | INDX_RCC_AHB1_DMA_2D)
N# define PERIPHERY_AHB_ETHMAC   (PERIPHERY_AHB_1 | INDX_RCC_AHB1_ETHMAC)
N# define PERIPHERY_AHB_ETHTX    (PERIPHERY_AHB_1 | INDX_RCC_AHB1_ETHTX)
N# define PERIPHERY_AHB_ETHRX    (PERIPHERY_AHB_1 | INDX_RCC_AHB1_ETHRX)
N# define PERIPHERY_AHB_ETHPTP   (PERIPHERY_AHB_1 | INDX_RCC_AHB1_ETHPTP)
N
N# define PERIPHERY_AHB_RNG      (PERIPHERY_AHB_2 | INDX_RCC_AHB2_RNG)
N# define PERIPHERY_AHB_DCMI     (PERIPHERY_AHB_2 | INDX_RCC_AHB2_DCMI)
N
N# define PERIPHERY_AHB_FMC      (PERIPHERY_AHB_3 | INDX_RCC_AHB3_FMC)
N
N# include <Atomic.h>
L 1 ".\Inc\Cortex\Atomic.h" 1
N//
N// Atomic.h
N//
N
N/// \file Atomic.h
N/// Klassen für atomare (thread/async-sichere) Operationen.
N
N#ifndef guard_ATOMIC_H
N# define guard_ATOMIC_H
N
N# include <Compiler.h>
L 1 ".\Inc\Compiler.h" 1
N//
N// Compiler.h
N//
N
N/// \file Compiler.h
N/// Compiler-spezifische Definitions, Macros und Funktionen.
N/// Um die Quellen auch zu Testzwecken auch mit anderen Compilern (z.B. MSC) übersetzen zu können, müssten in dieser Datei
N/// mittels bedingter Kompilierung verschiedene Makros für die unterschiedlichen Compiler definiert werden.
N
N#if ! defined(guard_COMPILER_H) && defined(__arm__)
X#if ! 1L && 1L
S# define guard_COMPILER_H
S
S# if ! defined(__cplusplus)
S#  error C++ only!
S# endif
S
S# if   defined(_DEBUG)  && ! defined(DEBUG)
S#  define DEBUG
S# endif
S
S# if   defined(RELEASE) &&   defined(DEBUG)
S#  error You cannot define RELEASE and DEBUG at the same time
S# endif
S# if ! defined(RELEASE) && ! defined(DEBUG)
S#  error You must define ether RELEASE or DEBUG
S# endif
S
S# include <stdint.h>
S# include <stdbool.h>
S
S# define BYTE                   uint8_t               ///< Byte-Datentyp (8 Bits).
S# define WORD                   uint32_t              ///< Wort-Datentyp (nach ARM-Konvention 32 Bits, d.h. 4 Bytes).
S# define HWRD                   uint16_t              ///< Halbwort-Datentyp (nach ARM-Konvention 16 Bits, d.h. 2 Bytes).
S# define DWRD                   uint64_t              ///< Doppelwort-Datentyp (nach ARM-Konvention 8 Bytes).
S
S// Nomenklatur <s>INT<nn>:
S// <s> = U bzw. S für unsigned bzw. signed
S// <nn> = 08, 12, 32, 64 für 8 bis 64 Bits
S
S# define UINT64                 uint64_t              ///< 8 byte unsigned int.
S# define SINT64                 int64_t               ///< 8 byte signed int.
S
S# define UINT32                 uint32_t              ///< 4 byte unsigned int.
S# define SINT32                 int32_t               ///< 4 byte signed int.
S
S# define UINT16                 uint16_t              ///< 2 byte unsigned int.
S# define SINT16                 int16_t               ///< 2 byte signed int.
S
S# define UINT08                 uint8_t               ///< Single byte unsigned int.
S# define SINT08                 int8_t                ///< Single byte signed int.
S
S# include <stddef.h>
S
S# if __ARMCC_VERSION >= 6000000
S#  pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
S#  pragma clang diagnostic ignored "-Wnested-anon-types"
S#  pragma clang diagnostic ignored "-Wc++17-compat-mangling"
S#  pragma clang diagnostic ignored "-Wc++98-compat-pedantic"
S#  pragma clang diagnostic ignored "-Wc++98-compat"
S#  pragma clang diagnostic ignored "-Wgcc-compat"
S
S#  define IMPORT(X)             asm(".global " #X);
S
Sstatic __attribute__((always_inline)) inline void ___barrier(void) { asm volatile("" ::: "memory", "cc"); }
S
S#  define SCHEDULE_BARRIER      ___barrier
S#  define FORCE_STORES          ___barrier
S#  define MEMORY_CHANGED        ___barrier
S
S#  define __weak                __attribute__((weak))
S#  define __svc(...)
S#  define __align(x)            __attribute__((aligned(x)))
S
S#  define __clrex               __builtin_arm_clrex
S#  define __dmb                 __builtin_arm_dmb
S#  define __dsb                 __builtin_arm_dsb
S#  define __isb                 __builtin_arm_isb
S#  define __wfi                 __builtin_arm_wfi
S#  define __wfe                 __builtin_arm_wfe
S#  define __rbit                __builtin_arm_rbit
S#  define __rev                 __builtin_bswap32
S#  define __clz                 __builtin_clz
S
S#  define ARM_RSR(NAME)         __builtin_arm_rsr(#NAME)
S#  define ARM_WSR(NAME, VALUE)  __builtin_arm_wsr(#NAME, VALUE)
S
S#  define DEFINE_ARM_RSR(NAME)  inline WORD ARM_RSR_ ## NAME()                 noexcept { return ARM_RSR(NAME); }
S#  define DEFINE_ARM_WSR(NAME)  inline void ARM_WSR_ ## NAME(WORD const value) noexcept { ARM_WSR(NAME, value); }
S
S#  define OFFSET_OF(S, M)       __builtin_offsetof(S, M)
S
S#  define BREAKPOINT(v)         asm volatile("bkpt %0" :: "i"(v))
S
S#  define WRITEONLY             /// not implemented
S#  define READONLY              const
S
S#  define __AT(ADDR)            __attribute__((section(".ARM.__at_" #ADDR)))
S#  define LOCATE_AT(ADDR)       __AT(ADDR)
S
S#  define FORCE_INLINE          __attribute__((always_inline)) inline
S
S#  define FILE                  __FILE__
S#  define FUNC                  __FUNCTION__
S#  define LINE                  __LINE__
S# else
S#  pragma anon_unions
S#  define PRAGMA(X)             _Pragma(#X)
S
S#  define IMPORT(X)             PRAGMA(import(X))
S
S#  define SCHEDULE_BARRIER()    __schedule_barrier() ///< Compiler-spezifische Pseudo-Anweisung, um die compiler-bedingte Umsortierung von Befehlen über diese Grenze hinaus zu unterbinden. 
S#  define FORCE_STORES()        __force_stores()
S#  define MEMORY_CHANGED()      __memory_changed()
S
S#  define DEFINE_ARM_RSR(NAME)  inline WORD ARM_RSR_ ## NAME()                 noexcept { register WORD NAME __asm(#NAME); return NAME; }
S#  define DEFINE_ARM_WSR(NAME)  inline void ARM_WSR_ ## NAME(WORD const value) noexcept { register WORD NAME __asm(#NAME); NAME = value; }
S
S#  define ARM_RSR(NAME)         ARM_RSR_ ## NAME()
S#  define ARM_WSR(NAME, VALUE)  ARM_WSR_ ## NAME(VALUE)
S
S#  define OFFSET_OF(S, M)       offsetof(S, M)
S
S#  define BREAKPOINT(n)         __breakpoint(n)
S
S#  define WRITEONLY             __writeonly
S#  define READONLY              const
S
S#  define LOCATE_AT(ADDR)       __attribute__((at(ADDR)))
S
S#  define FORCE_INLINE          __forceinline
S
S#  define FILE                  __MODULE__            ///< Name der aktuellen Datei.
S
S#  define FUNC                  __PRETTY_FUNCTION__   ///< Name der aktuellen Funktion.
S#  define LINE                  __LINE__              ///< Aktuelle Zeilennummer.
S# endif
S
Snamespace std { using nullptr_t = decltype(nullptr); }
S
S# if defined(DEBUG) && ! defined(NO_BREAK)
S#  define DEBUG_BREAK(n)        BREAKPOINT(n)
S# else
S#  define DEBUG_BREAK(n)
S# endif
S
S# define __CONCAT(A, B)         A##B
S# define CONCAT(A, B)           __CONCAT(A, B)
S
Stemplate<typename TYPE, unsigned DIM> constexpr unsigned ArrayDim(TYPE const (&)[DIM]) noexcept { return DIM; }
Stemplate<typename TYPE, unsigned DIM> constexpr unsigned ArrayMax(TYPE const (&)[DIM]) noexcept { return DIM - 1U; }
S
Stemplate<typename TYPE, unsigned H, unsigned W> constexpr unsigned MatrixRows(TYPE const (&)[H][W]) noexcept { return H; }
Stemplate<typename TYPE, unsigned H, unsigned W> constexpr unsigned MatrixCols(TYPE const (&)[H][W]) noexcept { return W; }
S
S/// Achtung: Die obigen Varianten zur Bestimmung von Feld oder Matrixdimensionen funktionieren nicht, wenn das Feld
S/// nicht-statische Member-Variable in einer Klasse ist, weil der this-Zeiger nicht constexpr ist.
S
Sinline void * operator new   (unsigned, void * const p) noexcept { return p; }
Sinline void   operator delete(void *, void *) noexcept { }
S
N#endif
N
L 12 ".\Inc\Cortex\Atomic.h" 2
N# include <Cortex.h>
L 1 ".\Inc\Cortex\Cortex.h" 1
N//
N// Cortex.H
N//
N
N/// \file Cortex.h
N/// %Cortex-spezifische Funktionen.
N
N#ifndef guard_CORTEX_H
N# define guard_CORTEX_H
N
N# include <Compiler.h>
L 1 ".\Inc\Compiler.h" 1
N//
N// Compiler.h
N//
N
N/// \file Compiler.h
N/// Compiler-spezifische Definitions, Macros und Funktionen.
N/// Um die Quellen auch zu Testzwecken auch mit anderen Compilern (z.B. MSC) übersetzen zu können, müssten in dieser Datei
N/// mittels bedingter Kompilierung verschiedene Makros für die unterschiedlichen Compiler definiert werden.
N
N#if ! defined(guard_COMPILER_H) && defined(__arm__)
X#if ! 1L && 1L
S# define guard_COMPILER_H
S
S# if ! defined(__cplusplus)
S#  error C++ only!
S# endif
S
S# if   defined(_DEBUG)  && ! defined(DEBUG)
S#  define DEBUG
S# endif
S
S# if   defined(RELEASE) &&   defined(DEBUG)
S#  error You cannot define RELEASE and DEBUG at the same time
S# endif
S# if ! defined(RELEASE) && ! defined(DEBUG)
S#  error You must define ether RELEASE or DEBUG
S# endif
S
S# include <stdint.h>
S# include <stdbool.h>
S
S# define BYTE                   uint8_t               ///< Byte-Datentyp (8 Bits).
S# define WORD                   uint32_t              ///< Wort-Datentyp (nach ARM-Konvention 32 Bits, d.h. 4 Bytes).
S# define HWRD                   uint16_t              ///< Halbwort-Datentyp (nach ARM-Konvention 16 Bits, d.h. 2 Bytes).
S# define DWRD                   uint64_t              ///< Doppelwort-Datentyp (nach ARM-Konvention 8 Bytes).
S
S// Nomenklatur <s>INT<nn>:
S// <s> = U bzw. S für unsigned bzw. signed
S// <nn> = 08, 12, 32, 64 für 8 bis 64 Bits
S
S# define UINT64                 uint64_t              ///< 8 byte unsigned int.
S# define SINT64                 int64_t               ///< 8 byte signed int.
S
S# define UINT32                 uint32_t              ///< 4 byte unsigned int.
S# define SINT32                 int32_t               ///< 4 byte signed int.
S
S# define UINT16                 uint16_t              ///< 2 byte unsigned int.
S# define SINT16                 int16_t               ///< 2 byte signed int.
S
S# define UINT08                 uint8_t               ///< Single byte unsigned int.
S# define SINT08                 int8_t                ///< Single byte signed int.
S
S# include <stddef.h>
S
S# if __ARMCC_VERSION >= 6000000
S#  pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
S#  pragma clang diagnostic ignored "-Wnested-anon-types"
S#  pragma clang diagnostic ignored "-Wc++17-compat-mangling"
S#  pragma clang diagnostic ignored "-Wc++98-compat-pedantic"
S#  pragma clang diagnostic ignored "-Wc++98-compat"
S#  pragma clang diagnostic ignored "-Wgcc-compat"
S
S#  define IMPORT(X)             asm(".global " #X);
S
Sstatic __attribute__((always_inline)) inline void ___barrier(void) { asm volatile("" ::: "memory", "cc"); }
S
S#  define SCHEDULE_BARRIER      ___barrier
S#  define FORCE_STORES          ___barrier
S#  define MEMORY_CHANGED        ___barrier
S
S#  define __weak                __attribute__((weak))
S#  define __svc(...)
S#  define __align(x)            __attribute__((aligned(x)))
S
S#  define __clrex               __builtin_arm_clrex
S#  define __dmb                 __builtin_arm_dmb
S#  define __dsb                 __builtin_arm_dsb
S#  define __isb                 __builtin_arm_isb
S#  define __wfi                 __builtin_arm_wfi
S#  define __wfe                 __builtin_arm_wfe
S#  define __rbit                __builtin_arm_rbit
S#  define __rev                 __builtin_bswap32
S#  define __clz                 __builtin_clz
S
S#  define ARM_RSR(NAME)         __builtin_arm_rsr(#NAME)
S#  define ARM_WSR(NAME, VALUE)  __builtin_arm_wsr(#NAME, VALUE)
S
S#  define DEFINE_ARM_RSR(NAME)  inline WORD ARM_RSR_ ## NAME()                 noexcept { return ARM_RSR(NAME); }
S#  define DEFINE_ARM_WSR(NAME)  inline void ARM_WSR_ ## NAME(WORD const value) noexcept { ARM_WSR(NAME, value); }
S
S#  define OFFSET_OF(S, M)       __builtin_offsetof(S, M)
S
S#  define BREAKPOINT(v)         asm volatile("bkpt %0" :: "i"(v))
S
S#  define WRITEONLY             /// not implemented
S#  define READONLY              const
S
S#  define __AT(ADDR)            __attribute__((section(".ARM.__at_" #ADDR)))
S#  define LOCATE_AT(ADDR)       __AT(ADDR)
S
S#  define FORCE_INLINE          __attribute__((always_inline)) inline
S
S#  define FILE                  __FILE__
S#  define FUNC                  __FUNCTION__
S#  define LINE                  __LINE__
S# else
S#  pragma anon_unions
S#  define PRAGMA(X)             _Pragma(#X)
S
S#  define IMPORT(X)             PRAGMA(import(X))
S
S#  define SCHEDULE_BARRIER()    __schedule_barrier() ///< Compiler-spezifische Pseudo-Anweisung, um die compiler-bedingte Umsortierung von Befehlen über diese Grenze hinaus zu unterbinden. 
S#  define FORCE_STORES()        __force_stores()
S#  define MEMORY_CHANGED()      __memory_changed()
S
S#  define DEFINE_ARM_RSR(NAME)  inline WORD ARM_RSR_ ## NAME()                 noexcept { register WORD NAME __asm(#NAME); return NAME; }
S#  define DEFINE_ARM_WSR(NAME)  inline void ARM_WSR_ ## NAME(WORD const value) noexcept { register WORD NAME __asm(#NAME); NAME = value; }
S
S#  define ARM_RSR(NAME)         ARM_RSR_ ## NAME()
S#  define ARM_WSR(NAME, VALUE)  ARM_WSR_ ## NAME(VALUE)
S
S#  define OFFSET_OF(S, M)       offsetof(S, M)
S
S#  define BREAKPOINT(n)         __breakpoint(n)
S
S#  define WRITEONLY             __writeonly
S#  define READONLY              const
S
S#  define LOCATE_AT(ADDR)       __attribute__((at(ADDR)))
S
S#  define FORCE_INLINE          __forceinline
S
S#  define FILE                  __MODULE__            ///< Name der aktuellen Datei.
S
S#  define FUNC                  __PRETTY_FUNCTION__   ///< Name der aktuellen Funktion.
S#  define LINE                  __LINE__              ///< Aktuelle Zeilennummer.
S# endif
S
Snamespace std { using nullptr_t = decltype(nullptr); }
S
S# if defined(DEBUG) && ! defined(NO_BREAK)
S#  define DEBUG_BREAK(n)        BREAKPOINT(n)
S# else
S#  define DEBUG_BREAK(n)
S# endif
S
S# define __CONCAT(A, B)         A##B
S# define CONCAT(A, B)           __CONCAT(A, B)
S
Stemplate<typename TYPE, unsigned DIM> constexpr unsigned ArrayDim(TYPE const (&)[DIM]) noexcept { return DIM; }
Stemplate<typename TYPE, unsigned DIM> constexpr unsigned ArrayMax(TYPE const (&)[DIM]) noexcept { return DIM - 1U; }
S
Stemplate<typename TYPE, unsigned H, unsigned W> constexpr unsigned MatrixRows(TYPE const (&)[H][W]) noexcept { return H; }
Stemplate<typename TYPE, unsigned H, unsigned W> constexpr unsigned MatrixCols(TYPE const (&)[H][W]) noexcept { return W; }
S
S/// Achtung: Die obigen Varianten zur Bestimmung von Feld oder Matrixdimensionen funktionieren nicht, wenn das Feld
S/// nicht-statische Member-Variable in einer Klasse ist, weil der this-Zeiger nicht constexpr ist.
S
Sinline void * operator new   (unsigned, void * const p) noexcept { return p; }
Sinline void   operator delete(void *, void *) noexcept { }
S
N#endif
N
L 12 ".\Inc\Cortex\Cortex.h" 2
N
Nextern "C" WORD _LdrExW(void const volatile * p            );
Xextern "C" uint32_t _LdrExW(void const volatile * p            );
Nextern "C" HWRD _LdrExH(void const volatile * p            );
Xextern "C" uint16_t _LdrExH(void const volatile * p            );
Nextern "C" BYTE _LdrExB(void const volatile * p            );
Xextern "C" uint8_t _LdrExB(void const volatile * p            );
N  
Nextern "C" WORD _StrExW(void       volatile * p, WORD value);
Xextern "C" uint32_t _StrExW(void       volatile * p, uint32_t value);
Nextern "C" WORD _StrExH(void       volatile * p, HWRD value); 
Xextern "C" uint32_t _StrExH(void       volatile * p, uint16_t value); 
Nextern "C" WORD _StrExB(void       volatile * p, BYTE value);
Xextern "C" uint32_t _StrExB(void       volatile * p, uint8_t value);
N
N# if   CORTEX_M == 4
X# if   4 == 4
N#  define IRAM2_START             0x10000000U // CCM
N#  define IRAM2_LENGTH            0x00010000U
N#  define IRAM1_START             0x20000000U
N#  define IRAM1_LENGTH            0x00020000U
N#  define IROM1_START             0x08000000U
N#  define IROM1_LENGTH            0x00100000U
N# elif CORTEX_M == 7
S#  define IRAM2_START             0x20000000U // TCM
S#  define IRAM2_LENGTH            0x00010000U
S#  define IRAM1_START             (IRAM2_START + IRAM2_LENGTH)
S#  define IRAM1_LENGTH            0x00040000U
S#  define IROM1_START             0x08000000U
S#  define IROM1_LENGTH            0x00100000U
S# else
S#  error Missing CORTEX_M definition (must be 4 or 7)
N# endif
N
NDEFINE_ARM_RSR(control)
Xinline uint32_t ARM_RSR_control() noexcept { register uint32_t control __asm("control"); return control; }
NDEFINE_ARM_WSR(control)
Xinline void ARM_WSR_control(uint32_t const value) noexcept { register uint32_t control __asm("control"); control = value; }
NDEFINE_ARM_RSR(basepri)
Xinline uint32_t ARM_RSR_basepri() noexcept { register uint32_t basepri __asm("basepri"); return basepri; }
NDEFINE_ARM_WSR(basepri)
Xinline void ARM_WSR_basepri(uint32_t const value) noexcept { register uint32_t basepri __asm("basepri"); basepri = value; }
NDEFINE_ARM_RSR(primask)
Xinline uint32_t ARM_RSR_primask() noexcept { register uint32_t primask __asm("primask"); return primask; }
NDEFINE_ARM_WSR(primask)
Xinline void ARM_WSR_primask(uint32_t const value) noexcept { register uint32_t primask __asm("primask"); primask = value; }
NDEFINE_ARM_RSR(faultmask)
Xinline uint32_t ARM_RSR_faultmask() noexcept { register uint32_t faultmask __asm("faultmask"); return faultmask; }
NDEFINE_ARM_WSR(faultmask)
Xinline void ARM_WSR_faultmask(uint32_t const value) noexcept { register uint32_t faultmask __asm("faultmask"); faultmask = value; }
N
NDEFINE_ARM_RSR(psp)
Xinline uint32_t ARM_RSR_psp() noexcept { register uint32_t psp __asm("psp"); return psp; }
NDEFINE_ARM_WSR(psp)
Xinline void ARM_WSR_psp(uint32_t const value) noexcept { register uint32_t psp __asm("psp"); psp = value; }
NDEFINE_ARM_RSR(msp)
Xinline uint32_t ARM_RSR_msp() noexcept { register uint32_t msp __asm("msp"); return msp; }
NDEFINE_ARM_WSR(msp)
Xinline void ARM_WSR_msp(uint32_t const value) noexcept { register uint32_t msp __asm("msp"); msp = value; }
N
NDEFINE_ARM_RSR(epsr)
Xinline uint32_t ARM_RSR_epsr() noexcept { register uint32_t epsr __asm("epsr"); return epsr; }
NDEFINE_ARM_RSR(apsr)
Xinline uint32_t ARM_RSR_apsr() noexcept { register uint32_t apsr __asm("apsr"); return apsr; }
NDEFINE_ARM_RSR(ipsr)
Xinline uint32_t ARM_RSR_ipsr() noexcept { register uint32_t ipsr __asm("ipsr"); return ipsr; }
N
N/// Spezifische Funktionen des %Cortex(-M3/M4/M7) bzw. des zugehörigen aktuellen Befehlssatzes (ARMv7-M).
Nnamespace Cortex 
N{
N  template<unsigned SIZE> struct ArmExclusive;
N
N  template<> struct ArmExclusive<sizeof(WORD)> final
X  template<> struct ArmExclusive<sizeof(uint32_t)> final
N  { 
N    ArmExclusive() = delete;
N    ArmExclusive(ArmExclusive const &) = delete;
N    ArmExclusive(ArmExclusive      &&) = delete;
N    
N    static WORD LdrEx(WORD const volatile & data)                   noexcept { return _LdrExW(&data); }
X    static uint32_t LdrEx(uint32_t const volatile & data)                   noexcept { return _LdrExW(&data); }
N    static bool StrEx(WORD       volatile & data, WORD const value) noexcept { return _StrExW(&data, value) != 0U; }
X    static bool StrEx(uint32_t       volatile & data, uint32_t const value) noexcept { return _StrExW(&data, value) != 0U; }
N
N    template<typename TYPE>
N    static TYPE * LdrEx(TYPE * const volatile & p)                  noexcept { return (TYPE *)_LdrExW(&p); }
N
N    template<typename TYPE>
N    static bool   StrEx(TYPE *       volatile & p, TYPE * const q)  noexcept { return _StrExW(&p, (WORD)q) != 0U; }
X    static bool   StrEx(TYPE *       volatile & p, TYPE * const q)  noexcept { return _StrExW(&p, (uint32_t)q) != 0U; }
N  };
N
N  template<> struct ArmExclusive<sizeof(HWRD)> final
X  template<> struct ArmExclusive<sizeof(uint16_t)> final
N  { 
N    ArmExclusive() = delete;
N    ArmExclusive(ArmExclusive const &) = delete;
N    ArmExclusive(ArmExclusive      &&) = delete;
N    
N    static HWRD LdrEx(HWRD const volatile & data)                   noexcept { return _LdrExH(&data); }
X    static uint16_t LdrEx(uint16_t const volatile & data)                   noexcept { return _LdrExH(&data); }
N    static bool StrEx(HWRD       volatile & data, HWRD const value) noexcept { return _StrExH(&data, value) != 0U; }
X    static bool StrEx(uint16_t       volatile & data, uint16_t const value) noexcept { return _StrExH(&data, value) != 0U; }
N  };
N
N  template<> struct ArmExclusive<sizeof(BYTE)> final
X  template<> struct ArmExclusive<sizeof(uint8_t)> final
N  { 
N    ArmExclusive() = delete;
N    ArmExclusive(ArmExclusive const &) = delete;
N    ArmExclusive(ArmExclusive      &&) = delete;
N    
N    static BYTE LdrEx(BYTE const volatile & data)                   noexcept { return _LdrExB(&data); }
X    static uint8_t LdrEx(uint8_t const volatile & data)                   noexcept { return _LdrExB(&data); }
N    static bool StrEx(BYTE       volatile & data, BYTE const value) noexcept { return _StrExB(&data, value) != 0U; }
X    static bool StrEx(uint8_t       volatile & data, uint8_t const value) noexcept { return _StrExB(&data, value) != 0U; }
N  };
N
N  // This are the (core) numbers of the current exception, see Cortex-M3/M4/M7 PSR
N
N  constexpr unsigned const isrNum_THREAD_MODE =  0U; ///< ISR-Nummer in PSR für Thread-Modus
N  constexpr unsigned const isrNum_RESET       =  1U;
N  constexpr unsigned const isrNum_NMI         =  2U;
N  constexpr unsigned const isrNum_HRD_FAULT   =  3U; ///< ISR-Nummer in PSR für Hard-Fault
N  constexpr unsigned const isrNum_MEM_FAULT   =  4U; ///< ISR-Nummer in PSR für Memory-Fault
N  constexpr unsigned const isrNum_BUS_FAULT   =  5U; ///< ISR-Nummer in PSR für Bus-Fault
N  constexpr unsigned const isrNum_USG_FAULT   =  6U; ///< ISR-Nummer in PSR für Usage-Fault
N  constexpr unsigned const isrNum_SVC         = 11U; ///< ISR-Nummer in PSR für SVC
N  constexpr unsigned const isrNum_DEBMON      = 12U; 
N  constexpr unsigned const isrNum_PSV         = 14U; ///< ISR-Nummer in PSR für PSV
N  constexpr unsigned const isrNum_STK         = 15U; ///< ISR-Nummer in PSR für STK (System tick)
N  constexpr unsigned const isrNum_EXTERN0     = 16U; // ab 16 beginnen die externen ISRs
N
N  FORCE_INLINE constexpr unsigned isrNum_EXTERN(unsigned const n) noexcept { return n + isrNum_EXTERN0; }
X  __forceinline constexpr unsigned isrNum_EXTERN(unsigned const n) noexcept { return n + isrNum_EXTERN0; }
N
N  constexpr WORD const excReturnNonFp = 0xFFFFFFFDU; ///< Exception return code (thumb mode, return to thread mode, use PSP after return, non-FP state).
X  constexpr uint32_t const excReturnNonFp = 0xFFFFFFFDU; 
N  constexpr WORD const excReturnUseFp = 0xFFFFFFEDU; ///< Exception return code (thumb mode, return to thread mode, use PSP after return, use FP state).
X  constexpr uint32_t const excReturnUseFp = 0xFFFFFFEDU; 
N
N  [[noreturn]] void Reset() noexcept;
N
N  [[noreturn]] void Reset_privileged() noexcept;
N
N  FORCE_INLINE void DMB() noexcept { SCHEDULE_BARRIER(); __dmb(0xF); SCHEDULE_BARRIER(); }  
X  __forceinline void DMB() noexcept { __schedule_barrier(); __dmb(0xF); __schedule_barrier(); }  
N  FORCE_INLINE void DSB() noexcept { SCHEDULE_BARRIER(); __dsb(0xF); SCHEDULE_BARRIER(); }
X  __forceinline void DSB() noexcept { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); }
N  FORCE_INLINE void ISB() noexcept { SCHEDULE_BARRIER(); __isb(0xF); SCHEDULE_BARRIER(); }
X  __forceinline void ISB() noexcept { __schedule_barrier(); __isb(0xF); __schedule_barrier(); }
N
N  FORCE_INLINE WORD RBIT(WORD w) noexcept { return __rbit(w); }
X  __forceinline uint32_t RBIT(uint32_t w) noexcept { return __rbit(w); }
N  
N  FORCE_INLINE WORD REV(WORD w) noexcept { return __rev(w); }
X  __forceinline uint32_t REV(uint32_t w) noexcept { return __rev(w); }
N  
N  FORCE_INLINE void WFI() noexcept { __wfi(); }
X  __forceinline void WFI() noexcept { __wfi(); }
N  FORCE_INLINE void WFE() noexcept { __wfe(); }
X  __forceinline void WFE() noexcept { __wfe(); }
N
N  /// Anzahl der (linksseitig) führenden 0-Bits (beginnend bei Bit 31) bestimmen.
N  /// \param value ist der zu analysierende Wert.
N  /// \return Anzahl der 'linksbündigen' 0-en (0 bis 32)
N  FORCE_INLINE int CLZ(WORD const value) { return __clz( value); }
X  __forceinline int CLZ(uint32_t const value) { return __clz( value); }
N
N  /// Anzahl der (linksseitig) führenden 1-Bits (beginnend bei Bit 31) bestimmen.
N  /// \param value ist der zu analysierende Wert.
N  /// \return Anzahl der 'linksbündigen' 1-en (0 bis 32)
N  FORCE_INLINE int CLO(WORD const value) { return __clz(~value); }
X  __forceinline int CLO(uint32_t const value) { return __clz(~value); }
N
N  BYTE GetPSVPrio() noexcept;
X  uint8_t GetPSVPrio() noexcept;
N  BYTE GetSVCPrio() noexcept;
X  uint8_t GetSVCPrio() noexcept;
N  BYTE GetSTKPrio() noexcept;
X  uint8_t GetSTKPrio() noexcept;
N  BYTE GetMinPrio() noexcept;
X  uint8_t GetMinPrio() noexcept;
N  
N  constexpr unsigned const CONTROL_usermode = 1U;
N  constexpr unsigned const CONTROL_altstack = 2U;
N  constexpr unsigned const CONTROL_fpucntxt = 4U;
N
N  /// CONTROL-Register auslesen.
N  /// \return Wert des CONTROL-Registers
N  FORCE_INLINE WORD GetCONTROL() noexcept { return ARM_RSR(control); }
X  __forceinline uint32_t GetCONTROL() noexcept { return ARM_RSR_control(); }
N
N  /// CONTROL-Register einstellen.
N  /// \param[in] value ist der neue Wert des CONTROL-Registers
N  /// \note Der Prozessor muss sich im privilegierten Modus befinden. Es findet keine Prüfung statt, ob diese Voraussetzung zutrifft.
N  FORCE_INLINE void SetCONTROL_privileged(WORD const value) noexcept { ARM_WSR(control, value); }
X  __forceinline void SetCONTROL_privileged(uint32_t const value) noexcept { ARM_WSR_control(value); }
N
N  void SetCONTROL(WORD value) noexcept;
X  void SetCONTROL(uint32_t value) noexcept;
N
N  /// BASEPRI-Register auslesen.
N  /// \return Wert des BASEPRI-Registers
N  /// \note Der Prozessor muss sich im privilegierten Modus befinden. Es findet keine Prüfung statt, ob diese Voraussetzung zutrifft.
N  FORCE_INLINE WORD GetBASEPRI_privileged() noexcept { return ARM_RSR(basepri); }
X  __forceinline uint32_t GetBASEPRI_privileged() noexcept { return ARM_RSR_basepri(); }
N
N  /// BASEPRI-Register einstellen.
N  /// \param[in] basePri ist der neue Wert des BASEPRI-Registers
N  /// \note Der Prozessor muss sich im privilegierten Modus befinden. Es findet keine Prüfung statt, ob diese Voraussetzung zutrifft.
N  /// BASEPRI-Register auslesen.
N  /// \return Wert des BASEPRI-Registers.
N  WORD GetBASEPRI() noexcept;
X  uint32_t GetBASEPRI() noexcept;
N
N  FORCE_INLINE void SetBASEPRI_privileged(WORD const value) noexcept { ARM_WSR(basepri, value); }
X  __forceinline void SetBASEPRI_privileged(uint32_t const value) noexcept { ARM_WSR_basepri(value); }
N
N  /// BASEPRI-Register einstellen.
N  /// \param[in] value ist der neue Wert des BASEPRI-Registers
N  void SetBASEPRI(WORD value) noexcept;
X  void SetBASEPRI(uint32_t value) noexcept;
N
N  /// PRIMASK-Register auslesen im privilegierten Modus.
N  /// \copydetails Cortex::GetPRIMASK()
N  /// \return Wert des PRIMASK-Registers.
N  /// \warning Der Prozessor muss sich im privilegierten Modus befinden, damit diese Funktion ausgeführt werden kann.
N  /// Befindet sich der Prozessor nicht im privilegierten Modus, wird ein Usage-Fault ausgelöst.
N  WORD GetPRIMASK_privileged() noexcept;
X  uint32_t GetPRIMASK_privileged() noexcept;
N
N  /// PRIMASK-Register auslesen.
N  /// Das PRIMASK-Register besteht aus einem Bit. Ist es gesetzt, so werden \b alle IRQs (Exceptions) mit einstellbarer 
N  /// Priorität gesperrt. Achtung, dies betrifft auch den SVC-IRQ.
N  /// Wenn dieses Bit gesetzt ist, können folglich auch keine SVC-IRQs mehr bedient werden. Ein SVC-Aufruf ist dann verboten.
N  /// Es muss deshalb sichergestellt werden, dass immer dann, wenn das PRIMASK-Register gesetzt wird auch gleichzeitig
N  /// das System in den Exception-Modus versetzt wird, weil sonst keine privilegierten Befehle mehr ausgeführt werden können.
N  /// Ist das PRIMASK-Register gelöscht, so können auch nicht-privilegierte Befehle indirekt via SVC-Aufruf implementiert werden.
N  /// Hierzu löst man einen SVC aus, der dann in dem zugehörigen Handler (immer im Exception-Modus) die entsprechenden 
N  /// Operationen ausführt. 
N  /// \return Wert des PRIMASK-Registers.
N  WORD GetPRIMASK() noexcept;
X  uint32_t GetPRIMASK() noexcept;
N
N  /// PRIMASK aktivieren (alle Interrupts bis auf NMI und Hard-fault sperren).
N  /// \note Der Prozessor muss sich im privilegierten Modus befinden. Es findet keine Prüfung statt, ob diese Voraussetzung zutrifft.
N  /// \note Der Prozessor wird zusätzlich auch außerhalb einer IRQ in den privilegierten Modus versetzt, damit man ein Möglichkeit hat, die
N  /// Exception wieder zu erlauben, da man auf das PRIMASK-Register nur im privilegierten Modus zugreifen kann.
N  /// \warning
N  /// Ist das PRIMASK-Register gesetzt und befindet sich der Controller gleichzeitig im User-Modus, 
N  /// so gibt es somit keine generelle Möglichkeit mehr, privilegierte Operationen auszuführen, weil dann auch der
N  /// SVC-IRQ nicht mehr verwendbar ist. Da das Ändern der PRIMASK-Register eine privilegierte Anweisung darstellt, könnte man
N  /// dann das PRIMASK-Register nie mehr ändern.
N  /// \warning Diese Funktion sperrt auch die Ausführung aller Exceptions mit programmierbarer Priorität, also \b auch den SVC
N  /// und ebenfalls Usage-/Bus- und Memory-Faults!
N  void SetPRIMASK_privileged() noexcept;
N
N  /// PRIMASK löschen.
N  /// \note Der Prozessor muss sich im privilegierten Modus befinden. Es findet keine Prüfung statt, ob diese Voraussetzung zutrifft.
N  /// \warning Es gibt keine User-Mode-Variante dieser Funktion. 
N  void ClrPRIMASK_privileged() noexcept;
N
N  /// PRIMASK setzen.
N  void SetPRIMASK() noexcept;
N
N  FORCE_INLINE WORD GetIPSR() noexcept { return ARM_RSR(ipsr); }
X  __forceinline uint32_t GetIPSR() noexcept { return ARM_RSR_ipsr(); }
N  FORCE_INLINE WORD GetAPSR() noexcept { return ARM_RSR(apsr); }
X  __forceinline uint32_t GetAPSR() noexcept { return ARM_RSR_apsr(); }
N  FORCE_INLINE WORD GetEPSR() noexcept { return ARM_RSR(epsr); }
X  __forceinline uint32_t GetEPSR() noexcept { return ARM_RSR_epsr(); }
N
N  /// FAULTMASK auslesen.
N  /// \return Wert des FAULTMASK-Registers
N  /// \note Der Prozessor muss sich im privilegierten Modus befinden. Es findet keine Prüfung statt, ob diese Voraussetzung zutrifft.
N  FORCE_INLINE WORD GetFLTMASK_privileged() noexcept { return ARM_RSR(faultmask); }
X  __forceinline uint32_t GetFLTMASK_privileged() noexcept { return ARM_RSR_faultmask(); }
N
N  /// FAULTMASK einstellen.
N  /// \param[in] value ist der neue Wert des FAULTMASK-Registers
N  /// \note Der Prozessor muss sich im privilegierten Modus befinden. Es findet keine Prüfung statt, ob diese Voraussetzung zutrifft.
N  FORCE_INLINE void SetFLTMASK_privileged(WORD const value) { ARM_WSR(faultmask, value); }
X  __forceinline void SetFLTMASK_privileged(uint32_t const value) { ARM_WSR_faultmask(value); }
N
N  void FpuEnable() noexcept;
N
N  void FpuDisable() noexcept;
N
N  /// Load-linked-Befehl.
N  /// Diese Funktion lädt ein Datum (1, 2 oder 4 Bytes breit) und markiert die Ownership des Datums. 
N  /// \param data ist eine Referenz auf das zu lesende Datum
N  /// \return Es wird der gelesene Wert zurückgegeben
N  /// \tparam TYPE ist der Typ des zu lesenden Datums
N  /// \warning Ein weiterer Aufruf dieser Funktion mit einem anderen Argument, löscht die Ownership des vorangegangenen 
N  /// Aufrufs; ein verschachtelter Aufruf ist nicht erlaubt.
N  /// \sa Cortex::SaveConditional()
N  template<typename TYPE>
N  FORCE_INLINE TYPE LoadLinked(TYPE const volatile & data) noexcept { DMB(); return ArmExclusive<sizeof(TYPE)>::LdrEx(data); }
X  __forceinline TYPE LoadLinked(TYPE const volatile & data) noexcept { DMB(); return ArmExclusive<sizeof(TYPE)>::LdrEx(data); }
N  
N  /// Store-conditional-Befehl.  
N  /// Diese Funktion überschreibt ein Datum (1, 2 oder 4 Bytes breit) dessen Ownership zuvor belegt wurde.
N  /// Die Speicherung scheitert, wenn die Ownership nicht belegt ist. 
N  /// \param data ist eine Referenz auf das zu Datum, das überschrieben werden soll.
N  /// \param value ist der Wert, mit dem das Datum überschrieben wird.
N  /// \return \c false bei Erfolg; \c true, wenn der Vorgang wiederholt werden muss. 
N  /// \tparam TYPE ist der Typ des zu speichernden Datums
N  /// \sa Cortex::LoadLinked()
N  template<typename TYPE>
N  FORCE_INLINE bool SaveConditional(TYPE volatile & data, TYPE const value) noexcept
X  __forceinline bool SaveConditional(TYPE volatile & data, TYPE const value) noexcept
N  {
N    if ( ArmExclusive<sizeof(TYPE)>::StrEx(data, value) )
N      return true;
N
N    DSB();
N      
N    return false;
N  }
N  
N  /// Ownership entfernen.
N  /// \sa Cortex::SaveConditional()
N  /// \sa Cortex::LoadLinked()
N  FORCE_INLINE void ClearOwnership() noexcept { __clrex(); ISB(); }
X  __forceinline void ClearOwnership() noexcept { __clrex(); ISB(); }
N
N  /// Nummer der aktuellen Exception zurückgeben.
N  /// Die Nummer der aktuellen Exception (bzw. der aktiven Interrupt-Service-Routine) wird vom Cortex-M3 im (I)PSR zur Verfügung
N  /// gestellt. Diese Nummer ist 0-relativ (0 = thread mode, d.h. keine Exception). Werte größer als 15 geben externe
N  /// Exceptions an.
N  /// \return Nummer der aktiven Exception.
N  FORCE_INLINE WORD GetCurrentIsrNum() noexcept { return GetIPSR(); }
X  __forceinline uint32_t GetCurrentIsrNum() noexcept { return GetIPSR(); }
N
N  /// Abfrage, ob sich der Prozessor im Thread-Modus befindet.
N  /// \return \c true, wenn sich der Prozessor im Thread-Mode befindet und somit zurzeit keine IRQ bedient wird.
N  /// \note Die Bestimmung, ob sich der Prozessor im Thread-Modus befindet, erfolgt anhand der aktuellen ISR-Nummer.
N  FORCE_INLINE bool IsThreadMode() noexcept { return GetCurrentIsrNum() == isrNum_THREAD_MODE; }
X  __forceinline bool IsThreadMode() noexcept { return GetCurrentIsrNum() == isrNum_THREAD_MODE; }
N
N  /// Abfrage, ob sich der Prozessor im aktuellen Kontext privilegierte Befehle ausführen kann.
N  /// \return \c true, wenn privilegierte Befehle ausführbar sind.
N  /// \note Exception mode ist immer privilegiert, unabhängig von CONTROL[0]!
N  FORCE_INLINE bool IsPrivileged() noexcept { return (GetCONTROL() & CONTROL_usermode) == 0U || ! IsThreadMode(); }
X  __forceinline bool IsPrivileged() noexcept { return (GetCONTROL() & CONTROL_usermode) == 0U || ! IsThreadMode(); }
N  
N  bool IsInterruptable(BYTE prio) noexcept;
X  bool IsInterruptable(uint8_t prio) noexcept;
N
N  inline bool IsInterruptableByPSV() noexcept { return IsInterruptable(GetPSVPrio()); }
N  inline bool IsInterruptableBySVC() noexcept { return IsInterruptable(GetSVCPrio()); }
N  inline bool IsInterruptableBySTK() noexcept { return IsInterruptable(GetSTKPrio()); }
N
N  /// Anzahl der System-Ticks zurückgeben.
N  /// Da der Cortex-Core einen System-Timer beinhaltet (Modul STK), kann man diesen dazu verwenden, um eine Systemzeit 
N  /// zu implementieren.
N  /// \return Anzahl der System-Ticks (Zyklusdauer normalerweise 1 ms) seit Systemstart.
N  WORD GetTicks() noexcept;
X  uint32_t GetTicks() noexcept;
N
N  /// Anzahl der System-Ticks als 64-Bit-Zahl zurückgeben, um Probleme bei tagelanger Betriebsdauer zu vermeiden.
N  /// \return Anzahl der System-Ticks (Zyklusdauer normalerweise 1 ms) seit Systemstart.
N  UINT64 GetWideTicks() noexcept;
X  uint64_t GetWideTicks() noexcept;
N
N  /// Systemzeit (Anzal der System-Ticks) mit erhöhter Auflösung bzw. Genauigkeit zurückgeben.
N  UINT64 GetFineTime(UINT32 const scf) noexcept;
X  uint64_t GetFineTime(uint32_t const scf) noexcept;
N
N  /// Alternativen Stack einrichten.
N  /// \param[in] stack ist die \b Endadresse des Stack-Speicherbereiches. \b Achtung: Must be 8-byte-aligned!
N  /// \param[in] num gibt die Anzahl der Wörter des Stacks an.
N  /// \warning Der Prozessor muss sich im privilegierten Modus befinden. Es findet keine Prüfung statt, ob diese Voraussetzung zutrifft.
N  /// Wird die Voraussetzung verletzt, wird ein Usage-Fault ausgelöst.
N  void SwitchStack(WORD * stack, unsigned num) noexcept;
X  void SwitchStack(uint32_t * stack, unsigned num) noexcept;
N
N  template<unsigned DIM>
N  FORCE_INLINE void SwitchStack(WORD (& stack)[DIM]) noexcept { return SwitchStack(stack, DIM); } 
X  __forceinline void SwitchStack(uint32_t (& stack)[DIM]) noexcept { return SwitchStack(stack, DIM); } 
N
N  bool AltStackIsOk() noexcept;
N}
N
N#endif
L 13 ".\Inc\Cortex\Atomic.h" 2
N
N/// Helper-Klasse für thread-sichere Operationen, die somit als atomar angesehen werden können.
N/// Mit Hilfe der Load-linked/Store-conditional-Befehle des Prozessors (LDREX, STREX) können BYTE-, HWRD- und WORD-Daten
N/// thread-sicher manipuliert werden. Diese Klasse implementiert die hierzu notwendigen statischen Funktionen.
N/// \sa Cortex::LoadLinked()
N/// \sa Cortex::SaveConditional()
Nnamespace  Atomic
N{
N  /// Typendefinition zur Beschreibung binärer Operationen.
N  enum class BinOpType
N  {
N    opSet,                      ///< Kennzeichnung der Zuweisung.
N    opAdd,                      ///< Kennzeichnung der Addition.
N    opSub,                      ///< Kennzeichnung der Subtraktion.
N    opMul,                      ///< Kennzeichnung der Multiplikation.
N    opAnd,                      ///< Kennzeichnung der Und-Operation für einzelnen Bits (bitweise).
N    opOrr                       ///< Kennzeichnung der Oder-Operation für einzelnen Bits (bitweise).  
N  };
N  
N  /// Hilfsklasse mit statischer Funktion, um unterschiedliche Rechenoperation durch Spezialisierung zu definieren (statischer Polymorphismus).
N  /// \tparam OP gibt die Art der binären Rechenoperation an.
N  /// \tparam TYPE ist der Datentyp der atomaren Operation.
N  template<typename TYPE, BinOpType OP> struct BinOp { static constexpr TYPE Calc(TYPE l, TYPE r) noexcept; };
N
N  template<typename TYPE> struct BinOp<TYPE, BinOpType::opSet> { static constexpr TYPE Calc(TYPE        , TYPE const r) noexcept { return     r; } };
N  template<typename TYPE> struct BinOp<TYPE, BinOpType::opAdd> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l + r; } };
N  template<typename TYPE> struct BinOp<TYPE, BinOpType::opSub> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l - r; } };
N  template<typename TYPE> struct BinOp<TYPE, BinOpType::opMul> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l * r; } };
N  template<typename TYPE> struct BinOp<TYPE, BinOpType::opAnd> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l & r; } };
N  template<typename TYPE> struct BinOp<TYPE, BinOpType::opOrr> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l | r; } };
N  
N  /// Funktion um generische Read/Modify/Wtite-Operationen zu implementieren.
N  /// Beim Ändern von Variablen wird nach folgendem Schema vorgegangen. Zuerst wird der aktuelle Wert via LDREX geladen (read).
N  /// Dann wird anhand dieses Wertes und dem Operanden ein neuer Wert berechnet (modify).
N  /// Dieser Wert wird anschließend via STREX gespeichert (write). Falls die Schreiboperation nicht ausgeführt werden kann, werden alle
N  /// drei Schritte von Anfang an wiederholt.
N  /// \param[in, out] data gibt den (ersten) Zieloperand sowie das Ergebsnis der (binären) Rechenoperation an.
N  /// \param[in] operand ist der (zweite) Operand den (binären) Rechenoperation.
N  /// \return Wert des Zieloperanden \b vor der Operation.
N  /// \tparam OP gibt die Art der binären Rechenoperation an (Addition, Subtraktion etc.).
N  /// \tparam TYPE ist der Datentyp der atomaren Operation (WORD, HWRD oder BYTE).
N  template<typename TYPE, BinOpType OP> 
N  inline TYPE Modify(TYPE volatile & data, TYPE const operand) noexcept
N  {
N    TYPE result;
N    
N    do 
N    {
N      result = Cortex::LoadLinked(data);
N    } while ( Cortex::SaveConditional(data, BinOp<TYPE, OP>::Calc(result, operand)) );
N    
N    return result;
N  }
N
N  template<typename TYPE, typename FNC> 
N  inline TYPE RMW(TYPE volatile & data, FNC const lambda) noexcept
N  {
N    TYPE result;
N    
N    do 
N    {
N      result = Cortex::LoadLinked(data);
N    } while ( Cortex::SaveConditional(data, lambda(result)) );
N    
N    return result;
N  }
N
N  template<typename TYPE, typename FNC> 
N  inline bool RMWCond(TYPE volatile & data, FNC const lambda) noexcept
N  {
N    TYPE value;
N    
N    do 
N    {
N      value = Cortex::LoadLinked(data);
N
N      if ( ! lambda(value) )
N      {
N        Cortex::ClearOwnership();
N        
N        return false;
N      }
N    } while ( Cortex::SaveConditional(data, value) );
N    
N    return true;
N  }
N
N  /// Typendefinition für Vergleichsoperationen.
N  enum class CmpOpType
N  {
N    opEq,                       ///< Prüfung auf Gleichheit.
N    opNe,                       ///< Prüfung auf Ungleichheit.
N    opLt,                       ///< Prüfung ob das linke Argument kleiner ist, als das rechte Argument der Überprüfungsfunktion.
N    opLe,                       ///< Prüfung ob das linke Argument kleiner oder gleich dem rechten Argument der Überprüfungsfunktion ist.
N    opGt,                       ///< Prüfung ob das linke Argument größer ist, als das rechte Argument der Überprüfungsfunktion.
N    opGe                        ///< Prüfung ob das linke Argument größer oder gleich dem rechten Argument der Überprüfungsfunktion ist.
N  };
N
N  /// Hilfsklasse mit statischer Funktion, um unterschiedliche Vergleichsoperation durch Spezialisierung zu definieren (statischer Polymorphismus).
N  template<typename TYPE, CmpOpType CO> struct CmpOp { static constexpr bool Chck(TYPE l, TYPE r) noexcept; };
N
N  template<typename TYPE> struct CmpOp<TYPE, CmpOpType::opEq > { static constexpr bool Chck(TYPE const l, TYPE const r) noexcept { return l == r; } };
N  template<typename TYPE> struct CmpOp<TYPE, CmpOpType::opNe > { static constexpr bool Chck(TYPE const l, TYPE const r) noexcept { return l != r; } };
N  template<typename TYPE> struct CmpOp<TYPE, CmpOpType::opLt > { static constexpr bool Chck(TYPE const l, TYPE const r) noexcept { return l <  r; } };
N  template<typename TYPE> struct CmpOp<TYPE, CmpOpType::opLe > { static constexpr bool Chck(TYPE const l, TYPE const r) noexcept { return l <= r; } };
N  template<typename TYPE> struct CmpOp<TYPE, CmpOpType::opGt > { static constexpr bool Chck(TYPE const l, TYPE const r) noexcept { return l >  r; } };
N  template<typename TYPE> struct CmpOp<TYPE, CmpOpType::opGe > { static constexpr bool Chck(TYPE const l, TYPE const r) noexcept { return l >= r; } };
N
N  /// Funktion um \b bedingte, generische Read/Modify/Write-Operationen zu implementieren.
N  /// Die Vorgehensweise ist im Prinzip wie bei Atomic::BinOp<TYPE, OP>, jedoch die Rechenoperation und die Zuweisung
N  /// nur dann ausgeführt, wenn die geforderte Bedingung erfüllt ist. Ist die Bedingung nicht erfüllt, so 
N  /// wird der Zieloperand nicht modifiziert.
N  /// \param[in, out] data gibt den (ersten) Zieloperand sowie das Ergebsnis der (binären) Rechenoperation an.
N  /// \param[in] operand ist der (zweite) Operand den (binären) Rechenoperation.
N  /// \param[in] cmp ist der Wert, mit dem verglichen wird; er wird bei der Vergleichsoperation verwendet.
N  /// \param[out] old beinhaltet nach Return den Wert des Zieloperanden vor der Operation.
N  /// \return \c true, wenn die Operation ausgeführt wurde (Bedingung erfüllt) oder \c false, wenn die
N  /// Operation nicht ausgeführt werden konnte (Bedingung nicht erfüllt).
N  /// \tparam OP gibt die Art der binären Rechenoperation an (Addition, Subtraktion etc.).
N  /// \tparam CO gibt die Art der Ausführungsbedingung an (Gleichheit, Ungleichheit etc.).
N  /// \tparam TYPE ist der Datentyp der atomaren Operation (WORD, HWRD oder BYTE).
N  template<typename TYPE, BinOpType OP, CmpOpType CO> 
N  inline bool CmpAndMod(TYPE volatile & data, TYPE const operand, TYPE const cmp, TYPE & old) noexcept 
N  {
N    do 
N    {
N      if ( ! CmpOp<TYPE, CO>::Chck(old = Cortex::LoadLinked(data), cmp) )
N      {
N        Cortex::ClearOwnership();
N
N        return false;
N      }
N    } while ( Cortex::SaveConditional(data, BinOp<TYPE, OP>::Calc(old, operand)) );
N
N    return true;
N  }
N  
N  /// Atomare Addition.
N  /// \param[in, out] data ist der erste Operand, nach der Ausführung die Summe der Operanden.
N  /// \param[in] value ist der zweite Operand.
N  /// \return Wert des ersten Operanden \b vor der Addition.
N  /// \tparam TYPE ist der Datentyp der atomaren Operation.
N  template<typename TYPE> inline TYPE Add(TYPE volatile & data, TYPE const value) noexcept { return Modify<TYPE, BinOpType::opAdd>(data, value); }
N
N  /// Atomare Subtraktion.
N  /// \param[in, out] data ist der erste Operand, nach der Ausführung die Differenz der Operanden.
N  /// \param[in] value ist der zweite Operand.
N  /// \return Wert des ersten Operanden \b vor der Subtraktion.
N  /// \tparam TYPE ist der Datentyp der atomaren Operation.
N  template<typename TYPE> inline TYPE Sub(TYPE volatile & data, TYPE const value) noexcept { return Modify<TYPE, BinOpType::opSub>(data, value); }
N
N  /// Atomare Multiplikation.
N  /// \param[in, out] data ist der erste Operand, nach der Ausführung das Produkt der Operanden.
N  /// \param[in] value ist der zweite Operand.
N  /// \return Wert des ersten Operanden \b vor der Multiplikation.
N  /// \tparam TYPE ist der Datentyp der atomaren Operation.
N  template<typename TYPE> inline TYPE Mul(TYPE volatile & data, TYPE const value) noexcept { return Modify<TYPE, BinOpType::opMul>(data, value); }
N
N  /// Atomare Und-Operation (bitweise).
N  /// \param[in, out] data ist der erste Operand, nach der Ausführung das Produkt der Operanden.
N  /// \param[in] mask ist der zweite Operand.
N  /// \return Wert des Zieloperanden \b vor der Und-Operation.
N  /// \tparam TYPE ist der Datentyp der atomaren Operation.
N  template<typename TYPE> inline TYPE And(TYPE volatile & data, TYPE const mask ) noexcept { return Modify<TYPE, BinOpType::opAnd>(data, mask); }
N
N  /// Atomare Oder-Operation (bitweise).
N  /// \param[in, out] data ist der erste Operand, nach der Ausführung das Produkt der Operanden.
N  /// \param[in] mask ist der zweite Operand.
N  /// \return Wert des Zieloperanden \b vor der Oder-Operation.
N  /// \tparam TYPE ist der Datentyp der atomaren Operation.
N  template<typename TYPE> inline TYPE Orr(TYPE volatile & data, TYPE const mask ) noexcept { return Modify<TYPE, BinOpType::opOrr>(data, mask); }
N
N  /// Atomare Nand-Operation (bitweise).
N  /// \param[in, out] data ist der erste Operand, nach der Ausführung das Produkt der Operanden.
N  /// \param[in] mask ist der zweite Operand.
N  /// \return Wert des Zieloperanden \b vor der Nand-Operation.
N  /// \tparam TYPE ist der Datentyp der atomaren Operation.
N  template<typename TYPE> inline TYPE Bic(TYPE volatile & data, TYPE const mask ) noexcept { return And(data, (TYPE)(~mask)); }
N
N  template<typename TYPE> inline TYPE Mod(TYPE volatile & data, TYPE const mask, bool const flag) 
N  noexcept {
N    return flag ? Orr(data, mask) : Bic(data, mask);
N  }
N  
N  /// Atomare Set-Anweisung (Zuweisungsoperation).
N  /// \param[in, out] data ist der Zieloperand, nach der Ausführung der nuene Wert.
N  /// \param[in] value ist der Wert der Zuweisung.
N  /// \return Wert des Zieloperanden \b vor der Zuweisungsoperation.
N  /// \tparam TYPE ist der Datentyp der atomaren Operation.
N  template<typename TYPE> inline TYPE Set(TYPE volatile & data, TYPE const value) noexcept { return Modify<TYPE, BinOpType::opSet>(data, value); }
N
N  /// Set if equal.
N  template<typename TYPE> inline bool SetEQ(TYPE volatile & data, TYPE const value, TYPE const cmp, TYPE & old) noexcept { return CmpAndMod<TYPE, BinOpType::opSet, CmpOpType::opEq>(data, value, cmp, old); }
N  template<typename TYPE> inline bool SetEQ(TYPE volatile & data, TYPE const value, TYPE const cmp)   noexcept { TYPE old; return SetEQ                                             (data, value, cmp, old); }
N
N  /// Set if not equal.
N  template<typename TYPE> inline bool SetNE(TYPE volatile & data, TYPE const value, TYPE const cmp, TYPE & old) noexcept { return CmpAndMod<TYPE, BinOpType::opSet, CmpOpType::opNe>(data, value, cmp, old); }
N  template<typename TYPE> inline bool SetNE(TYPE volatile & data, TYPE const value, TYPE const cmp)   noexcept { TYPE old; return SetNE                                             (data, value, cmp, old); }
N  template<typename TYPE> inline bool SetNE(TYPE volatile & data, TYPE const value)                   noexcept {           return SetNE                                             (data, value, value);           }
N
N  /// Set if greater then.
N  template<typename TYPE> inline bool SetGT(TYPE volatile & data, TYPE const value, TYPE const cmp, TYPE & old) noexcept { return CmpAndMod<TYPE, BinOpType::opSet, CmpOpType::opGt>(data, value, cmp, old); }
N  template<typename TYPE> inline bool SetGT(TYPE volatile & data, TYPE const value, TYPE const cmp)   noexcept { TYPE old; return SetGT                                             (data, value, cmp, old); }
N  template<typename TYPE> inline bool SetGT(TYPE volatile & data, TYPE const value)                   noexcept {           return SetGT                                             (data, value, value); }
N
N  /// Set if less then.
N  template<typename TYPE> inline bool SetLT(TYPE volatile & data, TYPE const value, TYPE const cmp, TYPE & old) noexcept { return CmpAndMod<TYPE, BinOpType::opSet, CmpOpType::opLt>(data, value, cmp, old); }
N  template<typename TYPE> inline bool SetLT(TYPE volatile & data, TYPE const value, TYPE const cmp)   noexcept { TYPE old; return SetLT                                             (data, value, cmp, old); }
N  template<typename TYPE> inline bool SetLT(TYPE volatile & data, TYPE const value)                   noexcept {           return SetLT                                             (data, value, value); }
N
N  /// Add if equal.
N  template<typename TYPE> inline bool AddEQ(TYPE volatile & data, TYPE const value, TYPE const cmp, TYPE & old) noexcept { return CmpAndMod<TYPE, BinOpType::opAdd, CmpOpType::opEq>(data, value, cmp, old); }
N  template<typename TYPE> inline bool AddEQ(TYPE volatile & data, TYPE const value, TYPE const cmp)   noexcept { TYPE old; return AddEQ                                             (data, value, cmp, old); }
N
N  /// Add if less then.
N  template<typename TYPE> inline bool AddLT(TYPE volatile & data, TYPE const value, TYPE const cmp, TYPE & old) noexcept { return CmpAndMod<TYPE, BinOpType::opAdd, CmpOpType::opLt>(data, value, cmp, old); }
N  template<typename TYPE> inline bool AddLT(TYPE volatile & data, TYPE const value, TYPE const cmp)   noexcept { TYPE old; return AddLT                                             (data, value, cmp, old); }
N
N  /// Add if less then or equal.
N  template<typename TYPE> inline bool AddLE(TYPE volatile & data, TYPE const value, TYPE const cmp, TYPE & old) noexcept { return CmpAndMod<TYPE, BinOpType::opAdd, CmpOpType::opLe>(data, value, cmp, old); }
N  template<typename TYPE> inline bool AddLE(TYPE volatile & data, TYPE const value, TYPE const cmp)   noexcept { TYPE old; return AddLE                                             (data, value, cmp, old); }
N
N  /// Sub if greater then.
N  template<typename TYPE> inline bool SubGT(TYPE volatile & data, TYPE const value, TYPE const cmp, TYPE & old) noexcept { return CmpAndMod<TYPE, BinOpType::opSub, CmpOpType::opGt>(data, value, cmp, old); }
N  template<typename TYPE> inline bool SubGT(TYPE volatile & data, TYPE const value, TYPE const cmp)   noexcept { TYPE old; return SubGT                                             (data, value, cmp, old); }
N
N  /// Sub if greater equal.
N  template<typename TYPE> inline bool SubGE(TYPE volatile & data, TYPE const value, TYPE const cmp, TYPE & old) noexcept { return CmpAndMod<TYPE, BinOpType::opSub, CmpOpType::opGe>(data, value, cmp, old); }
N  template<typename TYPE> inline bool SubGE(TYPE volatile & data, TYPE const value, TYPE const cmp)   noexcept { TYPE old; return SubGE                                             (data, value, cmp, old); }
N  template<typename TYPE> inline bool SubGE(TYPE volatile & data, TYPE const value)                   noexcept {           return SubGE                                             (data, value, value          ); }
N  
N  template<typename TYPE> inline TYPE SubClipped(TYPE volatile & data, TYPE const value) noexcept
N  {
N    TYPE result;
N    constexpr TYPE const zero = 0;
N    
N    do
N    {
N      if ( (result = Cortex::LoadLinked(data)) > value )
N        result -= value;
N      else
N        result  = zero;
N    } while ( Cortex::SaveConditional(data, result) );
N    
N    return result;
N  }
N
N  template<typename TYPE> inline TYPE Incr(TYPE volatile & data) noexcept { constexpr TYPE const one = 1; return Add(data, one); }
N  template<typename TYPE> inline TYPE Decr(TYPE volatile & data) noexcept { constexpr TYPE const one = 1; return Sub(data, one); }
N
N  template<typename TYPE> inline TYPE * XchgPtr(TYPE * volatile & ptr, TYPE * const value = nullptr) noexcept { return Set(ptr, value); }
N
N  /// Werte austauschen.
N  /// Dem Zieloperand wird ein neuer Wert zugewiesen und der ursprüngliche Wert des Zieloperanden wird zurückgegeben.
N  /// \param[in, out] data ist der Zieloperand.
N  /// \param[out] old enthält nach Ausführung den ursprünglichen Wert des Zieloperanden.
N  /// \param[in] value ist der neue Wert für den Zieloperanden.
N  /// \tparam TYPE ist der Datentyp der atomaren Operation.
N  template<typename TYPE> inline void Swap(TYPE volatile & data, TYPE volatile & old, TYPE const value) noexcept
N  {
N    do 
N    {
N      old = Cortex::LoadLinked(data);
N    } while ( Cortex::SaveConditional(data, value) );
N  }
N  
N  /// Werte austauschen.
N  /// Dem Zieloperand wird ein neuer Wert zugewiesen und der ursprüngliche Wert des Zieloperanden wird zurückgegeben.
N  /// \param[in, out] data ist der Zieloperand.
N  /// \param[in, out] value ist der neue Wert für den Zieloperanden und enthält nach Ausführung den ursprünglichen Wert des Zieloperanden.
N  /// \tparam TYPE ist der Datentyp der atomaren Operation.
N  template<typename TYPE> inline void Swap(TYPE volatile & data, TYPE volatile & value) noexcept { Swap(data, value, value); }
N
N  /// Prüfen, ob ein noch mindestens ein beliebiges Bit im Zieloperand gesetzt ist, dieses Bit löschen und die Nummer des Bits rückmelden.
N  /// \param[in, out] data ist der Zieloperand.
N  /// \return Nummer des zu Bits oder -1, wenn kein Bit gefunden wurde.
N  /// \tparam TYPE ist der Datentyp der atomaren Operation.
N  template<typename TYPE> inline int  Find(TYPE volatile & data) noexcept
N  {
N    TYPE value;    
N    constexpr TYPE const one = 1;
N    int indx;
N    
N    do
N    { 
N      int const n(Cortex::CLZ(value = Cortex::LoadLinked(data)));
N      
N      if ( n > 31 )
N      {
N        Cortex::ClearOwnership();
N        
N        return -1;
N      } 
N        
N      indx = 31 - n;        
N    } while ( Cortex::SaveConditional(data, (TYPE)(value & ~(one << indx))) );
N    
N    return indx;
N  }
N
N  /// Prüfen, ob ein bestimmtes Bit im Zieloperand gesetzt ist und dieses Bit löschen.
N  /// \param[in, out] data ist der Zieloperand.
N  /// \param[in] indx ist die Nummer des zu prüfenden Bits.
N  /// \return \c true, wenn das angegebene Bit gesetzt war.
N  /// \tparam TYPE ist der Datentyp der atomaren Operation.
N  template<typename TYPE> inline bool Test(TYPE volatile & data, int const indx) noexcept
N  {
N    constexpr TYPE const zero = 0;
N    constexpr TYPE const one = 1;
N    TYPE const mask(one << indx);
N    
N    return (Bic(data, mask) & mask) != zero;
N  }
N  
N  template<typename TYPE> inline TYPE Bfld(TYPE volatile & data, TYPE const set, TYPE const res) noexcept
N  {
N    TYPE value;
N    
N    do 
N    {
N      value = Cortex::LoadLinked(data);
N    } while ( Cortex::SaveConditional(data, (TYPE)(set | (value & ~res))) );
N    
N    return value;
N  }
N};
N
N#endif
N
L 323 ".\Inc\Drivers\RB_RCC.h" 2
N
Ninline void AHB1ClockEnableByMask(WORD const mask) noexcept
Xinline void AHB1ClockEnableByMask(uint32_t const mask) noexcept
N{
N  Atomic::Orr(rbRCC.AHBENR[0], mask);
N}
N
N# define AHB1_ENABLE(M)         AHB1ClockEnableByMask(1U << INDX_RCC_AHB1_ ## M)
N
N/// Takt einer AHB-Peripherie einschalten.
N/// \param[in] num kennzeichnet die AHB-Periphery.
Ninline void AHBClockEnable(WORD const num) noexcept
Xinline void AHBClockEnable(uint32_t const num) noexcept
N{
N  auto const i = num >> PERIPHERY_INDX_POS;
X  auto const i = num >> 8U;
N  auto const n = num % 32U;
N  
N  Atomic::Orr(rbRCC.AHBENR[i], 1U << n);
N}
N
N/// Takt einer APB-Peripherie einschalten.
N/// \param[in] num kennzeichnet die APB-Periphery.
Ninline void APBClockEnable(WORD const num) noexcept
Xinline void APBClockEnable(uint32_t const num) noexcept
N{
N  auto const i = num >> PERIPHERY_INDX_POS;
X  auto const i = num >> 8U;
N  auto const n = num % 32U;
N  
N  Atomic::Orr(rbRCC.APBENR[i], 1U << n);
N}
N
N#endif
L 7 "InitSDRAM.cpp" 2
N#include <RB_GPIO.h>
L 1 ".\Inc\Drivers\RB_GPIO.h" 1
N//
N// RB_GPIO.H
N//
N
N/// \file RB_GPIO.h
N/// General Purpose I/O
N
N#ifndef guard_RB_GPIO_H
N# define guard_RB_GPIO_H
N
N# include <RB.h>
N
N/// Datentyp für GPIO-Registerbank.
Ntypedef struct __regbank_GPIO
N{
N  WORD MODER;                   ///< Mode register.
X  uint32_t MODER;                   
N  HWRD OTYPER;                  ///< Output type register.
X  uint16_t OTYPER;                  
N  HWRD dontTouchMe0;
X  uint16_t dontTouchMe0;
N
N  WORD OSPEEDR;                 ///< Output sp register.
X  uint32_t OSPEEDR;                 
N  WORD PUPDR;                   ///< Pull-up/pull-down register
X  uint32_t PUPDR;                   
N
N  HWRD IDR;                     ///< Input data register.
X  uint16_t IDR;                     
N  HWRD dontTouchMe1;
X  uint16_t dontTouchMe1;
N
N  HWRD ODR;                     ///< Output data register.
X  uint16_t ODR;                     
N  HWRD dontTouchMe2;
X  uint16_t dontTouchMe2;
N
N  union {
N    struct {
N      HWRD BSR;                 ///< Bit set register.     
X      uint16_t BSR;                 
N      HWRD BRR;                 ///< Bit reset register.
X      uint16_t BRR;                 
N    };
N    
N    WORD BSRR;                  ///< Bit set reset register.
X    uint32_t BSRR;                  
N  };
N
N  WORD LCKR;                    ///< Lock register.
X  uint32_t LCKR;                    
N
N  union {
N    struct {
N      WORD AFRL;                ///< Alternate function register low.
X      uint32_t AFRL;                
N      WORD AFRH;                ///< Alternate function register high.
X      uint32_t AFRH;                
N    };
N    
N    WORD AFR[2];                ///< Alternate function registers.
X    uint32_t AFR[2];                
N  };
N} RegbankTypeGPIO;
N
Nextern RegbankTypeGPIO volatile rbGPIOA;              ///< GPIOA-Registerbank.
Nextern RegbankTypeGPIO volatile rbGPIOB;              ///< GPIOB-Registerbank.
Nextern RegbankTypeGPIO volatile rbGPIOC;              ///< GPIOC-Registerbank.
Nextern RegbankTypeGPIO volatile rbGPIOD;              ///< GPIOD-Registerbank.
Nextern RegbankTypeGPIO volatile rbGPIOE;              ///< GPIOE-Registerbank.
Nextern RegbankTypeGPIO volatile rbGPIOF;              ///< GPIOF-Registerbank.
Nextern RegbankTypeGPIO volatile rbGPIOG;              ///< GPIOG-Registerbank.
Nextern RegbankTypeGPIO volatile rbGPIOH;              ///< GPIOH-Registerbank.
Nextern RegbankTypeGPIO volatile rbGPIOI;              ///< GPIOI-Registerbank.
Nextern RegbankTypeGPIO volatile rbGPIOJ;              ///< GPIOJ-Registerbank.
Nextern RegbankTypeGPIO volatile rbGPIOK;              ///< GPIOK-Registerbank.
N
N/// \cond RB_DEFS
N
N// MODER
N
N# define MASK_GPIO_MODER_INPUT  0x0U
N# define MASK_GPIO_MODER_GPOUT  0x1U
N# define MASK_GPIO_MODER_ALTFNC 0x2U
N# define MASK_GPIO_MODER_ANALOG 0x3U
N# define MASK_GPIO_MODER        0x3U
N
N// PUPDR
N
N# define MASK_GPIO_PUPDR        0x3U
N# define MASK_GPIO_PUPDR_NOTHING 0U
N# define MASK_GPIO_PUPDR_UP     1U
N# define MASK_GPIO_PUPDR_DOWN   2U
N# define MASK_GPIO_PUPDR_UPDOWN 3U
N
N// OTYPER
N
N# define MASK_GPIO_OTYPER       1U
N# define MASK_GPIO_OTYPER_PP    0U                    // push-pull output
N# define MASK_GPIO_OTYPER_OD    1U                    // open drain output
N
N// OSPEEDT
N
N# define MASK_GPIO_OSPEEDR      0x3U
N# define MASK_GPIO_OSPEEDR_LOW  0x0U
N# define MASK_GPIO_OSPEEDR_MED  0x1U
N# define MASK_GPIO_OSPEEDR_FAST 0x2U
N# define MASK_GPIO_OSPEEDR_HIGH 0x3U
N
N// AFR bit definitions
N
N# define MASK_GPIO_AFR_AF00     0x0U
N# define MASK_GPIO_AFR_AF01     0x1U
N# define MASK_GPIO_AFR_AF02     0x2U
N# define MASK_GPIO_AFR_AF03     0x3U
N# define MASK_GPIO_AFR_AF04     0x4U
N# define MASK_GPIO_AFR_AF05     0x5U
N# define MASK_GPIO_AFR_AF06     0x6U
N# define MASK_GPIO_AFR_AF07     0x7U
N# define MASK_GPIO_AFR_AF08     0x8U
N# define MASK_GPIO_AFR_AF09     0x9U
N# define MASK_GPIO_AFR_AF10     0xAU
N# define MASK_GPIO_AFR_AF11     0xBU
N# define MASK_GPIO_AFR_AF12     0xCU
N# define MASK_GPIO_AFR_AF13     0xDU
N# define MASK_GPIO_AFR_AF14     0xEU
N# define MASK_GPIO_AFR_AF15     0xFU
N# define MASK_GPIO_AFR          0xFU
N
N/// \endcond
N
N# include <Debug.h>
L 1 ".\Inc\Debug\Debug.h" 1
N//
N// Debug.h
N//
N
N#ifndef guard_DEBUG_H
N# define guard_DEBUG_H
N
N# include <Compiler.h>
L 1 ".\Inc\Compiler.h" 1
N//
N// Compiler.h
N//
N
N/// \file Compiler.h
N/// Compiler-spezifische Definitions, Macros und Funktionen.
N/// Um die Quellen auch zu Testzwecken auch mit anderen Compilern (z.B. MSC) übersetzen zu können, müssten in dieser Datei
N/// mittels bedingter Kompilierung verschiedene Makros für die unterschiedlichen Compiler definiert werden.
N
N#if ! defined(guard_COMPILER_H) && defined(__arm__)
X#if ! 1L && 1L
S# define guard_COMPILER_H
S
S# if ! defined(__cplusplus)
S#  error C++ only!
S# endif
S
S# if   defined(_DEBUG)  && ! defined(DEBUG)
S#  define DEBUG
S# endif
S
S# if   defined(RELEASE) &&   defined(DEBUG)
S#  error You cannot define RELEASE and DEBUG at the same time
S# endif
S# if ! defined(RELEASE) && ! defined(DEBUG)
S#  error You must define ether RELEASE or DEBUG
S# endif
S
S# include <stdint.h>
S# include <stdbool.h>
S
S# define BYTE                   uint8_t               ///< Byte-Datentyp (8 Bits).
S# define WORD                   uint32_t              ///< Wort-Datentyp (nach ARM-Konvention 32 Bits, d.h. 4 Bytes).
S# define HWRD                   uint16_t              ///< Halbwort-Datentyp (nach ARM-Konvention 16 Bits, d.h. 2 Bytes).
S# define DWRD                   uint64_t              ///< Doppelwort-Datentyp (nach ARM-Konvention 8 Bytes).
S
S// Nomenklatur <s>INT<nn>:
S// <s> = U bzw. S für unsigned bzw. signed
S// <nn> = 08, 12, 32, 64 für 8 bis 64 Bits
S
S# define UINT64                 uint64_t              ///< 8 byte unsigned int.
S# define SINT64                 int64_t               ///< 8 byte signed int.
S
S# define UINT32                 uint32_t              ///< 4 byte unsigned int.
S# define SINT32                 int32_t               ///< 4 byte signed int.
S
S# define UINT16                 uint16_t              ///< 2 byte unsigned int.
S# define SINT16                 int16_t               ///< 2 byte signed int.
S
S# define UINT08                 uint8_t               ///< Single byte unsigned int.
S# define SINT08                 int8_t                ///< Single byte signed int.
S
S# include <stddef.h>
S
S# if __ARMCC_VERSION >= 6000000
S#  pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
S#  pragma clang diagnostic ignored "-Wnested-anon-types"
S#  pragma clang diagnostic ignored "-Wc++17-compat-mangling"
S#  pragma clang diagnostic ignored "-Wc++98-compat-pedantic"
S#  pragma clang diagnostic ignored "-Wc++98-compat"
S#  pragma clang diagnostic ignored "-Wgcc-compat"
S
S#  define IMPORT(X)             asm(".global " #X);
S
Sstatic __attribute__((always_inline)) inline void ___barrier(void) { asm volatile("" ::: "memory", "cc"); }
S
S#  define SCHEDULE_BARRIER      ___barrier
S#  define FORCE_STORES          ___barrier
S#  define MEMORY_CHANGED        ___barrier
S
S#  define __weak                __attribute__((weak))
S#  define __svc(...)
S#  define __align(x)            __attribute__((aligned(x)))
S
S#  define __clrex               __builtin_arm_clrex
S#  define __dmb                 __builtin_arm_dmb
S#  define __dsb                 __builtin_arm_dsb
S#  define __isb                 __builtin_arm_isb
S#  define __wfi                 __builtin_arm_wfi
S#  define __wfe                 __builtin_arm_wfe
S#  define __rbit                __builtin_arm_rbit
S#  define __rev                 __builtin_bswap32
S#  define __clz                 __builtin_clz
S
S#  define ARM_RSR(NAME)         __builtin_arm_rsr(#NAME)
S#  define ARM_WSR(NAME, VALUE)  __builtin_arm_wsr(#NAME, VALUE)
S
S#  define DEFINE_ARM_RSR(NAME)  inline WORD ARM_RSR_ ## NAME()                 noexcept { return ARM_RSR(NAME); }
S#  define DEFINE_ARM_WSR(NAME)  inline void ARM_WSR_ ## NAME(WORD const value) noexcept { ARM_WSR(NAME, value); }
S
S#  define OFFSET_OF(S, M)       __builtin_offsetof(S, M)
S
S#  define BREAKPOINT(v)         asm volatile("bkpt %0" :: "i"(v))
S
S#  define WRITEONLY             /// not implemented
S#  define READONLY              const
S
S#  define __AT(ADDR)            __attribute__((section(".ARM.__at_" #ADDR)))
S#  define LOCATE_AT(ADDR)       __AT(ADDR)
S
S#  define FORCE_INLINE          __attribute__((always_inline)) inline
S
S#  define FILE                  __FILE__
S#  define FUNC                  __FUNCTION__
S#  define LINE                  __LINE__
S# else
S#  pragma anon_unions
S#  define PRAGMA(X)             _Pragma(#X)
S
S#  define IMPORT(X)             PRAGMA(import(X))
S
S#  define SCHEDULE_BARRIER()    __schedule_barrier() ///< Compiler-spezifische Pseudo-Anweisung, um die compiler-bedingte Umsortierung von Befehlen über diese Grenze hinaus zu unterbinden. 
S#  define FORCE_STORES()        __force_stores()
S#  define MEMORY_CHANGED()      __memory_changed()
S
S#  define DEFINE_ARM_RSR(NAME)  inline WORD ARM_RSR_ ## NAME()                 noexcept { register WORD NAME __asm(#NAME); return NAME; }
S#  define DEFINE_ARM_WSR(NAME)  inline void ARM_WSR_ ## NAME(WORD const value) noexcept { register WORD NAME __asm(#NAME); NAME = value; }
S
S#  define ARM_RSR(NAME)         ARM_RSR_ ## NAME()
S#  define ARM_WSR(NAME, VALUE)  ARM_WSR_ ## NAME(VALUE)
S
S#  define OFFSET_OF(S, M)       offsetof(S, M)
S
S#  define BREAKPOINT(n)         __breakpoint(n)
S
S#  define WRITEONLY             __writeonly
S#  define READONLY              const
S
S#  define LOCATE_AT(ADDR)       __attribute__((at(ADDR)))
S
S#  define FORCE_INLINE          __forceinline
S
S#  define FILE                  __MODULE__            ///< Name der aktuellen Datei.
S
S#  define FUNC                  __PRETTY_FUNCTION__   ///< Name der aktuellen Funktion.
S#  define LINE                  __LINE__              ///< Aktuelle Zeilennummer.
S# endif
S
Snamespace std { using nullptr_t = decltype(nullptr); }
S
S# if defined(DEBUG) && ! defined(NO_BREAK)
S#  define DEBUG_BREAK(n)        BREAKPOINT(n)
S# else
S#  define DEBUG_BREAK(n)
S# endif
S
S# define __CONCAT(A, B)         A##B
S# define CONCAT(A, B)           __CONCAT(A, B)
S
Stemplate<typename TYPE, unsigned DIM> constexpr unsigned ArrayDim(TYPE const (&)[DIM]) noexcept { return DIM; }
Stemplate<typename TYPE, unsigned DIM> constexpr unsigned ArrayMax(TYPE const (&)[DIM]) noexcept { return DIM - 1U; }
S
Stemplate<typename TYPE, unsigned H, unsigned W> constexpr unsigned MatrixRows(TYPE const (&)[H][W]) noexcept { return H; }
Stemplate<typename TYPE, unsigned H, unsigned W> constexpr unsigned MatrixCols(TYPE const (&)[H][W]) noexcept { return W; }
S
S/// Achtung: Die obigen Varianten zur Bestimmung von Feld oder Matrixdimensionen funktionieren nicht, wenn das Feld
S/// nicht-statische Member-Variable in einer Klasse ist, weil der this-Zeiger nicht constexpr ist.
S
Sinline void * operator new   (unsigned, void * const p) noexcept { return p; }
Sinline void   operator delete(void *, void *) noexcept { }
S
N#endif
N
L 9 ".\Inc\Debug\Debug.h" 2
N
N# if defined(DEBUG) && ! defined(NO_STACK_CHECK)
X# if 1L && ! 0L
N#  define STACK_CHECK_DEFINED
N
Nvoid StackCheck() noexcept;
Nvoid StackCheckInit() noexcept;
N
N#  define STACK_CHECK           StackCheck
N#  define STACK_CHECK_INIT      StackCheckInit
N# else
S#  define STACK_CHECK()
S#  define STACK_CHECK_INIT()
N# endif
N
N# if defined(DEBUG)
X# if 1L
N
N/// Klassentemplate um das Textmuster für Feldauffüllungen in Abhängigkeit von Datentyp unterschiedlich definieren zu können.
N/// \tparam TYPE ist der Datentyp des Feldes.
Ntemplate<typename TYPE> struct DbgFillItem;
N
Ntemplate<> struct DbgFillItem<UINT08> { DbgFillItem() = delete; static constexpr UINT08 const data =               0xAAU;   };
Xtemplate<> struct DbgFillItem<uint8_t> { DbgFillItem() = delete; static constexpr uint8_t const data =               0xAAU;   };
Ntemplate<> struct DbgFillItem<UINT16> { DbgFillItem() = delete; static constexpr UINT16 const data =             0xAAAAU;   };
Xtemplate<> struct DbgFillItem<uint16_t> { DbgFillItem() = delete; static constexpr uint16_t const data =             0xAAAAU;   };
Ntemplate<> struct DbgFillItem<UINT32> { DbgFillItem() = delete; static constexpr UINT32 const data =         0xAAAAAAAAU;   };
Xtemplate<> struct DbgFillItem<uint32_t> { DbgFillItem() = delete; static constexpr uint32_t const data =         0xAAAAAAAAU;   };
Ntemplate<> struct DbgFillItem<UINT64> { DbgFillItem() = delete; static constexpr UINT64 const data = 0xAAAAAAAAAAAAAAAAULL; };
Xtemplate<> struct DbgFillItem<uint64_t> { DbgFillItem() = delete; static constexpr uint64_t const data = 0xAAAAAAAAAAAAAAAAULL; };
N
Ntemplate<> struct DbgFillItem<SINT08> { DbgFillItem() = delete; static constexpr SINT08 const data =               0x55;    };
Xtemplate<> struct DbgFillItem<int8_t> { DbgFillItem() = delete; static constexpr int8_t const data =               0x55;    };
Ntemplate<> struct DbgFillItem<SINT16> { DbgFillItem() = delete; static constexpr SINT16 const data =             0x5555;    };
Xtemplate<> struct DbgFillItem<int16_t> { DbgFillItem() = delete; static constexpr int16_t const data =             0x5555;    };
Ntemplate<> struct DbgFillItem<SINT32> { DbgFillItem() = delete; static constexpr SINT32 const data =         0x55555555;    };
Xtemplate<> struct DbgFillItem<int32_t> { DbgFillItem() = delete; static constexpr int32_t const data =         0x55555555;    };
Ntemplate<> struct DbgFillItem<SINT64> { DbgFillItem() = delete; static constexpr SINT64 const data = 0x5555555555555555LL;  };
Xtemplate<> struct DbgFillItem<int64_t> { DbgFillItem() = delete; static constexpr int64_t const data = 0x5555555555555555LL;  };
N
Ntemplate<> struct DbgFillItem<char> { DbgFillItem() = delete; static constexpr char const data = '\0'; };
N
Ntemplate<typename TYPE> struct DbgFillItem<TYPE *> { DbgFillItem() = delete; static constexpr TYPE * const data = nullptr; };
N
N/// Funktion zum Füllen eines Feldes mit definierten Mustern.
N/// \param array ist das Datenfeld.
N/// \param dim ist die Dimension des Datenfeldes (Anzahl der Einträge).
N/// \tparam TYPE ist der Datentyp des Feldes, durch den auch das Muster definiert wird.
Ntemplate<typename TYPE>
Nstatic inline void DbgMemFill(TYPE array[], unsigned const dim) noexcept
N{
N  auto i = dim;
N  
N  while ( --i > 0U )
N    array[i] = DbgFillItem<TYPE>::data;
N    
N  STACK_CHECK();
X  StackCheck();
N}
N
N/// Funktion zum Füllen eines Feldes mit definierten Mustern.
N/// \param array ist das Datenfeld.
N/// \tparam TYPE ist der Datentyp des Feldes, durch den auch das Muster definiert wird.
N/// \tparam DIM ist die Feldimension.
Ntemplate<typename TYPE, unsigned DIM>
Nstatic inline void DbgMemFill(TYPE (& array)[DIM]) noexcept
N{
N  DbgMemFill(array, DIM);
N}
N
N#  define DBG_MEM_FILL(A)       DbgMemFill(A)         ///< Auffüllen eines Feldes mit Debug-Mustern, damit ein möglicher Stacküberlauf sicherer erkannt werdne kann.
N# else
S#  define DBG_MEM_FILL(A)       ((void)0)             // Füllen eines Arrays mit Debug-Mustern soll in der Release-Variante NICHT erfolgen.
N# endif
N
N# define STATIC_ASSERT_EXT(MSG, ...) static_assert(__VA_ARGS__, MSG)
N# define STATIC_ASSERT(EXPR)    STATIC_ASSERT_EXT(#EXPR, EXPR)
N
N# if defined(DEBUG) && ! defined(NO_ITM)
X# if 1L && ! 0L
N#  define ITM_TRACE
N
Nvoid ItmPutS(char const * text) noexcept;
N
N#  include <Formatter.h>
L 1 ".\Inc\Utilities\Formatter.h" 1
N//
N// Formatter.h
N//
N
N/// \file Formatter.h
N
N#ifndef guard_FORMATTER_H
N# define guard_FORMATTER_H
N
N# include <Compiler.h>
L 1 ".\Inc\Compiler.h" 1
N//
N// Compiler.h
N//
N
N/// \file Compiler.h
N/// Compiler-spezifische Definitions, Macros und Funktionen.
N/// Um die Quellen auch zu Testzwecken auch mit anderen Compilern (z.B. MSC) übersetzen zu können, müssten in dieser Datei
N/// mittels bedingter Kompilierung verschiedene Makros für die unterschiedlichen Compiler definiert werden.
N
N#if ! defined(guard_COMPILER_H) && defined(__arm__)
X#if ! 1L && 1L
S# define guard_COMPILER_H
S
S# if ! defined(__cplusplus)
S#  error C++ only!
S# endif
S
S# if   defined(_DEBUG)  && ! defined(DEBUG)
S#  define DEBUG
S# endif
S
S# if   defined(RELEASE) &&   defined(DEBUG)
S#  error You cannot define RELEASE and DEBUG at the same time
S# endif
S# if ! defined(RELEASE) && ! defined(DEBUG)
S#  error You must define ether RELEASE or DEBUG
S# endif
S
S# include <stdint.h>
S# include <stdbool.h>
S
S# define BYTE                   uint8_t               ///< Byte-Datentyp (8 Bits).
S# define WORD                   uint32_t              ///< Wort-Datentyp (nach ARM-Konvention 32 Bits, d.h. 4 Bytes).
S# define HWRD                   uint16_t              ///< Halbwort-Datentyp (nach ARM-Konvention 16 Bits, d.h. 2 Bytes).
S# define DWRD                   uint64_t              ///< Doppelwort-Datentyp (nach ARM-Konvention 8 Bytes).
S
S// Nomenklatur <s>INT<nn>:
S// <s> = U bzw. S für unsigned bzw. signed
S// <nn> = 08, 12, 32, 64 für 8 bis 64 Bits
S
S# define UINT64                 uint64_t              ///< 8 byte unsigned int.
S# define SINT64                 int64_t               ///< 8 byte signed int.
S
S# define UINT32                 uint32_t              ///< 4 byte unsigned int.
S# define SINT32                 int32_t               ///< 4 byte signed int.
S
S# define UINT16                 uint16_t              ///< 2 byte unsigned int.
S# define SINT16                 int16_t               ///< 2 byte signed int.
S
S# define UINT08                 uint8_t               ///< Single byte unsigned int.
S# define SINT08                 int8_t                ///< Single byte signed int.
S
S# include <stddef.h>
S
S# if __ARMCC_VERSION >= 6000000
S#  pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
S#  pragma clang diagnostic ignored "-Wnested-anon-types"
S#  pragma clang diagnostic ignored "-Wc++17-compat-mangling"
S#  pragma clang diagnostic ignored "-Wc++98-compat-pedantic"
S#  pragma clang diagnostic ignored "-Wc++98-compat"
S#  pragma clang diagnostic ignored "-Wgcc-compat"
S
S#  define IMPORT(X)             asm(".global " #X);
S
Sstatic __attribute__((always_inline)) inline void ___barrier(void) { asm volatile("" ::: "memory", "cc"); }
S
S#  define SCHEDULE_BARRIER      ___barrier
S#  define FORCE_STORES          ___barrier
S#  define MEMORY_CHANGED        ___barrier
S
S#  define __weak                __attribute__((weak))
S#  define __svc(...)
S#  define __align(x)            __attribute__((aligned(x)))
S
S#  define __clrex               __builtin_arm_clrex
S#  define __dmb                 __builtin_arm_dmb
S#  define __dsb                 __builtin_arm_dsb
S#  define __isb                 __builtin_arm_isb
S#  define __wfi                 __builtin_arm_wfi
S#  define __wfe                 __builtin_arm_wfe
S#  define __rbit                __builtin_arm_rbit
S#  define __rev                 __builtin_bswap32
S#  define __clz                 __builtin_clz
S
S#  define ARM_RSR(NAME)         __builtin_arm_rsr(#NAME)
S#  define ARM_WSR(NAME, VALUE)  __builtin_arm_wsr(#NAME, VALUE)
S
S#  define DEFINE_ARM_RSR(NAME)  inline WORD ARM_RSR_ ## NAME()                 noexcept { return ARM_RSR(NAME); }
S#  define DEFINE_ARM_WSR(NAME)  inline void ARM_WSR_ ## NAME(WORD const value) noexcept { ARM_WSR(NAME, value); }
S
S#  define OFFSET_OF(S, M)       __builtin_offsetof(S, M)
S
S#  define BREAKPOINT(v)         asm volatile("bkpt %0" :: "i"(v))
S
S#  define WRITEONLY             /// not implemented
S#  define READONLY              const
S
S#  define __AT(ADDR)            __attribute__((section(".ARM.__at_" #ADDR)))
S#  define LOCATE_AT(ADDR)       __AT(ADDR)
S
S#  define FORCE_INLINE          __attribute__((always_inline)) inline
S
S#  define FILE                  __FILE__
S#  define FUNC                  __FUNCTION__
S#  define LINE                  __LINE__
S# else
S#  pragma anon_unions
S#  define PRAGMA(X)             _Pragma(#X)
S
S#  define IMPORT(X)             PRAGMA(import(X))
S
S#  define SCHEDULE_BARRIER()    __schedule_barrier() ///< Compiler-spezifische Pseudo-Anweisung, um die compiler-bedingte Umsortierung von Befehlen über diese Grenze hinaus zu unterbinden. 
S#  define FORCE_STORES()        __force_stores()
S#  define MEMORY_CHANGED()      __memory_changed()
S
S#  define DEFINE_ARM_RSR(NAME)  inline WORD ARM_RSR_ ## NAME()                 noexcept { register WORD NAME __asm(#NAME); return NAME; }
S#  define DEFINE_ARM_WSR(NAME)  inline void ARM_WSR_ ## NAME(WORD const value) noexcept { register WORD NAME __asm(#NAME); NAME = value; }
S
S#  define ARM_RSR(NAME)         ARM_RSR_ ## NAME()
S#  define ARM_WSR(NAME, VALUE)  ARM_WSR_ ## NAME(VALUE)
S
S#  define OFFSET_OF(S, M)       offsetof(S, M)
S
S#  define BREAKPOINT(n)         __breakpoint(n)
S
S#  define WRITEONLY             __writeonly
S#  define READONLY              const
S
S#  define LOCATE_AT(ADDR)       __attribute__((at(ADDR)))
S
S#  define FORCE_INLINE          __forceinline
S
S#  define FILE                  __MODULE__            ///< Name der aktuellen Datei.
S
S#  define FUNC                  __PRETTY_FUNCTION__   ///< Name der aktuellen Funktion.
S#  define LINE                  __LINE__              ///< Aktuelle Zeilennummer.
S# endif
S
Snamespace std { using nullptr_t = decltype(nullptr); }
S
S# if defined(DEBUG) && ! defined(NO_BREAK)
S#  define DEBUG_BREAK(n)        BREAKPOINT(n)
S# else
S#  define DEBUG_BREAK(n)
S# endif
S
S# define __CONCAT(A, B)         A##B
S# define CONCAT(A, B)           __CONCAT(A, B)
S
Stemplate<typename TYPE, unsigned DIM> constexpr unsigned ArrayDim(TYPE const (&)[DIM]) noexcept { return DIM; }
Stemplate<typename TYPE, unsigned DIM> constexpr unsigned ArrayMax(TYPE const (&)[DIM]) noexcept { return DIM - 1U; }
S
Stemplate<typename TYPE, unsigned H, unsigned W> constexpr unsigned MatrixRows(TYPE const (&)[H][W]) noexcept { return H; }
Stemplate<typename TYPE, unsigned H, unsigned W> constexpr unsigned MatrixCols(TYPE const (&)[H][W]) noexcept { return W; }
S
S/// Achtung: Die obigen Varianten zur Bestimmung von Feld oder Matrixdimensionen funktionieren nicht, wenn das Feld
S/// nicht-statische Member-Variable in einer Klasse ist, weil der this-Zeiger nicht constexpr ist.
S
Sinline void * operator new   (unsigned, void * const p) noexcept { return p; }
Sinline void   operator delete(void *, void *) noexcept { }
S
N#endif
N
L 11 ".\Inc\Utilities\Formatter.h" 2
N
Nclass Formatter;
N
Ntemplate<typename TYPE> inline void PrintObj(Formatter & fmt, TYPE const & obj) noexcept { obj.ToString(fmt); }
N
N/// Klasse zur allgemeinen Ausgabeformatierung.
N/// Dieser Klasse ermöglicht es, beliebige Datentypen in einen Text umzuwandeln, d.h. sie menschenlesbar darzustellen.
N/// Hierzu wird ausgabeseitig ein (sequentieller) Bytedatenstrom erzeugt, welcher die ASCII-Zeichen der Textdarstellung beinhaltet.
N/// Die zu formatierenden Daten werden nacheinander, in der Reihenfolge des entspr. Funktionsaufrufs dargestellt.
Nclass Formatter 
N{
N  public:
N
N  class ISink
N  {
N    protected:
N    
N    constexpr ISink() noexcept { }
N    
N    public:
N    
N    ISink(ISink const &) = delete;
N    ISink(ISink      &&) = delete;
N    
N    virtual ~ISink() = default;
N    
N    ISink & operator = (ISink const &) = delete;
N    ISink & operator = (ISink      &&) = delete;
N
N    virtual void WriteByte(BYTE chr) noexcept = 0;    
X    virtual void WriteByte(uint8_t chr) noexcept = 0;    
N  };
N  
N  class SinkFromBuf : public Formatter::ISink
N  {
N    public:
N    
N    SinkFromBuf(char buffer[], unsigned const dim) noexcept : 
N      string(buffer), 
N      max(dim - 1U) 
N    { 
N      Reset(); 
N    }
N
N    template<unsigned DIM>
N    explicit SinkFromBuf(char (& buffer)[DIM]) noexcept : SinkFromBuf(buffer, DIM) { }
N    
N    SinkFromBuf(SinkFromBuf const &) = delete;
N    SinkFromBuf(SinkFromBuf      &&) = delete;
N    
N    virtual ~SinkFromBuf() override = default;
N
N    SinkFromBuf & operator = (SinkFromBuf const &) = delete;
N    SinkFromBuf & operator = (SinkFromBuf      &&) = delete;
N    
N    operator char const * () const noexcept { return GetString(); }
N    operator unsigned     () const noexcept { return GetLength(); }
N    
N    unsigned GetLength() const noexcept { return length; }
N    
N    char const * GetString() const noexcept { return string; }
N    
N    virtual void WriteByte(BYTE const chr) noexcept override 
X    virtual void WriteByte(uint8_t const chr) noexcept override 
N    {
N      if ( length < max ) 
N      {
N        string[length++] = chr;
N        string[length  ] = '\0';
N      }
N    }
N    
N    void Reset() { length = 0U; *string = '\0'; }
N
N    private:
N    
N    char * const string;
N    unsigned const max;
N    unsigned length;
N  };
N  
N  /// Ctor.
N  /// \param[in] put ist die Datensenke zu Aufnahme des Ausgabe-Datenstroms (ASCII-Zeichen, nicht-darstellbare Zeichen werden kodiert).
N  explicit Formatter(ISink & intrf) noexcept : sink(intrf) { }
N
N  Formatter(Formatter const &) = delete;
N  Formatter(Formatter      &&) = delete;
N
N  virtual ~Formatter() = default;
N
N  Formatter & operator = (Formatter const &) = delete;
N  Formatter & operator = (Formatter      &&) = delete;
N
N  /// Datentype zur Darstellung der Zahlenbasis bei der Ausgabe numerischer Werte.
N  enum class RadixMdType
N  {
N    printDec,                   ///< Dezimale Zahlendarstellung.
N    printHex,                   ///< Hexadezimale Zahlendarstellung.    
N    autoMode                    ///< Automatische Umschaltung zwischen hexadezimaler (bei führender \c 0x) und dezimaler Darstellung.
N  };
N
N  /// Allgemeine Formatierungsangabe.
N  /// Diese Aufzählungen lassen sich wie Daten und Objekte in die Ausgabe einfügen. Sie bewirken
N  /// nicht, dass Zeichen in den Ausgabestrom hinzugefügt werden, sondern verändern die nachfolgende Art der Formatierung
N  /// bzw. bewirken sonstige Sonderfunktionen.
N  enum class FmtModeType
N  {
N    showSign,                   ///< Zahlenwerte immer mit Vorzeichen (Minus- oder Plus-Zeichen) darstellen.
N    nakedNum,                   ///< Zahlenwerte nur wenn negativ mit Vorzeichen (Minus-Zeichem) darstellen.
N    plainHex,                   ///< Hexadezimale Zahlendarstellung ohne führendes \c 0x aktivieren.
N    hexMode,                    ///< Hexadezimale Zahlendarstellung aktivieren.
N    decMode,                    ///< Dezimale Zahlendarstellung aktivieren.   
N    autoHex                     ///< Automatische hexdezimal/dezimal-Umschaltung aktivieren.
N  };
N
N  /// Wrapper, um einzelnes Zeichen codiert (in Hochkommas, Steuerzeichen werden nach der C-Konvention expandiert) auszugeben.
N  class AsChr final
N  {
N    public:
N
N    explicit
N    constexpr AsChr(BYTE  const arg)   noexcept : chr(arg)     { }
X    constexpr AsChr(uint8_t  const arg)   noexcept : chr(arg)     { }
N    constexpr AsChr(AsChr const & org) noexcept : chr(org.chr) { }
N    constexpr AsChr(AsChr      && org) noexcept : chr(org.chr) { }
N
N    ~AsChr() = default;
N    
N    AsChr & operator = (AsChr const &) = delete;
N    AsChr & operator = (AsChr      &&) = delete;
N
N    BYTE GetChr() const noexcept { return chr; }
X    uint8_t GetChr() const noexcept { return chr; }
N
N    void ToString(Formatter & fmt) const noexcept { fmt.PrintChr(*this); }
N
N    private:
N
N    BYTE const chr;
X    uint8_t const chr;
N  };
N
N  /// Wrapper um einen Text-String codiert (in Hochkommas, Steuerzeichen werden nach der C-Konvention expandiert) auszugeben.
N  class AsTxt final
N  {
N    public:
N
N    explicit
N    constexpr AsTxt(char const arg[])  noexcept : text(arg)   { }
N    explicit
N    constexpr AsTxt(BYTE const arg[])  noexcept : data(arg)   { }
X    constexpr AsTxt(uint8_t const arg[])  noexcept : data(arg)   { }
N    constexpr AsTxt(AsTxt const & org) noexcept : text(org.text) { }
N    constexpr AsTxt(AsTxt      && org) noexcept : text(org.text) { }
N
N    ~AsTxt() = default;
N
N    AsTxt & operator = (AsTxt const &) = delete;
N    AsTxt & operator = (AsTxt      &&) = delete;
N
N    char const * GetTxt() const noexcept { return text; }
N
N    void ToString(Formatter & fmt) const noexcept
N    { 
N      auto const tmp(GetTxt());
N      
N      if ( tmp == nullptr )
N        fmt.PrintTxt("nullptr", 1);
N      else
N        fmt.PrintTxtQuoted(tmp); 
N    }
N
N    private:
N
N    union {
N      char const * text;
N      BYTE const * data;
X      uint8_t const * data;
N    };
N  };
N
N  /// Wrapper um Anzahl der Stellen bei numerischen Werten anzugeben.
N  class Digits final
N  {
N    public:
N
N    explicit
N    constexpr Digits(int const arg)      noexcept : num(arg)   { }
N    constexpr Digits(Digits const & org) noexcept : num(org.num) { }
N    constexpr Digits(Digits      && org) noexcept : num(org.num) { }
N
N    ~Digits() = default;
N    
N    Digits & operator = (Digits const &) = delete;
N    Digits & operator = (Digits      &&) = delete;
N
N    int GetNum() const noexcept { return num; }
N
N    void ToString(Formatter & fmt) const noexcept { fmt.SetNumDigits(GetNum()); }
N
N    private:
N
N    int const num;
N  };
N
N  /// Wrapper um Feldbreite anzugeben.
N  class Length final
N  {
N    public:
N
N    explicit
N    constexpr Length(int const arg)      : num(arg)   { }
N    constexpr Length(Length const & org) : num(org.num) { }
N    constexpr Length(Length      && org) : num(org.num) { }
N
N    ~Length() = default;
N
N    Length & operator = (Length const &) = delete;
N    Length & operator = (Length      &&) = delete;
N
N    int GetNum() const noexcept { return num; }
N
N    void ToString(Formatter & fmt) const noexcept { fmt.SetMinLength(GetNum()); }
N
N    private:
N
N    int const num;
N  };
N
N  /// UINT32 dezimal darstellen.
N  /// \param[in] value ist der darzustellende Wert.
N  /// \param[in] digits gibt die Mindestanzahl der Stellen an, ggf. wird mit Nullen linksseitig aufgefüllt.
N  /// \param[in] length gibt die Feldbreite an, ggf. wird mit Leerzeichen linksseitig aufgefüllt.
N  /// \param[in] pm ist \c true, wenn der Wert mit führendem Vorzeichen (immer \c '+') dargestellt werden soll.
N  void PrintUINT32Dec(UINT32         value, int digits, int length, bool pm = false) noexcept;
X  void PrintUINT32Dec(uint32_t         value, int digits, int length, bool pm = false) noexcept;
N
N  void PrintUINT64Dec(UINT64 const & value, int digits, int length, bool pm = false) noexcept;
X  void PrintUINT64Dec(uint64_t const & value, int digits, int length, bool pm = false) noexcept;
N
N  /// SINT32 dezimal darstellen.
N  /// \param[in] value ist der darzustellende Wert.
N  /// \param[in] digits gibt die Mindestanzahl der Stellen an, ggf. wird mit Nullen linksseitig aufgefüllt.
N  /// \param[in] length gibt die Feldbreite an, ggf. wird mit Leerzeichen linksseitig aufgefüllt.
N  /// \param[in] pm ist \c true, wenn der Wert mit führendem Vorzeichen (entweder \c '+' oder \c '-') dargestellt werden soll.
N  void PrintSINT32Dec(SINT32         value, int digits, int length, bool pm) noexcept;
X  void PrintSINT32Dec(int32_t         value, int digits, int length, bool pm) noexcept;
N
N  void PrintSINT64Dec(SINT64 const & value, int digits, int length, bool pm) noexcept;
X  void PrintSINT64Dec(int64_t const & value, int digits, int length, bool pm) noexcept;
N
N  /// UINT32 hexadezimal hexadarstellen.
N  /// \param[in] value ist der darzustellende Wert.
N  /// \param[in] digits gibt die Mindestanzahl der Stellen an, ggf. wird mit Nullen linksseitig aufgefüllt.
N  /// \param[in] length gibt die Feldbreite an, ggf. wird mit Leerzeichen linksseitig aufgefüllt.
N  /// \param[in] xp ist \c true, wenn der Hex-Wert mit führendem \c 0x dargestellt werden soll.
N  void PrintUINT32Hex(UINT32         value, int digits, int length, bool xp) noexcept;
X  void PrintUINT32Hex(uint32_t         value, int digits, int length, bool xp) noexcept;
N
N  void PrintSINT32Hex(SINT32 const   value, int digits, int length, bool xp) noexcept
X  void PrintSINT32Hex(int32_t const   value, int digits, int length, bool xp) noexcept
N  {
N    Int32Type const tmp = { value };
N      
N    PrintUINT32Hex(tmp.u, digits, length, xp);
N  }
N  
N  void PrintUINT64Hex(UINT64 const & value, int digits, int length, bool xp) noexcept;
X  void PrintUINT64Hex(uint64_t const & value, int digits, int length, bool xp) noexcept;
N
N  void PrintSINT64Hex(SINT64 const & value, int digits, int length, bool xp) noexcept
X  void PrintSINT64Hex(int64_t const & value, int digits, int length, bool xp) noexcept
N  {
N    Int64Type const tmp = { value };
N      
N    PrintUINT64Hex(tmp.u, digits, length, xp);
N  }
N
N  /// UINT32 dezimal darstellen.
N  /// \param[in] value ist der darzustellende Wert.
N  /// \param[in] digits gibt die Mindestanzahl der Stellen an, ggf. wird mit Nullen linksseitig aufgefüllt.
N  void PrintUINT32Dec(UINT32 const   value, int const digits) noexcept { PrintUINT32Dec(value, digits, minlen, sign); }
X  void PrintUINT32Dec(uint32_t const   value, int const digits) noexcept { PrintUINT32Dec(value, digits, minlen, sign); }
N
N  void PrintUINT64Dec(UINT64 const & value, int const digits) noexcept { PrintUINT64Dec(value, digits, minlen, sign); }
X  void PrintUINT64Dec(uint64_t const & value, int const digits) noexcept { PrintUINT64Dec(value, digits, minlen, sign); }
N
N  /// SINT32 dezimal darstellen.
N  /// \param[in] value ist der darzustellende Wert.
N  /// \param[in] digits gibt die Mindestanzahl der Stellen an, ggf. wird mit Nullen linksseitig aufgefüllt.
N  void PrintSINT32Dec(SINT32 const   value, int const digits) noexcept { PrintSINT32Dec(value, digits, minlen, sign); }
X  void PrintSINT32Dec(int32_t const   value, int const digits) noexcept { PrintSINT32Dec(value, digits, minlen, sign); }
N
N  void PrintSINT64Dec(SINT64 const & value, int const digits) noexcept { PrintSINT64Dec(value, digits, minlen, sign); }
X  void PrintSINT64Dec(int64_t const & value, int const digits) noexcept { PrintSINT64Dec(value, digits, minlen, sign); }
N
N  /// UINT32 hexadezimal hexadarstellen.
N  /// \param[in] value ist der darzustellende Wert.
N  /// \param[in] digits gibt die Mindestanzahl der Stellen an, ggf. wird mit Nullen linksseitig aufgefüllt.
N  void PrintUINT32Hex(UINT32 const   value, int const digits) noexcept { PrintUINT32Hex(value, digits, minlen, mark); }
X  void PrintUINT32Hex(uint32_t const   value, int const digits) noexcept { PrintUINT32Hex(value, digits, minlen, mark); }
N
N  void PrintSINT32Hex(SINT32 const   value, int const digits) noexcept { PrintSINT32Hex(value, digits, minlen, mark); }
X  void PrintSINT32Hex(int32_t const   value, int const digits) noexcept { PrintSINT32Hex(value, digits, minlen, mark); }
N
N  void PrintUINT64Hex(UINT64 const & value, int const digits) noexcept { PrintUINT64Hex(value, digits, minlen, mark); }
X  void PrintUINT64Hex(uint64_t const & value, int const digits) noexcept { PrintUINT64Hex(value, digits, minlen, mark); }
N
N  void PrintSINT64Hex(SINT64 const & value, int const digits) noexcept { PrintSINT64Hex(value, digits, minlen, mark); }
X  void PrintSINT64Hex(int64_t const & value, int const digits) noexcept { PrintSINT64Hex(value, digits, minlen, mark); }
N
N  /// UINT32 dezimal darstellen.
N  /// \param[in] value ist der darzustellende Wert.
N  void PrintUINT32Dec(UINT32 const   value) noexcept { PrintUINT32Dec(value, mindig); }
X  void PrintUINT32Dec(uint32_t const   value) noexcept { PrintUINT32Dec(value, mindig); }
N
N  void PrintUINT64Dec(UINT64 const & value) noexcept { PrintUINT64Dec(value, mindig); }
X  void PrintUINT64Dec(uint64_t const & value) noexcept { PrintUINT64Dec(value, mindig); }
N  
N  /// SINT32 dezimal darstellen (Anzahl der Stellen wie zuvor angegeben).
N  /// \param[in] value ist der darzustellende Wert.
N  void PrintSINT32Dec(SINT32 const   value) noexcept { PrintSINT32Dec(value, mindig); }
X  void PrintSINT32Dec(int32_t const   value) noexcept { PrintSINT32Dec(value, mindig); }
N
N  void PrintSINT64Dec(SINT64 const & value) noexcept { PrintSINT64Dec(value, mindig); }
X  void PrintSINT64Dec(int64_t const & value) noexcept { PrintSINT64Dec(value, mindig); }
N
N  /// UINT32 hexadezimal hexadarstellen (Anzahl der Stellen wie zuvor angegeben).
N  /// \param[in] value ist der darzustellende Wert.
N  void PrintUINT32Hex(UINT32 const   value) noexcept { PrintUINT32Hex(value, mindig); }
X  void PrintUINT32Hex(uint32_t const   value) noexcept { PrintUINT32Hex(value, mindig); }
N
N  void PrintSINT32Hex(SINT32 const   value) noexcept { PrintSINT32Hex(value, mindig); }
X  void PrintSINT32Hex(int32_t const   value) noexcept { PrintSINT32Hex(value, mindig); }
N
N  void PrintUINT64Hex(UINT64 const & value) noexcept { PrintUINT64Hex(value, mindig); }
X  void PrintUINT64Hex(uint64_t const & value) noexcept { PrintUINT64Hex(value, mindig); }
N
N  void PrintSINT64Hex(SINT64 const & value) noexcept { PrintSINT64Hex(value, mindig); }
X  void PrintSINT64Hex(int64_t const & value) noexcept { PrintSINT64Hex(value, mindig); }
N
N  /// UINT32 darstellen (je nach aktuellem Modus dezimal oder hexadezimal).
N  /// \param[in] value ist der darzustellende Wert.
N  void PrintUINT32(UINT32 const value) noexcept
X  void PrintUINT32(uint32_t const value) noexcept
N  {
N    if ( HexFlag() )
N      PrintUINT32Hex(value);
N    else
N      PrintUINT32Dec(value);
N  }
N
N  void PrintUINT64(UINT64 const & value) noexcept
X  void PrintUINT64(uint64_t const & value) noexcept
N  {
N    if ( HexFlag() )
N      PrintUINT64Hex(value);
N    else
N      PrintUINT64Dec(value);
N  }
N
N  /// SINT32 darstellen (je nach aktuellem Modus dezimal oder hexadezimal).
N  /// \param[in] value ist der darzustellende Wert.
N  void PrintSINT32(SINT32 const   value) noexcept
X  void PrintSINT32(int32_t const   value) noexcept
N  {
N    if ( HexFlag() )
N      PrintSINT32Hex(value);
N    else
N      PrintSINT32Dec(value);
N  }
N
N  void PrintSINT64(SINT64 const & value) noexcept
X  void PrintSINT64(int64_t const & value) noexcept
N  {
N    if ( HexFlag() )
N      PrintSINT64Hex(value);
N    else
N      PrintSINT64Dec(value);
N  }
N
N  void PrintArr(BYTE const arr[], unsigned dim, char sep) noexcept;
X  void PrintArr(uint8_t const arr[], unsigned dim, char sep) noexcept;
N
N  template<unsigned DIM>
N  inline void PrintArr(BYTE const (& arr)[DIM], char const sep) noexcept { PrintArr(arr, DIM, sep); }
X  inline void PrintArr(uint8_t const (& arr)[DIM], char const sep) noexcept { PrintArr(arr, DIM, sep); }
N
N  /// ASCII-Zeichen darstellen.
N  /// \param[in] chr ist der ASCII-Code des darzustellenden Zeichens.
N  void PrintChr(BYTE const chr) noexcept { WriteByte(chr); ResetWidth(); }
X  void PrintChr(uint8_t const chr) noexcept { WriteByte(chr); ResetWidth(); }
N
N  /// ASCII-Zeichen in einfachen Anführungszeichen darstellen.
N  /// \param[in] value stellt den Zeichencode dar.
N  void PrintChrQuoted(BYTE const chr) noexcept;
X  void PrintChrQuoted(uint8_t const chr) noexcept;
N
N  /// ASCII-Zeichen in einfachen Anführungszeichen darstellen.
N  /// \param[in] value stellt den Zeichencode dar.
N  void PrintChr(AsChr const & value) noexcept { return PrintChrQuoted(value.GetChr()); }
N
N  /// ASCIIZ-String (zeichenweise, linksbuendig) darstellen.
N  /// \param[in] text zeigt auf den darzustellenden Text.
N  /// \param[in] length gibt die minimale Feldbreite an, übersteuert die Einstellung von Formater::SetMinLength()
N  void PrintTxt(char const * text, int length) noexcept;
N
N  /// ASCIIZ-String (zeichenweise) darstellen.
N  /// \param[in] text zeigt auf den darzustellenden Text (Steuerzeichen möglich, werden jedoch sinnvoll dargestellt).
N  void PrintTxt(char const * const text) noexcept { PrintTxt(text, minlen); ResetWidth(); }
N
N  /// ASCIIZ-String mit CH_DQUOTE einschliessen und darstellen, Steuerzeichen wie CR oder LF werden nach der C-Konvention expandiert.
N  /// \param[in] text zeigt auf den darzustellenden Text (Steuerzeichen erlaubt und werden sinnvoll dargestellt).
N  void PrintTxtQuoted(char const * text) noexcept;
N  
N  /// ASCIIZ-String mit CH_DQUOTE einschliessen und darstellen, Steuerzeichen wie CR oder LF werden nach der C-Konvention expandiert.
N  /// \param[in] value beinhaltet den darzustellenden Text (Steuerzeichen erlaubt und werden sinnvoll dargestellt).
N  void PrintTxt(AsTxt const & value) noexcept { value.ToString(*this); }
N
N  void Print(UINT64           const   value) noexcept { PrintUINT64(value); }
X  void Print(uint64_t           const   value) noexcept { PrintUINT64(value); }
N
N  void Print(SINT64           const & value) noexcept { PrintSINT64(value); }
X  void Print(int64_t           const & value) noexcept { PrintSINT64(value); }
N
N  /// \copydoc PrintUINT32(UINT32)
N  void Print(UINT32           const   value) noexcept { PrintUINT32(value); }
X  void Print(uint32_t           const   value) noexcept { PrintUINT32(value); }
N
N  /// \copydoc PrintSINT32(SINT32)
N  void Print(SINT32           const   value) noexcept { PrintSINT32(value); }
X  void Print(int32_t           const   value) noexcept { PrintSINT32(value); }
N
N  /// UINT16 darstellen (je nach aktuellem Modus dezimal oder hexadezimal).
N  /// \param[in] value ist der darzustellende Wert.
N  void Print(UINT16           const   value) noexcept { PrintUINT32(value); }
X  void Print(uint16_t           const   value) noexcept { PrintUINT32(value); }
N
N  /// SINT16 darstellen (je nach aktuellem Modus dezimal oder hexadezimal).
N  /// \param[in] value ist der darzustellende Wert.
N  void Print(SINT16           const   value) noexcept { PrintSINT32(value); }
X  void Print(int16_t           const   value) noexcept { PrintSINT32(value); }
N
N  /// UINT08 darstellen (je nach aktuellem Modus dezimal oder hexadezimal).
N  /// \param[in] value ist der darzustellende Wert.
N  void Print(UINT08           const   value) noexcept { PrintUINT32(value); }
X  void Print(uint8_t           const   value) noexcept { PrintUINT32(value); }
N
N  /// SINT08 darstellen (je nach aktuellem Modus dezimal oder hexadezimal).
N  /// \param[in] value ist der darzustellende Wert.
N  void Print(SINT08           const   value) noexcept { PrintSINT32(value); }
X  void Print(int8_t           const   value) noexcept { PrintSINT32(value); }
N
N  /// ASCIIZ-String ohne Anführungszeichen ausgeben.
N  /// \param[in] text zeigt auf den ASCIIZ-String.
N  /// \note Der auszugebende String sollte nur darstellbare Zeichen beinhalten.
N  void Print(char const *     const   text  ) noexcept { PrintTxt(text); }
N
N  /// ASCII-Zeichen ohne Anführungszeichen ausgeben.
N  /// \param[in] value ist der ASCII-Code des Zeichens.
N  /// \note Das auszugebende Zeichen sollte darstellbar sein.
N  void Print(char             const   value) noexcept { PrintChr(value); }
N
N  void Print(FmtModeType      const   value) noexcept { SetFormat(value); }
N  void Print(RadixMdType      const   value) noexcept { SetRadix(value); }
N
N  /// Wert eines Boole'sche Variable ausgeben.
N  /// \param[in] value ist der Wert der Boole'schen Variable .
N  void Print(bool             const   value) noexcept { PrintTxt(value ? "true" : "false", 1); }
N
N  /// Generische Print-Funktion.
N  /// \param[in] obj ist die Referenz auf die Instanz des darzustellenden Objektes
N  /// \tparam TYPE ist der Datentyp des darzustellenden Objektes (\b muss eine Funktion \c ToString(Formater &) 
N  /// oder (alternativ) \c ToString(IPutNoThrow<BYTE> &) implementieren.
N  template<typename TYPE> void Print(TYPE const & obj) noexcept { PrintObj(*this, obj); }
N
N  template<typename TYPE, typename ... ARGS> void Print(TYPE const & obj, ARGS const & ... args) noexcept
N  {
N    Print(obj);
N    Print(args ...);
N  }
N
N  /// Zahlenbasis kommandieren (persistent, d.h. bleibt gültig bis zum nächsten Aufruf).
N  /// \param[in] mode gibt die Zahlenbasis an.
N  void SetRadix(RadixMdType const mode) noexcept { radix = mode; }
N
N  RadixMdType GetRadix() const noexcept { return radix; }
N
N  /// Vorzeichenmodus kommandieren.
N  /// \param[in] mode ist \c true, wenn alle Dezimalzahlen (auch die positiven oder 0) immer mit Vorzeichen ausgegben werden sollen.
N  void SetSign(bool const mode = true) noexcept { sign = mode; }
N
N  /// Kommandieren, ob hexadezimale Darstellungen immer ein führendes "0x" haben sollen.
N  /// \param[in] mode ist \c true, wenn alle hexadezimale Darstellungen mit "0x" beginnen sollen.
N  void SetPrefix(bool const mode = true) noexcept { mark = mode; }
N
N  /// Feldbreite einstellen (wirkt nur einmal für die nächste Darstellung).
N  /// \param[in] length ist die minimale Feldbreite.
N  void SetMinLength(int const length) noexcept { minlen = length; }
N  
N  /// Anzahl der Stellen angeben (wirkt nur einmal für die nächste Darstellung).
N  /// Ganze Zahlen können mit führenden Nullen dargestellt werden. Diese Funktion gibt an, über wieviele Stellen die
N  /// Darstellung mindestens verfügen soll. Ggf. wird dann linksseitig mit Nullen aufgefüllt. Es ist jedoch auch möglich, dass
N  /// mehr Stellen als angegeben zur fehlerfreien Darstellung verwendet werden müssen, z.B. dann wenn die Zahl größer ist, als
N  /// durch die angegebene Stellenanzahl definiert.
N  /// \param[in] digits gibt die Mindestanzahl der Stellen an.
N  void SetNumDigits(int const digits) noexcept { mindig = digits; }
N
N  /// Formatinformation kommandieren.
N  /// \param[in] mode beinhaltet die Formatinformation.
N  void SetFormat(FmtModeType mode) noexcept;
N
N  void SetCoding(bool const mode) noexcept { coding = mode; }
N
N  bool GetCoding() const noexcept { return coding; }
N
N  /// Rückstellen der Stellenanzahl und Breite.
N  void ResetWidth() noexcept
N  {
N    mindig = 0;
N    minlen = 0;
N  }
N
N  void WriteByte(BYTE chr) noexcept;
X  void WriteByte(uint8_t chr) noexcept;
N
N  void WriteByteRepeated(BYTE const chr, int n) noexcept
X  void WriteByteRepeated(uint8_t const chr, int n) noexcept
N  {
N    while ( n-- > 0 ) 
N      WriteByte(chr);
N  }
N  
N  private:
N
N  bool HexFlag() const noexcept { return radix == RadixMdType::printHex || (radix == RadixMdType::autoMode && prefixed); }
N
N  typedef union {
N    SINT32 s;
X    int32_t s;
N    UINT32 u;
X    uint32_t u;
N  } Int32Type;
N
N  typedef union {
N    SINT64 s;
X    int64_t s;
N    UINT64 u;
X    uint64_t u;
N  } Int64Type;
N
N  ISink & sink;
N  int mindig = 1;               ///< Mindestanzahl der Ziffern bei numerischer Darstellung (wird verwendet, wenn keine Mindestanzahl explizit angegeben wurde).
N  int minlen = 1;               ///< Default-Wert der aktuellen Mindestfeldbreite (wird verwendet, wenn keine Mindestfeldbreite explizit angegeben wurde).
N  RadixMdType radix = RadixMdType::autoMode; ///< Aktuelle Modus um zwischen dezimaler und hexadezimaler Darstellung zu wählen.
N  BYTE history[2] { '\0', '\0' }; ///< Puffer für die letzten beiden ausgegbenen Zeichen.
X  uint8_t history[2] { '\0', '\0' }; 
N  bool prefixed = false;        ///< Flag; \c true, wenn \c 0x zuletzt ausgegeben.
N  bool mark = true;             ///< Flag; \c true, wenn hexadezimale Zahlen immer mit führendem \c 0x dargestellt werden sollen.
N  bool sign = false;            ///< Vorzeichen-Flag (ist \c true, wenn immer mit Vorzeichen dargestellt wird, es sein denn es wird explizit übersteuert).
N  bool coding = true;
N  HWRD reserved = 0;
X  uint16_t reserved = 0;
N};
N
N#endif
L 82 ".\Inc\Debug\Debug.h" 2
N
NFormatter & ItmFmt() noexcept;
N
Ntemplate<typename ... ARGS> 
Ninline void ItmPrint(ARGS const & ... args) noexcept
N{
N  auto & fmt(ItmFmt());
N  
N  fmt.Print(args ...);
N  
N  STACK_CHECK();
X  StackCheck();
N}
N#  include <Cortex.h>
N
N#  define ITM_PUTS              ItmPutS
N#  define ITM_PRINT(...)        ItmPrint(__VA_ARGS__)
N#  define LOG_PRINT(...)        ItmPrint(Formatter::Digits(8), Cortex::GetTicks(), ' ', Formatter::Length(25), FILE, "(", Formatter::Digits(4), LINE, ") ", __FUNCTION__, ": ", __VA_ARGS__)
N# else
S#  define ITM_PUTS(T)
S#  define ITM_PRINT(...)
S#  define LOG_PRINT(...)
N# endif
N
N/// Hilfsklasse, um zu Prüfen, ob ein Index gültig ist.
N/// \tparam TYPE ist der Index-Datentyp.
N/// \tparam SIGNED ist true, wenn der Index auch negative Werte annehmen kann.
Ntemplate<typename TYPE, bool SIGNED>
Nclass IndexHelper;
N
Ntemplate<typename TYPE> class IndexHelper<TYPE, true>
N{
N  public:
N  
N  IndexHelper() = delete;
N  
N  static constexpr TYPE const zero = 0;
N  
N  /// Prüfe, ob Index gültig ist.
N  /// \param indx ist der zu prüfende Index.
N  /// \param max ist die Indexobergrenze.
N  static constexpr bool Verify(TYPE const indx, TYPE const max) noexcept { return indx > max || indx < zero; }
N};
N
Ntemplate<typename TYPE> class IndexHelper<TYPE, false>
N{
N  public:
N  
N  IndexHelper() = delete;
N  
N  /// Prüfe, ob Index gültig ist.
N  /// \param indx ist der zu prüfende Index.
N  /// \param max ist die Indexobergrenze.
N  static constexpr bool Verify(TYPE const indx, TYPE const max) noexcept { return indx > max; }
N};
N
N# include <Meta.h>
L 1 ".\Inc\Utilities\Meta.h" 1
N//
N// Meta.h
N//
N
N/// \file Meta.h
N/// Meta-Programmierung (inspiriert und zum Teil auch Idee geklaut von www.boost.org).
N
N#ifndef guard_META_H
N# define guard_META_H
N
N// Some plain type traits etc. re-inventions.
N
N/// Typengenerator um das Typenattribut \c const von einem Typ zu entfernen.
N/// \tparam TYPE ist der Input-Typ.
Ntemplate<typename TYPE>
Nstruct RemConst
N{
N  typedef TYPE Type;
N};
N
Ntemplate<typename TYPE> struct RemConst<TYPE const> { typedef TYPE Type; };
N
N/// Typengenerator um das Typenattribut \c const zu einem Typ hinzuzufügen.
N/// \tparam TYPE ist der Input-Typ.
Ntemplate<typename TYPE>
Nstruct AddConst
N{
N  typedef typename RemConst<TYPE>::Type const Type;
N};
N
N/// Typengenerator um das Typenattribut \c volatile von einem Typ zu entfernen.
N/// \tparam TYPE ist der Input-Typ.
Ntemplate<typename TYPE>
Nstruct RemVolatile
N{
N  typedef TYPE Type;
N};
N
Ntemplate<typename TYPE> struct RemVolatile<TYPE const> { typedef TYPE Type; };
N
Ntemplate<typename TYPE>
Nstruct RemAttr
N{
N  typedef typename RemVolatile<typename RemConst<TYPE>::Type>::Type Type;
N};
N
N/// Typengenerator um aus einem Referenz-Typ einen Werte-Typ zu machen (entfernt \c &, 
N/// d.h. macht aus der Referenz auf ein Datum (l-value or r-value reference) einen Wert.
N/// \tparam TYPE ist der Input-Typ.
Ntemplate<typename TYPE>
Nstruct RemRef
N{
N  typedef TYPE Type;
N};
N
Ntemplate<typename TYPE> struct RemRef<TYPE  &> { typedef TYPE Type; };
Ntemplate<typename TYPE> struct RemRef<TYPE &&> { typedef TYPE Type; };
N
N/// Typengenerator um das Typenattribut \c const von einem Typ zu entfernen und daraus einen Werte-Typ zu machen.
N/// \tparam TYPE ist der Input-Typ.
N/// \sa RemConst
N/// \sa RemRef
Ntemplate<typename TYPE>
Nstruct RemAll
N{
N  typedef typename RemRef<typename RemAttr<TYPE>::Type>::Type Type;
N};
N
N/// Typengenerator um in Abhängigkeit eines (zur Compile-Zeit konstanten) logischen Ausdrucks zwischen zwei Typen auszuwählen.
Ntemplate<bool COND, class THEN, class ELSE> 
Nstruct IfThenElse
N{
N  typedef THEN Type;
N};
N
Ntemplate<class THEN, class ELSE> struct IfThenElse<false, THEN, ELSE> { typedef ELSE Type; };
N
Nstruct IsTrue  { static constexpr bool const flag = true;  };
Nstruct IsFalse { static constexpr bool const flag = false; };
N
N# include <Compiler.h>
L 1 ".\Inc\Compiler.h" 1
N//
N// Compiler.h
N//
N
N/// \file Compiler.h
N/// Compiler-spezifische Definitions, Macros und Funktionen.
N/// Um die Quellen auch zu Testzwecken auch mit anderen Compilern (z.B. MSC) übersetzen zu können, müssten in dieser Datei
N/// mittels bedingter Kompilierung verschiedene Makros für die unterschiedlichen Compiler definiert werden.
N
N#if ! defined(guard_COMPILER_H) && defined(__arm__)
X#if ! 1L && 1L
S# define guard_COMPILER_H
S
S# if ! defined(__cplusplus)
S#  error C++ only!
S# endif
S
S# if   defined(_DEBUG)  && ! defined(DEBUG)
S#  define DEBUG
S# endif
S
S# if   defined(RELEASE) &&   defined(DEBUG)
S#  error You cannot define RELEASE and DEBUG at the same time
S# endif
S# if ! defined(RELEASE) && ! defined(DEBUG)
S#  error You must define ether RELEASE or DEBUG
S# endif
S
S# include <stdint.h>
S# include <stdbool.h>
S
S# define BYTE                   uint8_t               ///< Byte-Datentyp (8 Bits).
S# define WORD                   uint32_t              ///< Wort-Datentyp (nach ARM-Konvention 32 Bits, d.h. 4 Bytes).
S# define HWRD                   uint16_t              ///< Halbwort-Datentyp (nach ARM-Konvention 16 Bits, d.h. 2 Bytes).
S# define DWRD                   uint64_t              ///< Doppelwort-Datentyp (nach ARM-Konvention 8 Bytes).
S
S// Nomenklatur <s>INT<nn>:
S// <s> = U bzw. S für unsigned bzw. signed
S// <nn> = 08, 12, 32, 64 für 8 bis 64 Bits
S
S# define UINT64                 uint64_t              ///< 8 byte unsigned int.
S# define SINT64                 int64_t               ///< 8 byte signed int.
S
S# define UINT32                 uint32_t              ///< 4 byte unsigned int.
S# define SINT32                 int32_t               ///< 4 byte signed int.
S
S# define UINT16                 uint16_t              ///< 2 byte unsigned int.
S# define SINT16                 int16_t               ///< 2 byte signed int.
S
S# define UINT08                 uint8_t               ///< Single byte unsigned int.
S# define SINT08                 int8_t                ///< Single byte signed int.
S
S# include <stddef.h>
S
S# if __ARMCC_VERSION >= 6000000
S#  pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
S#  pragma clang diagnostic ignored "-Wnested-anon-types"
S#  pragma clang diagnostic ignored "-Wc++17-compat-mangling"
S#  pragma clang diagnostic ignored "-Wc++98-compat-pedantic"
S#  pragma clang diagnostic ignored "-Wc++98-compat"
S#  pragma clang diagnostic ignored "-Wgcc-compat"
S
S#  define IMPORT(X)             asm(".global " #X);
S
Sstatic __attribute__((always_inline)) inline void ___barrier(void) { asm volatile("" ::: "memory", "cc"); }
S
S#  define SCHEDULE_BARRIER      ___barrier
S#  define FORCE_STORES          ___barrier
S#  define MEMORY_CHANGED        ___barrier
S
S#  define __weak                __attribute__((weak))
S#  define __svc(...)
S#  define __align(x)            __attribute__((aligned(x)))
S
S#  define __clrex               __builtin_arm_clrex
S#  define __dmb                 __builtin_arm_dmb
S#  define __dsb                 __builtin_arm_dsb
S#  define __isb                 __builtin_arm_isb
S#  define __wfi                 __builtin_arm_wfi
S#  define __wfe                 __builtin_arm_wfe
S#  define __rbit                __builtin_arm_rbit
S#  define __rev                 __builtin_bswap32
S#  define __clz                 __builtin_clz
S
S#  define ARM_RSR(NAME)         __builtin_arm_rsr(#NAME)
S#  define ARM_WSR(NAME, VALUE)  __builtin_arm_wsr(#NAME, VALUE)
S
S#  define DEFINE_ARM_RSR(NAME)  inline WORD ARM_RSR_ ## NAME()                 noexcept { return ARM_RSR(NAME); }
S#  define DEFINE_ARM_WSR(NAME)  inline void ARM_WSR_ ## NAME(WORD const value) noexcept { ARM_WSR(NAME, value); }
S
S#  define OFFSET_OF(S, M)       __builtin_offsetof(S, M)
S
S#  define BREAKPOINT(v)         asm volatile("bkpt %0" :: "i"(v))
S
S#  define WRITEONLY             /// not implemented
S#  define READONLY              const
S
S#  define __AT(ADDR)            __attribute__((section(".ARM.__at_" #ADDR)))
S#  define LOCATE_AT(ADDR)       __AT(ADDR)
S
S#  define FORCE_INLINE          __attribute__((always_inline)) inline
S
S#  define FILE                  __FILE__
S#  define FUNC                  __FUNCTION__
S#  define LINE                  __LINE__
S# else
S#  pragma anon_unions
S#  define PRAGMA(X)             _Pragma(#X)
S
S#  define IMPORT(X)             PRAGMA(import(X))
S
S#  define SCHEDULE_BARRIER()    __schedule_barrier() ///< Compiler-spezifische Pseudo-Anweisung, um die compiler-bedingte Umsortierung von Befehlen über diese Grenze hinaus zu unterbinden. 
S#  define FORCE_STORES()        __force_stores()
S#  define MEMORY_CHANGED()      __memory_changed()
S
S#  define DEFINE_ARM_RSR(NAME)  inline WORD ARM_RSR_ ## NAME()                 noexcept { register WORD NAME __asm(#NAME); return NAME; }
S#  define DEFINE_ARM_WSR(NAME)  inline void ARM_WSR_ ## NAME(WORD const value) noexcept { register WORD NAME __asm(#NAME); NAME = value; }
S
S#  define ARM_RSR(NAME)         ARM_RSR_ ## NAME()
S#  define ARM_WSR(NAME, VALUE)  ARM_WSR_ ## NAME(VALUE)
S
S#  define OFFSET_OF(S, M)       offsetof(S, M)
S
S#  define BREAKPOINT(n)         __breakpoint(n)
S
S#  define WRITEONLY             __writeonly
S#  define READONLY              const
S
S#  define LOCATE_AT(ADDR)       __attribute__((at(ADDR)))
S
S#  define FORCE_INLINE          __forceinline
S
S#  define FILE                  __MODULE__            ///< Name der aktuellen Datei.
S
S#  define FUNC                  __PRETTY_FUNCTION__   ///< Name der aktuellen Funktion.
S#  define LINE                  __LINE__              ///< Aktuelle Zeilennummer.
S# endif
S
Snamespace std { using nullptr_t = decltype(nullptr); }
S
S# if defined(DEBUG) && ! defined(NO_BREAK)
S#  define DEBUG_BREAK(n)        BREAKPOINT(n)
S# else
S#  define DEBUG_BREAK(n)
S# endif
S
S# define __CONCAT(A, B)         A##B
S# define CONCAT(A, B)           __CONCAT(A, B)
S
Stemplate<typename TYPE, unsigned DIM> constexpr unsigned ArrayDim(TYPE const (&)[DIM]) noexcept { return DIM; }
Stemplate<typename TYPE, unsigned DIM> constexpr unsigned ArrayMax(TYPE const (&)[DIM]) noexcept { return DIM - 1U; }
S
Stemplate<typename TYPE, unsigned H, unsigned W> constexpr unsigned MatrixRows(TYPE const (&)[H][W]) noexcept { return H; }
Stemplate<typename TYPE, unsigned H, unsigned W> constexpr unsigned MatrixCols(TYPE const (&)[H][W]) noexcept { return W; }
S
S/// Achtung: Die obigen Varianten zur Bestimmung von Feld oder Matrixdimensionen funktionieren nicht, wenn das Feld
S/// nicht-statische Member-Variable in einer Klasse ist, weil der this-Zeiger nicht constexpr ist.
S
Sinline void * operator new   (unsigned, void * const p) noexcept { return p; }
Sinline void   operator delete(void *, void *) noexcept { }
S
N#endif
N
L 82 ".\Inc\Utilities\Meta.h" 2
N
N/// Metaprogrammierung: Feststellung, on ein Datentyp ein integraler Datentyp ist.
N/// Diese Klasse implementiert nur einen statischen, konstanten Wert \c theFlag. Dieser Wert ist eine sog. constant expresssion
N/// und wird zur Compile-Zeit evaluiert. Dieses Flag (\c true für einen integrale Datentyp, \c false für einen nicht-integralen
N/// Datentyp) kann somit wiederum als Template-Argument verwendet werden.
Ntemplate<typename TYPE> struct IsIntegral : public IfThenElse<sizeof(TYPE) <= sizeof(WORD), IsTrue, IsFalse>::Type { };
Xtemplate<typename TYPE> struct IsIntegral : public IfThenElse<sizeof(TYPE) <= sizeof(uint32_t), IsTrue, IsFalse>::Type { };
N
N/// Metaprogrammierung: Feststellung, on ein Datentyp ein Zeiger ist.
N/// Diese Klasse implementiert nur einen statischen, konstanten Wert \c theFlag. Dieser Wert ist eine sog. constant expresssion
N/// und wird zur Compile-Zeit evaluiert. Dieses Flag (\c true für einen Zeiger-Typ, \c false sonst) 
N/// kann somit wiederum als Template-Argument verwendet werden.
Ntemplate<typename TYPE> struct IsPointer : public IsFalse { };
N
Ntemplate<typename TYPE> struct IsPointer<TYPE                *>  : public IsTrue  { };
Ntemplate<typename TYPE> struct IsPointer<TYPE          const *>  : public IsTrue  { };
Ntemplate<typename TYPE> struct IsPointer<TYPE volatile       *>  : public IsTrue  { };
Ntemplate<typename TYPE> struct IsPointer<TYPE volatile const *>  : public IsTrue  { };
N
Ntemplate<typename TYPE> struct IsUINTxx : public IsFalse { };
N
Ntemplate<>              struct IsUINTxx<UINT08> : public IsTrue  { };
Xtemplate<>              struct IsUINTxx<uint8_t> : public IsTrue  { };
Ntemplate<>              struct IsUINTxx<UINT16> : public IsTrue  { };
Xtemplate<>              struct IsUINTxx<uint16_t> : public IsTrue  { };
Ntemplate<>              struct IsUINTxx<UINT32> : public IsTrue  { };
Xtemplate<>              struct IsUINTxx<uint32_t> : public IsTrue  { };
Ntemplate<>              struct IsUINTxx<UINT64> : public IsTrue  { };
Xtemplate<>              struct IsUINTxx<uint64_t> : public IsTrue  { };
N
Ntemplate<typename TYPE> struct IsSINTxx : public IsFalse { };
N
Ntemplate<>              struct IsSINTxx<SINT08> : public IsTrue  { };
Xtemplate<>              struct IsSINTxx<int8_t> : public IsTrue  { };
Ntemplate<>              struct IsSINTxx<SINT16> : public IsTrue  { };
Xtemplate<>              struct IsSINTxx<int16_t> : public IsTrue  { };
Ntemplate<>              struct IsSINTxx<SINT32> : public IsTrue  { };
Xtemplate<>              struct IsSINTxx<int32_t> : public IsTrue  { };
Ntemplate<>              struct IsSINTxx<SINT64> : public IsTrue  { };
Xtemplate<>              struct IsSINTxx<int64_t> : public IsTrue  { };
N
Ntemplate<typename TYPE> struct __ArgType_Val { typedef typename RemAll<TYPE>::Type         Type; };
Ntemplate<typename TYPE> struct __ArgType_Ref { typedef typename RemAll<TYPE>::Type const & Type; };
N
N/// Typengenerator für Übergabeparameter.
N/// Übergabeparameter werden immer als (konstante) Referenz übergeben, wenn es sich um Strukturen oder sonstige größere Objekte handelt.
N/// Integer und %Pointer können effektiv als Wert übergeben werden. Diese Klasse bietet die Möglichkeit der Meta-Programmierung.
Ntemplate<typename TYPE> struct __ArgType : public IfThenElse<IsIntegral<TYPE>::flag, typename __ArgType_Val<TYPE>::Type, typename __ArgType_Ref<TYPE>::Type> { };
N
Ntemplate<typename TYPE>
Nusing ArgType = typename __ArgType<TYPE>::Type;
N
N/// Klasse um festzustellen, ob eine Klasse eine Basisklasse zu einer gegebenen Klasse ist (und das ist alles nur geklaut!).
Ntemplate <typename BASE, typename DRVD>
Nstruct IsBaseOf
N{
N  typedef char (& yes)[1];
N  typedef char (&  no)[2];
N
N  struct Host
N  {
N    operator BASE * () const;
N    operator DRVD * ();
N  };
N
N  template <typename T> 
N  static yes Check(DRVD *, T);
N
N  static no  Check(BASE *, int);
N
N  static constexpr bool const flag = sizeof(Check(Host(), int())) == sizeof(yes);
N};
N
N/// Klasse zur Metadaten-Definition für Bereichsgrenzen von POD-Typen.
Ntemplate<typename TYPE> struct Limits;
N
N# include <limits.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\limits.h" 1
N/* limits.h: ANSI 'C' (X3J11 Oct 88) library header, section 2.2.4.2 */
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright 1991-1997 ARM Limited. All rights reserved         */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: drodgman $
N */
N
N#ifndef __limits_h
N#define __limits_h
N#define __ARMCLIB_VERSION 5060037
N
N#define CHAR_BIT 8
N    /* max number of bits for smallest object that is not a bit-field (byte) */
N#define SCHAR_MIN (-128)
N    /* mimimum value for an object of type signed char */
N#define SCHAR_MAX 127
N    /* maximum value for an object of type signed char */
N#define UCHAR_MAX 255
N    /* maximum value for an object of type unsigned char */
N#ifdef __FEATURE_SIGNED_CHAR
S  #define CHAR_MIN (-128)
S      /* minimum value for an object of type char */
S  #define CHAR_MAX 127
S      /* maximum value for an object of type char */
N#else
N  #define CHAR_MIN 0
N      /* minimum value for an object of type char */
N  #define CHAR_MAX 255
N      /* maximum value for an object of type char */
N#endif
N
N#if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X#if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S  #define _AEABI_PORTABLE
N#endif
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
Sextern const int __aeabi_MB_LEN_MAX;
S#define MB_LEN_MAX (__aeabi_MB_LEN_MAX)
N#else
N#define MB_LEN_MAX 6
N#endif
N    /* maximum number of bytes in a multibyte character, */
N    /* for any supported locale */
N
N#define SHRT_MIN  (-0x8000)
N    /* minimum value for an object of type short int */
N#define SHRT_MAX  0x7fff
N    /* maximum value for an object of type short int */
N#define USHRT_MAX 65535
N    /* maximum value for an object of type unsigned short int */
N#define INT_MIN   (~0x7fffffff)  /* -2147483648 and 0x80000000 are unsigned */
N    /* minimum value for an object of type int */
N#define INT_MAX   0x7fffffff
N    /* maximum value for an object of type int */
N#define UINT_MAX  0xffffffffU
N    /* maximum value for an object of type unsigned int */
N#if __sizeof_long == 8
X#if 4 == 8
S  #define LONG_MIN  (~0x7fffffffffffffffL)
N#else
N  #define LONG_MIN  (~0x7fffffffL)
N#endif
N    /* minimum value for an object of type long int */
N#if __sizeof_long == 8
X#if 4 == 8
S  #define LONG_MAX  0x7fffffffffffffffL
N#else
N  #define LONG_MAX  0x7fffffffL
N#endif
N    /* maximum value for an object of type long int */
N#if __sizeof_long == 8
X#if 4 == 8
S  #define ULONG_MAX 0xffffffffffffffffUL
N#else
N  #define ULONG_MAX 0xffffffffUL
N#endif
N    /* maximum value for an object of type unsigned long int */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (0L && 199901L <= __STDC_VERSION__) || (1L && 201103L <= 201103L)
N  #define LLONG_MIN  (~0x7fffffffffffffffLL)
N      /* minimum value for an object of type long long int */
N  #define LLONG_MAX    0x7fffffffffffffffLL
N      /* maximum value for an object of type long long int */
N  #define ULLONG_MAX   0xffffffffffffffffULL
N      /* maximum value for an object of type unsigned long int */
N#endif
N
N#endif
N
N/* end of limits.h */
N
L 150 ".\Inc\Utilities\Meta.h" 2
N
Ntemplate<> struct Limits<UINT64>
Xtemplate<> struct Limits<uint64_t>
N{
N  static UINT64 const min = 0ULL;
X  static uint64_t const min = 0ULL;
N  static UINT64 const max = ~0ULL;
X  static uint64_t const max = ~0ULL;
N};
N
Ntemplate<> struct Limits<SINT64>
Xtemplate<> struct Limits<int64_t>
N{
N  static SINT64 const max = 0x7FFFFFFFFFFFFFFFLL;
X  static int64_t const max = 0x7FFFFFFFFFFFFFFFLL;
N  static SINT64 const min = ~max;
X  static int64_t const min = ~max;
N};
N
Ntemplate<> struct Limits<UINT32>
Xtemplate<> struct Limits<uint32_t>
N{
N  static UINT32 const min = 0;
X  static uint32_t const min = 0;
N  static UINT32 const max = UINT_MAX;
X  static uint32_t const max = 0xffffffffU;
N};
N
Ntemplate<> struct Limits<SINT32>
Xtemplate<> struct Limits<int32_t>
N{
N  static SINT32 const min = INT_MIN;
X  static int32_t const min = (~0x7fffffff);
N  static SINT32 const max = INT_MAX;
X  static int32_t const max = 0x7fffffff;
N};
N
Ntemplate<> struct Limits<UINT16>
Xtemplate<> struct Limits<uint16_t>
N{
N  static UINT16 const min = 0;
X  static uint16_t const min = 0;
N  static UINT16 const max = USHRT_MAX;
X  static uint16_t const max = 65535;
N};
N 
Ntemplate<> struct Limits<SINT16>
Xtemplate<> struct Limits<int16_t>
N{
N  static SINT16 const min = SHRT_MIN;
X  static int16_t const min = (-0x8000);
N  static SINT16 const max = SHRT_MAX;
X  static int16_t const max = 0x7fff;
N};
N 
Ntemplate<> struct Limits<UINT08>
Xtemplate<> struct Limits<uint8_t>
N{
N  static UINT08 const min = 0;
X  static uint8_t const min = 0;
N  static UINT08 const max = CHAR_MAX;
X  static uint8_t const max = 255;
N};
N 
Ntemplate<> struct Limits<SINT08>
Xtemplate<> struct Limits<int8_t>
N{
N  static SINT08 const min = SCHAR_MIN;
X  static int8_t const min = (-128);
N  static SINT08 const max = SCHAR_MAX;
X  static int8_t const max = 127;
N};
N
N# define UPPER_LIMIT(X)         Limits<decltype(X)>::max;
N# define LOWER_LIMIT(X)         Limits<decltype(X)>::min;
N
N/// Ersatz für die fehlende Implementierung von std::forward<>().
Ntemplate<typename TYPE> 
NTYPE && StdForward(typename RemRef<TYPE>::Type & anything)
N{
N  return static_cast<TYPE &&>(anything);
N} 
N
N/// Ersatz für die fehlende Implementierung von std::move<>().
Ntemplate<typename TYPE> 
Ntypename RemRef<TYPE>::Type && StdMove(TYPE && anything) 
N{
N  return static_cast<typename RemRef<TYPE>::Type &&>(anything);
N} 
N
N#endif
N
L 138 ".\Inc\Debug\Debug.h" 2
N
N/// Klasse, um zu Prüfen, ob ein Index gültig ist.
N/// \tparam TYPE ist der Index-Datentyp.
N/// \tparam ist die Indexobergrenze (inklusive),
Ntemplate<typename TYPE, TYPE MAX>
Nclass CheckIndex
N{
N  public:
N  
N  CheckIndex() = delete;
N  
N  using DataType = typename RemConst<TYPE>::Type;
N
N  static constexpr bool const si = IsSINTxx<DataType>::flag;
N
N  STATIC_ASSERT(IsUINTxx<DataType>::flag || si);
X  static_assert(IsUINTxx<DataType> ::flag || si, "IsUINTxx<DataType>::flag || si");
N
N  /// Prüfe, ob Index gültig ist.
N  /// \param indx ist eine Referenz des zu prüfenden Index.
N  /// \param errfnc ist eine Lambda-Expression, die dann aufzurufen ist wenn der Indes ungültig ist.
N  /// \tparam FNC ist der Datentype der Lambda-Expression.
N  /// \return Referenz des Index-Wertes.
N  template<typename FNC>
N  static TYPE & Verify(TYPE & indx, FNC const errfnc) noexcept
N  {
N    if ( IndexHelper<DataType, si>::Verify(indx, MAX) )
N    {
N      ITM_PRINT("!!! Index error: indx=", indx);
X      ItmPrint("!!! Index error: indx=", indx);
N      
N      errfnc();
N    }
N    
N    return indx;
N  }
N};
N
N/// Klasse, um einen Wert überprüfen zu können.
Ntemplate<typename TYPE>
Nclass CheckValue
N{
N  public:
N  
N  CheckValue() = delete;
N  
N  template<typename FNC>
N  static TYPE & Verify(TYPE & data, FNC const lambda) noexcept
N  {
N    STATIC_ASSERT(noexcept(lambda(data)));
X    static_assert(noexcept(lambda(data)), "noexcept(lambda(data))");
N    
N    lambda(data);
N
N    return data;
N  }
N};
N
N# if defined(DEBUG) 
X# if 1L 
N
N[[noreturn]] void AssertionFailed(char const expr[], char const file[], unsigned line, char const func[]) noexcept;
N[[noreturn]] void ProgramAbortion(char const expr[], char const file[], unsigned line, char const func[]) noexcept;
N
N/// Prüfen, ob ein Speicher in gültiges RAM oder ROM zeigt (keine Peripherie).
N/// \param ptr ist der zu prüfende Zeiger.
N/// \return \c true, wenn der Zeiger gültig ist.
Nbool IsValidPointer(void volatile const * ptr) noexcept;
N
Ntemplate<typename TYPE> TYPE & __DataTypeConverter(TYPE       & data) noexcept;
Ntemplate<typename TYPE> TYPE   __DataTypeConverter(TYPE const & data) noexcept;
N
N/// Prüfe, on ein Zeiger gültig ist (kann wie p selbst verwendet werden).
N#  define VERPTR(p)             CheckValue<decltype(__DataTypeConverter(p))>::Verify(p, [] (void volatile const * const xxx) noexcept { if ( ! IsValidPointer(xxx) ) AssertionFailed(#p " is not valid", FILE, LINE, __FUNCTION__); })
N
N/// Prüfe ob ein Index gültig ist.
N#  define VERINDX(i, m)         CheckIndex<decltype(i), m>::Verify(i, [] () noexcept { AssertionFailed("Array index " #i " out of range", FILE, LINE, __FUNCTION__); })
N
N#  define ASSERT(c)             ((c) ? (void)0 : AssertionFailed(#c, FILE, LINE, FUNC)) 
N#  define ABORT(t)              ProgramAbortion(t, FILE, LINE, FUNC)
N# else
S#  define VERPTR(p)             (p) 
S#  define VERINDX(i, m)         (i)
S
S#  define ASSERT(c)             ((void)0)
S#  define ABORT(t)
N# endif
N
N/// Bereichsüberprüfung eines Felkdindex.
N# define ARRAY_INDX(i, a)       VERINDX(i, ArrayMax(a))
N
N/// Zugriff auf ein Feld mit Bereichsüberprüfung des Index.
N# define ACCESS_ARRAY(a, i)     ((a)[ARRAY_INDX(i, a)])
N
Ntemplate<typename TYPE, unsigned DIM>
Nclass SecureArray final
N{
N  public:
N  
N  STATIC_ASSERT(DIM > 1U);
X  static_assert(DIM > 1U, "DIM > 1U");
N  
N  using RawArrType = TYPE[DIM];
N  
N  SecureArray() noexcept { DBG_MEM_FILL(a); }
X  SecureArray() noexcept { DbgMemFill(a); }
N 
N  template<typename ... ARGS>
N  SecureArray(ARGS const ... ini) noexcept : 
N    SecureArray() 
N  { 
N    Setup(a, ini ...); 
N    
N    STATIC_ASSERT(sizeof ...(ini) <= DIM); 
X    static_assert(sizeof ...(ini) <= DIM, "sizeof ...(ini) <= DIM"); 
N  }
N  
N  SecureArray(SecureArray const &) = delete;
N  SecureArray(SecureArray      &&) = delete;
N
N  ~SecureArray() = default;
N
N  SecureArray & operator = (SecureArray const &) = delete;
N  SecureArray & operator = (SecureArray      &&) = delete;
N
N  FORCE_INLINE TYPE const & operator [] (unsigned const i) const noexcept { return a[VERINDX(i, DIM - 1U)]; }
X  __forceinline TYPE const & operator [] (unsigned const i) const noexcept { return a[CheckIndex<decltype(i), DIM - 1U> ::Verify(i, [] () noexcept { AssertionFailed("Array index " "i" " out of range", "Debug.h", 256, __FUNCTION__); })]; }
N  FORCE_INLINE TYPE       & operator [] (unsigned const i)       noexcept { return a[VERINDX(i, DIM - 1U)]; }
X  __forceinline TYPE       & operator [] (unsigned const i)       noexcept { return a[CheckIndex<decltype(i), DIM - 1U> ::Verify(i, [] () noexcept { AssertionFailed("Array index " "i" " out of range", "Debug.h", 257, __FUNCTION__); })]; }
N
N  private:
N  
N  template<typename TINI>
N  FORCE_INLINE static void Setup(TYPE a[], TINI const ini) noexcept { a[0] = ini; }
X  __forceinline static void Setup(TYPE a[], TINI const ini) noexcept { a[0] = ini; }
N
N  template<typename TINI, typename ... ARGS>
N  FORCE_INLINE static void Setup(TYPE a[], TINI const ini, ARGS const ... more) noexcept { Setup(a, ini); Setup(a + 1U, more ...); }
X  __forceinline static void Setup(TYPE a[], TINI const ini, ARGS const ... more) noexcept { Setup(a, ini); Setup(a + 1U, more ...); }
N
N  RawArrType a;
N};
N
N#endif
N
L 117 ".\Inc\Drivers\RB_GPIO.h" 2
N# include <Atomic.h>
N
N# define GPIO_SP_WIDTH          2U
N# define GPIO_SP_BIT2POS(N)     ((N) * GPIO_SP_WIDTH)
N
Ninline WORD WrGpioSP(RegbankTypeGPIO volatile & gpio, unsigned const n, WORD const sp)
Xinline uint32_t WrGpioSP(RegbankTypeGPIO volatile & gpio, unsigned const n, uint32_t const sp)
N{
N  unsigned const pos = GPIO_SP_BIT2POS(n);
X  unsigned const pos = ((n) * 2U);
N  
N  return Atomic::Bfld(gpio.OSPEEDR, (sp & MASK_GPIO_OSPEEDR) << pos, MASK_GPIO_OSPEEDR << pos);    
X  return Atomic::Bfld(gpio.OSPEEDR, (sp & 0x3U) << pos, 0x3U << pos);    
N}
N
N# define GPIO_MD_WIDTH          2U
N# define GPIO_MD_BIT2POS(N)     ((N) * GPIO_MD_WIDTH)
N
Ninline WORD WrGpioMD(RegbankTypeGPIO volatile & gpio, unsigned const n, WORD const md)
Xinline uint32_t WrGpioMD(RegbankTypeGPIO volatile & gpio, unsigned const n, uint32_t const md)
N{
N  unsigned const pos = GPIO_MD_BIT2POS(n);
X  unsigned const pos = ((n) * 2U);
N  
N  return Atomic::Bfld(gpio.MODER, (md & MASK_GPIO_MODER) << pos, MASK_GPIO_MODER << pos);
X  return Atomic::Bfld(gpio.MODER, (md & 0x3U) << pos, 0x3U << pos);
N}
N
N# define GPIO_PUPDR_WIDTH          2U
N# define GPIO_PUPDR_BIT2POS(N)     ((N) * GPIO_PUPDR_WIDTH)
N
Ninline WORD WrGpioPUPDR(RegbankTypeGPIO volatile & gpio, unsigned const n, WORD const pupdr)
Xinline uint32_t WrGpioPUPDR(RegbankTypeGPIO volatile & gpio, unsigned const n, uint32_t const pupdr)
N{
N  unsigned const pos = GPIO_PUPDR_BIT2POS(n);
X  unsigned const pos = ((n) * 2U);
N  
N  return Atomic::Bfld(gpio.PUPDR, (pupdr & MASK_GPIO_PUPDR) << pos, MASK_GPIO_PUPDR << pos);
X  return Atomic::Bfld(gpio.PUPDR, (pupdr & 0x3U) << pos, 0x3U << pos);
N}
N
N# define GPIO_BSR_WIDTH          1U
N# define GPIO_BSR_BIT2POS(N)     ((N) * GPIO_BSR_WIDTH)
N
Ninline WORD WrGpioSet(RegbankTypeGPIO volatile & gpio, unsigned const n)
Xinline uint32_t WrGpioSet(RegbankTypeGPIO volatile & gpio, unsigned const n)
N{
N  unsigned const pos = GPIO_BSR_BIT2POS(n);
X  unsigned const pos = ((n) * 1U);
N  
N  return Atomic::Bfld(gpio.BSRR, 1U << pos, 1U << pos);
N}
N
Ninline WORD WrGpioClear(RegbankTypeGPIO volatile & gpio, unsigned const n)
Xinline uint32_t WrGpioClear(RegbankTypeGPIO volatile & gpio, unsigned const n)
N{
N  unsigned const pos = GPIO_BSR_BIT2POS(n);
X  unsigned const pos = ((n) * 1U);
N  
N  return Atomic::Bfld(gpio.BSRR, (1U << pos) << 16, (1U << pos) << 16);
N}
N
Ninline void EnableAF(RegbankTypeGPIO volatile & gpio, WORD const af, WORD const sp, bool const od, unsigned const n) noexcept 
Xinline void EnableAF(RegbankTypeGPIO volatile & gpio, uint32_t const af, uint32_t const sp, bool const od, unsigned const n) noexcept 
N{
N  ASSERT(n < 16U);
X  ((n < 16U) ? (void)0 : AssertionFailed("n < 16U", "RB_GPIO.h", 168, __PRETTY_FUNCTION__));
N  ASSERT(af < 16U);
X  ((af < 16U) ? (void)0 : AssertionFailed("af < 16U", "RB_GPIO.h", 169, __PRETTY_FUNCTION__));
N
N  auto const pos((n % 8U) * 4U);
N  WORD const set(af            << pos);
X  uint32_t const set(af            << pos);
N  WORD const res(MASK_GPIO_AFR << pos);
X  uint32_t const res(0xFU << pos);
N  auto const indx(n / 8U);
N
N  Atomic::Bfld(gpio.AFR[indx], set, res);
N  
N  HWRD const mask = 1U << n;
X  uint16_t const mask = 1U << n;
N  
N  if ( od )
N    Atomic::Orr(gpio.OTYPER, mask);
N  else
N    Atomic::Bic(gpio.OTYPER, mask);
N
N  WrGpioSP(gpio, n, sp);
N  WrGpioMD(gpio, n, MASK_GPIO_MODER_ALTFNC);     
X  WrGpioMD(gpio, n, 0x2U);     
N}
N
Ninline void EnableAF(RegbankTypeGPIO volatile & gpio, WORD const af, WORD const sp, bool const od, BYTE const * nums, unsigned dim)
Xinline void EnableAF(RegbankTypeGPIO volatile & gpio, uint32_t const af, uint32_t const sp, bool const od, uint8_t const * nums, unsigned dim)
N{
N  while ( dim-- > 0U )
N  {
N    EnableAF(gpio, af, sp, od, *nums++);
N  }
N}
N
Ntemplate<unsigned DIM>
Ninline void EnableAF(RegbankTypeGPIO volatile & gpio, WORD const af, WORD const sp, bool const od, BYTE const (& nums)[DIM])
Xinline void EnableAF(RegbankTypeGPIO volatile & gpio, uint32_t const af, uint32_t const sp, bool const od, uint8_t const (& nums)[DIM])
N{
N  EnableAF(gpio, af, sp, od, nums, DIM);
N}
N
N#endif
L 8 "InitSDRAM.cpp" 2
N#include <RB_FMC.h>
L 1 ".\Inc\Drivers\RB_FMC.h" 1
N//
N// RB_FMC.h
N//
N
N#ifndef guard_RB_FMC_H
N# define guard_RB_FMC_H
N
N/// \file RB_FMC.h
N/// Flexible memory controller (FMC).
N
N# include <RB.h>
N
N/// Datentyp für FMC-Registerbank.
Ntypedef struct __regbank_FMC
N{
N  struct {
N    WORD BCR;                   ///< SRAM/NOR-Flash control registers.
X    uint32_t BCR;                   
N    WORD BTR;                   ///< SRAM/NOR-Flash timing registers.
X    uint32_t BTR;                   
N  } bankArr[4];
N  BYTE reserved0[0x60 - sizeof(bankArr)];
X  uint8_t reserved0[0x60 - sizeof(bankArr)];
N
N  WORD PCR2;
X  uint32_t PCR2;
N  WORD SR2;
X  uint32_t SR2;
N  BYTE reserved1[0x20 - sizeof(PCR2) - sizeof(SR2)];
X  uint8_t reserved1[0x20 - sizeof(PCR2) - sizeof(SR2)];
N
N  WORD PCR3;
X  uint32_t PCR3;
N  WORD SR3;
X  uint32_t SR3;
N  BYTE reserved2[0x20 - sizeof(PCR3) - sizeof(SR3)];
X  uint8_t reserved2[0x20 - sizeof(PCR3) - sizeof(SR3)];
N
N  WORD PCR4;
X  uint32_t PCR4;
N  WORD SR4;
X  uint32_t SR4;
N  BYTE reserved3[0x20 - sizeof(PCR3) - sizeof(SR4) + 0x80];
X  uint8_t reserved3[0x20 - sizeof(PCR3) - sizeof(SR4) + 0x80];
N
N  WORD SDCR1;                   ///< SDRAM control register 1.
X  uint32_t SDCR1;                   
N  WORD SDCR2;                   ///< SDRAM control register 2.
X  uint32_t SDCR2;                   
N  WORD SDTR1;                   ///< SDRAM timing register 1.
X  uint32_t SDTR1;                   
N  WORD SDTR2;                   ///< SDRAM timing register 2.
X  uint32_t SDTR2;                   
N  WORD SDCMR;                   ///< SDRAM command mode register.
X  uint32_t SDCMR;                   
N  WORD SDRTR;                   ///< SDRAM refresh timer register.
X  uint32_t SDRTR;                   
N  WORD SDSR;                    ///< SDRAM status register.
X  uint32_t SDSR;                    
N} RegbankTypeFMC;
N
Nstatic_assert(offsetof(RegbankTypeFMC, PCR2 ) == 0x060, "Invalid RegbankTypeFMC [PCR2]");
Xstatic_assert(((::std:: size_t)__INTADDR__(&(((RegbankTypeFMC *)0)->PCR2))) == 0x060, "Invalid RegbankTypeFMC [PCR2]");
Nstatic_assert(offsetof(RegbankTypeFMC, PCR3 ) == 0x080, "Invalid RegbankTypeFMC [PCR3]");
Xstatic_assert(((::std:: size_t)__INTADDR__(&(((RegbankTypeFMC *)0)->PCR3))) == 0x080, "Invalid RegbankTypeFMC [PCR3]");
Nstatic_assert(offsetof(RegbankTypeFMC, PCR4 ) == 0x0A0, "Invalid RegbankTypeFMC [PCR4]");
Xstatic_assert(((::std:: size_t)__INTADDR__(&(((RegbankTypeFMC *)0)->PCR4))) == 0x0A0, "Invalid RegbankTypeFMC [PCR4]");
N
Nstatic_assert(offsetof(RegbankTypeFMC, SDCR1) == 0x140, "Invalid RegbankTypeFMC [SDCR1]");
Xstatic_assert(((::std:: size_t)__INTADDR__(&(((RegbankTypeFMC *)0)->SDCR1))) == 0x140, "Invalid RegbankTypeFMC [SDCR1]");
Nstatic_assert(offsetof(RegbankTypeFMC, SDCR2) == 0x144, "Invalid RegbankTypeFMC [SDCR2]");
Xstatic_assert(((::std:: size_t)__INTADDR__(&(((RegbankTypeFMC *)0)->SDCR2))) == 0x144, "Invalid RegbankTypeFMC [SDCR2]");
Nstatic_assert(offsetof(RegbankTypeFMC, SDCMR) == 0x150, "Invalid RegbankTypeFMC [SDCMR]");
Xstatic_assert(((::std:: size_t)__INTADDR__(&(((RegbankTypeFMC *)0)->SDCMR))) == 0x150, "Invalid RegbankTypeFMC [SDCMR]");
Nstatic_assert(offsetof(RegbankTypeFMC, SDRTR) == 0x154, "Invalid RegbankTypeFMC [SDRTR]");
Xstatic_assert(((::std:: size_t)__INTADDR__(&(((RegbankTypeFMC *)0)->SDRTR))) == 0x154, "Invalid RegbankTypeFMC [SDRTR]");
Nstatic_assert(offsetof(RegbankTypeFMC, SDSR ) == 0x158, "Invalid RegbankTypeFMC [SDSR]");
Xstatic_assert(((::std:: size_t)__INTADDR__(&(((RegbankTypeFMC *)0)->SDSR))) == 0x158, "Invalid RegbankTypeFMC [SDSR]");
N
Nextern RegbankTypeFMC volatile rbFMC;                 ///< FMC-Registerbank.
N
Ninline bool CheckFMC_SDSR(WORD const argMask)
Xinline bool CheckFMC_SDSR(uint32_t const argMask)
N{
N  return (rbFMC.SDSR & argMask) != 0U;
N}
N
N/// \cond RB_DEFS
N
N// BCR
N
N# define INDX_FSMC_BCR_MBKEN    0
N# define MASK_FSMC_BCR_MBKEN    (WORD)REG_BITMASK(FSMC_BCR_MBKEN)
N
N# define INDX_FSMC_BCR_MTYP     2
N# define MASK_FSMC_BCR_MTYP     (WORD)(3U << INDX_FSMC_BCR_MTYP)
N# define MASK_FSMC_BCR_MTYP_SRAM (WORD)(0U << INDX_FSMC_BCR_MTYP)
N# define MASK_FSMC_BCR_MTYP_PSRAM (WORD)(1U << INDX_FSMC_BCR_MTYP)
N# define MASK_FSMC_BCR_MTYP_NOR (WORD)(2U << INDX_FSMC_BCR_MTYP)
N
N# define INDX_FSMC_BCR_MWID     4
N# define MASK_FSMC_BCR_MWID     (WORD)(3U << INDX_FSMC_BCR_MWID)
N# define MASK_FSMC_BCR_MWID_BYTE (WORD)(0U << INDX_FSMC_BCR_MWID)
N# define MASK_FSMC_BCR_MWID_HWRD (WORD)(1U << INDX_FSMC_BCR_MWID)
N
N# define INDX_FSMC_BCR_WREN     12
N# define MASK_FSMC_BCR_WREN     (WORD)REG_BITMASK(FSMC_BCR_WREN)
N
N# define INDX_FSMC_BCR_WAITEN   13
N# define MASK_FSMC_BCR_WAITEN   (WORD)REG_BITMASK(FSMC_BCR_WAITEN)
N
N# define INDX_FSMC_BCR_ASYNCWAIT 15
N# define MASK_FSMC_BCR_ASYNCWAIT (WORD)REG_BITMASK(FSMC_BCR_ASYNCWAIT)
N
N// BTR
N
N# define INDX_FSMC_BTR_ADDSET   0
N# define MASK_FSMC_BTR_ADDSET   (WORD)(0x0FU << INDX_FSMC_BTR_ADDSET)
N
N# define INDX_FSMC_BTR_DATAST   8
N# define MASK_FSMC_BTR_DATAST   (WORD)(0xFFU << INDX_FSMC_BTR_DATAST)
N
N// SDSR
N
N# define INDX_FMC_SDSR_BUSY     5
N# define MASK_FMC_SDSR_BUSY     (WORD)REG_BITMASK(FMC_SDSR_BUSY)
N
N// SDCMR
N
N# define MASK_FMC_CMR_MODE      0x7U
N# define MASK_FMC_CMR_MODE_NORMAL_MODE 0x0U
N# define MASK_FMC_CMR_MODE_CLK_CFG_ENABLE 0x1U
N# define MASK_FMC_CMR_MODE_PALL 0x2U
N# define MASK_FMC_CMR_MODE_AUTO_REFRESH 0x3U
N# define MASK_FMC_CMR_MODE_LOAD_MODE 0x4U
N# define MASK_FMC_CMR_MODE_SELF_REFRESH 0x5U
N# define MASK_FMC_CMR_MODE_POWER_DOWN 0x6U
N
N# define INDX_FMC_SDCMR_CTB2    3
N# define MASK_FMC_SDCMR_CTB2    (WORD)REG_BITMASK(FMC_SDCMR_CTB2)
N
N# define INDX_FMC_SDCMR_CTB1    4
N# define MASK_FMC_SDCMR_CTB1    (WORD)REG_BITMASK(FMC_SDCMR_CTB1)
N
N# define INDX_FMC_SDCMR_NRFS    5
N
N# define INDX_FMC_SDCMR_MRD     9
N
N// SDCRx
N
N# define INDX_FMC_SDCRx_NC      0
N# define MASK_FMC_SDCRx_NC_08   (WORD)(0U << INDX_FMC_SDCRx_NC)
N# define MASK_FMC_SDCRx_NC_09   (WORD)(1U << INDX_FMC_SDCRx_NC)
N# define MASK_FMC_SDCRx_NC_10   (WORD)(2U << INDX_FMC_SDCRx_NC)
N# define MASK_FMC_SDCRx_NC_11   (WORD)(3U << INDX_FMC_SDCRx_NC)
N
N# define INDX_FMC_SDCRx_NR      2
N# define MASK_FMC_SDCRx_NR_11   (WORD)(0U << INDX_FMC_SDCRx_NR)
N# define MASK_FMC_SDCRx_NR_12   (WORD)(1U << INDX_FMC_SDCRx_NR)
N# define MASK_FMC_SDCRx_NR_13   (WORD)(1U << INDX_FMC_SDCRx_NR)
N
N# define INDX_FMC_SDCRx_MWID    4
N# define MASK_FMC_SDCRx_MWID_08 (WORD)(0U << INDX_FMC_SDCRx_MWID)
N# define MASK_FMC_SDCRx_MWID_16 (WORD)(1U << INDX_FMC_SDCRx_MWID)
N# define MASK_FMC_SDCRx_MWID_32 (WORD)(2U << INDX_FMC_SDCRx_MWID)
N
N# define INDX_FMC_SDCRx_NB      6
N# define MASK_FMC_SDCRx_NB      (WORD)REG_BITMASK(FMC_SDCRx_NB)
N
N# define INDX_FMC_SDCRx_CAS     7
N# define MASK_FMC_SDCRx_CAS_1   (WORD)(1U << INDX_FMC_SDCRx_CAS)
N# define MASK_FMC_SDCRx_CAS_2   (WORD)(2U << INDX_FMC_SDCRx_CAS)
N# define MASK_FMC_SDCRx_CAS_3   (WORD)(3U << INDX_FMC_SDCRx_CAS)
N
N# define INDX_FMC_SDCRx_SDCLK   10
N# define MASK_FMC_SDCRx_SDCLK   (WORD)(3U << INDX_FMC_SDCRx_SDCLK)
N# define MASK_FMC_SDCRx_SDCLK_DISABLED (WORD)(0U << INDX_FMC_SDCRx_SDCLK)
N# define MASK_FMC_SDCRx_SDCLK_2HCLK (WORD)(2U << INDX_FMC_SDCRx_SDCLK)
N# define MASK_FMC_SDCRx_SDCLK_3HCLK (WORD)(3U << INDX_FMC_SDCRx_SDCLK)
N
N# define INDX_FMC_SDCRx_RBURST  12
N# define MASK_FMC_SDCRx_RBURST  (WORD)REG_BITMASK(FMC_SDCRx_RBURST)
N
N# define INDX_FMC_SDCRx_RPIPE   13
N# define MASK_FMC_SDCRx_RPIPE_0HCLK (WORD)(0U << INDX_FMC_SDCRx_RPIPE)
N# define MASK_FMC_SDCRx_RPIPE_1HCLK (WORD)(1U << INDX_FMC_SDCRx_RPIPE)
N# define MASK_FMC_SDCRx_RPIPE_2HCLK (WORD)(2U << INDX_FMC_SDCRx_RPIPE)
N
N// SDTRx
N
N# define INDX_FMC_SDTRx_TRCD    24
N
N# define INDX_FMC_SDTRx_TRP     20
N
N# define INDX_FMC_SDTRx_TWR     16
N
N# define INDX_FMC_SDTRx_TRC     12
N
N# define INDX_FMC_SDTRx_TRAS    8
N
N# define INDX_FMC_SDTRx_TXSR    4
N
N# define INDX_FMC_SDTRx_TMRD    0
N
N/// \endcond
N
Ninline bool FMC_SDSR_IsBusy()
N{
N  return CheckFMC_SDSR(MASK_FMC_SDSR_BUSY);
X  return CheckFMC_SDSR((uint32_t)(1U << 5));
N}
N
Ninline void SDRAM_Command(WORD const sdcmrVal)
Xinline void SDRAM_Command(uint32_t const sdcmrVal)
N{
N  while ( FMC_SDSR_IsBusy() ) { }
N  
N  rbFMC.SDCMR = sdcmrVal;
N}
N
N# define SDRAM_MRD_BURST_LENGTH_1             ((HWRD)0x0000)
N# define SDRAM_MRD_BURST_LENGTH_2             ((HWRD)0x0001)
N# define SDRAM_MRD_BURST_LENGTH_4             ((HWRD)0x0002)
N# define SDRAM_MRD_BURST_LENGTH_8             ((HWRD)0x0004)
N# define SDRAM_MRD_BURST_TYPE_SEQUENTIAL      ((HWRD)0x0000)
N# define SDRAM_MRD_BURST_TYPE_INTERLEAVED     ((HWRD)0x0008)
N# define SDRAM_MRD_CAS_LATENCY_2              ((HWRD)0x0020)
N# define SDRAM_MRD_CAS_LATENCY_3              ((HWRD)0x0030)
N# define SDRAM_MRD_OPERATING_MODE_STANDARD    ((HWRD)0x0000)
N# define SDRAM_MRD_WRITEBURST_MODE_PROGRAMMED ((HWRD)0x0000) 
N# define SDRAM_MRD_WRITEBURST_MODE_SINGLE     ((HWRD)0x0200)  
N
N# define FSMC_SRAM_BANK1_START  0x60000000U
N# define FSMC_SRAM_BANK2_START  0x70000000U
N# define FSMC_SRAM_BANK3_START  0x80000000U
N# define FSMC_SRAM_BANK4_START  0x90000000U
N
N# define FSMC_SDRAM_BANK1_START 0xC0000000U
N# define FSMC_SDRAM_BANK2_START 0xD0000000U
N
N#endif
L 9 "InitSDRAM.cpp" 2
N
Nvoid InitSDRAM() noexcept
N{
N  /*
N  +----------------------------------------------------------------------------------+
N  |                       SDRAM pins assignment                                      |
N  +-------------------+--------------------+--------------------+--------------------+
N  | PD0  <-> FMC_D2   | PE0  <-> FMC_NBL0  | PF0  <-> FMC_A0    | PG0  <-> FMC_A10   |
N  | PD1  <-> FMC_D3   | PE1  <-> FMC_NBL1  | PF1  <-> FMC_A1    | PG1  <-> FMC_A11   |
N  | PD8  <-> FMC_D13  | PE7  <-> FMC_D4    | PF2  <-> FMC_A2    | PG8  <-> FMC_SDCLK |
N  | PD9  <-> FMC_D14  | PE8  <-> FMC_D5    | PF3  <-> FMC_A3    | PG15 <-> FMC_NCAS  |
N  | PD10 <-> FMC_D15  | PE9  <-> FMC_D6    | PF4  <-> FMC_A4    |--------------------+ 
N  | PD14 <-> FMC_D0   | PE10 <-> FMC_D7    | PF5  <-> FMC_A5    |   
N  | PD15 <-> FMC_D1   | PE11 <-> FMC_D8    | PF11 <-> FMC_NRAS  | 
N  +-------------------| PE12 <-> FMC_D9    | PF12 <-> FMC_A6    | 
N                      | PE13 <-> FMC_D10   | PF13 <-> FMC_A7    |    
N                      | PE14 <-> FMC_D11   | PF14 <-> FMC_A8    |
N                      | PE15 <-> FMC_D12   | PF15 <-> FMC_A9    |
N  +-------------------+--------------------+--------------------+
N  | PB5 <-> FMC_SDCKE1| 
N  | PB6 <-> FMC_SDNE1 | 
N  | PC0 <-> FMC_SDNWE |
N  | PG4 <-> FMC_BA0   |
N  | PG5 <-> FMC_BA1   |
N  +-------------------+
N  */
N
N  AHB1ClockEnableByMask(
N  (1U << INDX_RCC_AHB1_GPIOB) |
X  (1U << 1) |
N  (1U << INDX_RCC_AHB1_GPIOC) |
X  (1U << 2) |
N  (1U << INDX_RCC_AHB1_GPIOD) |
X  (1U << 3) |
N  (1U << INDX_RCC_AHB1_GPIOE) |
X  (1U << 4) |
N  (1U << INDX_RCC_AHB1_GPIOF) |
X  (1U << 5) |
N  (1U << INDX_RCC_AHB1_GPIOG));
X  (1U << 6));
N
N  static constexpr BYTE const bPins[] = {                5, 6                                  };
X  static constexpr uint8_t const bPins[] = {                5, 6                                  };
N  static constexpr BYTE const dPins[] = { 0, 1,                   8, 9, 10,             14, 15 };
X  static constexpr uint8_t const dPins[] = { 0, 1,                   8, 9, 10,             14, 15 };
N  static constexpr BYTE const ePins[] = { 0, 1,                7, 8, 9, 10, 11, 12, 13, 14, 15 };
X  static constexpr uint8_t const ePins[] = { 0, 1,                7, 8, 9, 10, 11, 12, 13, 14, 15 };
N  static constexpr BYTE const fPins[] = { 0, 1, 2, 3, 4, 5,                 11, 12, 13, 14, 15 };
X  static constexpr uint8_t const fPins[] = { 0, 1, 2, 3, 4, 5,                 11, 12, 13, 14, 15 };
N  static constexpr BYTE const gPins[] = { 0, 1,       4, 5,       8,                        15 };
X  static constexpr uint8_t const gPins[] = { 0, 1,       4, 5,       8,                        15 };
N  
N  EnableAF(rbGPIOB, MASK_GPIO_AFR_AF12, MASK_GPIO_OSPEEDR_HIGH, false, bPins);
X  EnableAF(rbGPIOB, 0xCU, 0x3U, false, bPins);
N  EnableAF(rbGPIOC, MASK_GPIO_AFR_AF12, MASK_GPIO_OSPEEDR_HIGH, false, 0U);
X  EnableAF(rbGPIOC, 0xCU, 0x3U, false, 0U);
N  EnableAF(rbGPIOD, MASK_GPIO_AFR_AF12, MASK_GPIO_OSPEEDR_HIGH, false, dPins);
X  EnableAF(rbGPIOD, 0xCU, 0x3U, false, dPins);
N  EnableAF(rbGPIOE, MASK_GPIO_AFR_AF12, MASK_GPIO_OSPEEDR_HIGH, false, ePins);
X  EnableAF(rbGPIOE, 0xCU, 0x3U, false, ePins);
N  EnableAF(rbGPIOF, MASK_GPIO_AFR_AF12, MASK_GPIO_OSPEEDR_HIGH, false, fPins);
X  EnableAF(rbGPIOF, 0xCU, 0x3U, false, fPins);
N  EnableAF(rbGPIOG, MASK_GPIO_AFR_AF12, MASK_GPIO_OSPEEDR_HIGH, false, gPins);
X  EnableAF(rbGPIOG, 0xCU, 0x3U, false, gPins);
N  
N  AHBClockEnable(PERIPHERY_AHB_FMC);
X  AHBClockEnable(((2 << 8U) | 0));
N
N  rbFMC.SDCR1 = MASK_FMC_SDCRx_SDCLK_2HCLK | MASK_FMC_SDCRx_RPIPE_1HCLK;
X  rbFMC.SDCR1 = (uint32_t)(2U << 10) | (uint32_t)(1U << 13);
N  rbFMC.SDCR2 = MASK_FMC_SDCRx_CAS_3 | MASK_FMC_SDCRx_NC_08 | MASK_FMC_SDCRx_NR_12 | MASK_FMC_SDCRx_MWID_16 | MASK_FMC_SDCRx_NB;
X  rbFMC.SDCR2 = (uint32_t)(3U << 7) | (uint32_t)(0U << 0) | (uint32_t)(1U << 2) | (uint32_t)(1U << 4) | (uint32_t)(1U << 6);
N  rbFMC.SDTR1 = (7U << INDX_FMC_SDTRx_TRC) | (2U << INDX_FMC_SDTRx_TRP);
X  rbFMC.SDTR1 = (7U << 12) | (2U << 20);
N  rbFMC.SDTR2 = (2U << INDX_FMC_SDTRx_TWR) | (4U << INDX_FMC_SDTRx_TRAS) | (7U << INDX_FMC_SDTRx_TXSR) | (1U << INDX_FMC_SDTRx_TMRD);
X  rbFMC.SDTR2 = (2U << 16) | (4U << 8) | (7U << 4) | (1U << 0);
N  
N  for ( unsigned volatile i = 0U; i < 500000U; i++ ) { Cortex::DSB(); }
N  
N  SDRAM_Command(MASK_FMC_CMR_MODE_CLK_CFG_ENABLE | MASK_FMC_SDCMR_CTB2 | (1U << INDX_FMC_SDCMR_NRFS));
X  SDRAM_Command(0x1U | (uint32_t)(1U << 3) | (1U << 5));
N  SDRAM_Command(MASK_FMC_CMR_MODE_PALL           | MASK_FMC_SDCMR_CTB2 | (1U << INDX_FMC_SDCMR_NRFS));
X  SDRAM_Command(0x2U           | (uint32_t)(1U << 3) | (1U << 5));
N  SDRAM_Command(MASK_FMC_CMR_MODE_AUTO_REFRESH   | MASK_FMC_SDCMR_CTB2 | (4U << INDX_FMC_SDCMR_NRFS));
X  SDRAM_Command(0x3U   | (uint32_t)(1U << 3) | (4U << 5));
N  SDRAM_Command(MASK_FMC_CMR_MODE_AUTO_REFRESH   | MASK_FMC_SDCMR_CTB2 | (4U << INDX_FMC_SDCMR_NRFS));
X  SDRAM_Command(0x3U   | (uint32_t)(1U << 3) | (4U << 5));
N  SDRAM_Command(MASK_FMC_CMR_MODE_LOAD_MODE      | MASK_FMC_SDCMR_CTB2 | (1U << INDX_FMC_SDCMR_NRFS) |
X  SDRAM_Command(0x4U      | (uint32_t)(1U << 3) | (1U << 5) |
N  (SDRAM_MRD_BURST_LENGTH_2 | SDRAM_MRD_BURST_TYPE_SEQUENTIAL | SDRAM_MRD_CAS_LATENCY_3 | SDRAM_MRD_OPERATING_MODE_STANDARD | SDRAM_MRD_WRITEBURST_MODE_SINGLE) << INDX_FMC_SDCMR_MRD);
X  (((uint16_t)0x0001) | ((uint16_t)0x0000) | ((uint16_t)0x0030) | ((uint16_t)0x0000) | ((uint16_t)0x0200)) << 9);
N
N  while ( FMC_SDSR_IsBusy() ) { }
N
N  rbFMC.SDRTR = 1386U << 1;
N}
N
