; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--cpp11 --list --debug -c --asm --interleave --exceptions --protect_stack -o.\out\debugv5\ili9341.o --asm_dir=.\Lst\DebugV5\ --list_dir=.\Lst\DebugV5\ --depend=.\out\debugv5\ili9341.d --cpu=Cortex-M4 --apcs=interwork --no_unaligned_access -O0 --diag_suppress=9931 -I.\Inc -I.\Inc\Debug -I.\Inc\Cortex -I.\Inc\Drivers -I.\Inc\Utilities -D__UVISION_VERSION=527 -DSTM32F429xx -DCORTEX_M=4 -DDEBUG --omf_browse=.\out\debugv5\ili9341.crf --no_rtti Src\ILI9341.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ZN7Ili9341C2Ev                  ; Alternate entry point ; Ili9341::Ili9341__sub_object()
                  _ZN7Ili9341C1Ev PROC ; Ili9341::Ili9341()
;;;10     
;;;11     Ili9341:: Ili9341() noexcept :
;;;12       csx((IDio::CreateInstanceC()).CreateWrPin(2)),
;;;13       dcx((IDio::CreateInstanceD()).CreateWrPin(13)),
;;;14     	reset((IDio::CreateInstanceD()).CreateWrPin(12)),
;;;15       spi(),
;;;16       ltdc()
;;;17     {
;;;18       /* I/O pins und SPI initialisieren */
;;;19      
;;;20     	AHBClockEnable(PERIPHERY_AHB_GPIOD);
;;;21     	//Init DCX
;;;22     	WrGpioMD(rbGPIOD, ILI9341_WRX, MASK_GPIO_MODER_GPOUT);
;;;23     	WrGpioSP(rbGPIOD, ILI9341_WRX, MASK_GPIO_OSPEEDR_MED);
;;;24     	//Init RST
;;;25     	WrGpioPUPDR(rbGPIOD, ILI9341_RST, MASK_GPIO_PUPDR_UP);
;;;26     	WrGpioMD(rbGPIOD, ILI9341_RST, MASK_GPIO_MODER_GPOUT);
;;;27     	
;;;28     	//Init CS
;;;29     	AHBClockEnable(PERIPHERY_AHB_GPIOC);
;;;30     	WrGpioMD(rbGPIOC, ILI9341_CS, MASK_GPIO_MODER_GPOUT);
;;;31     	WrGpioSP(rbGPIOC, ILI9341_CS, MASK_GPIO_OSPEEDR_MED);
;;;32     	
;;;33     	WrGpioSet(rbGPIOC, ILI9341_CS);
;;;34     	//Init Ltdc
;;;35     	ltdc.setPins();
;;;36     	//Init SPI5
;;;37     	spi.initSPI();
;;;38     }
;;;39     
000000  e92d5ff0          PUSH     {r4-r12,lr}
000004  4604              MOV      r4,r0
000006  f7fffffe          BL       _ZN4IDio15CreateInstanceCEv ; IDio::CreateInstanceC()
00000a  4680              MOV      r8,r0
00000c  6800              LDR      r0,[r0,#0]
00000e  2102              MOVS     r1,#2
000010  68c2              LDR      r2,[r0,#0xc]
000012  4640              MOV      r0,r8
000014  4790              BLX      r2
000016  6020              STR      r0,[r4,#0]
000018  f7fffffe          BL       _ZN4IDio15CreateInstanceDEv ; IDio::CreateInstanceD()
00001c  4606              MOV      r6,r0
00001e  6800              LDR      r0,[r0,#0]
000020  210d              MOVS     r1,#0xd
000022  68c2              LDR      r2,[r0,#0xc]
000024  4630              MOV      r0,r6
000026  4790              BLX      r2
000028  6060              STR      r0,[r4,#4]
00002a  f7fffffe          BL       _ZN4IDio15CreateInstanceDEv ; IDio::CreateInstanceD()
00002e  4607              MOV      r7,r0
000030  6800              LDR      r0,[r0,#0]
000032  210c              MOVS     r1,#0xc
000034  68c2              LDR      r2,[r0,#0xc]
000036  4638              MOV      r0,r7
000038  4790              BLX      r2
00003a  60a0              STR      r0,[r4,#8]
00003c  f104000c          ADD      r0,r4,#0xc
000040  f7fffffe          BL       _ZN4ISpiC1Ev ; ISpi::ISpi()
000044  f1a0040c          SUB      r4,r0,#0xc
000048  f104000d          ADD      r0,r4,#0xd
00004c  f7fffffe          BL       _ZN5ILtdcC1Ev ; ILtdc::ILtdc()
000050  f1a0040d          SUB      r4,r0,#0xd
000054  2003              MOVS     r0,#3
000056  f7fffffe          BL       _Z14AHBClockEnablej ; AHBClockEnable(unsigned)
00005a  2201              MOVS     r2,#1
00005c  210d              MOVS     r1,#0xd
00005e  4885              LDR      r0,|L1.628|
000060  f7fffffe          BL       _Z8WrGpioMDRV14__regbank_GPIOjj ; WrGpioMD(volatile __regbank_GPIO&, unsigned, unsigned)
000064  2201              MOVS     r2,#1
000066  210d              MOVS     r1,#0xd
000068  4882              LDR      r0,|L1.628|
00006a  f7fffffe          BL       _Z8WrGpioSPRV14__regbank_GPIOjj ; WrGpioSP(volatile __regbank_GPIO&, unsigned, unsigned)
00006e  f8df9204          LDR      r9,|L1.628|
000072  f04f0a0c          MOV      r10,#0xc
000076  2501              MOVS     r5,#1
000078  ea4f0b4a          LSL      r11,r10,#1
00007c  2003              MOVS     r0,#3
00007e  fa00f20b          LSL      r2,r0,r11
000082  fa05f10b          LSL      r1,r5,r11
000086  f109000c          ADD      r0,r9,#0xc
00008a  f7fffffe          BL       _ZN6Atomic4BfldIjEET_RVS1_S1_S1_ ; T1 Atomic::Bfld<unsigned>(volatile T1&, T1, T1)
00008e  2201              MOVS     r2,#1
000090  210c              MOVS     r1,#0xc
000092  4648              MOV      r0,r9
000094  f7fffffe          BL       _Z8WrGpioMDRV14__regbank_GPIOjj ; WrGpioMD(volatile __regbank_GPIO&, unsigned, unsigned)
000098  2002              MOVS     r0,#2
00009a  f7fffffe          BL       _Z14AHBClockEnablej ; AHBClockEnable(unsigned)
00009e  2201              MOVS     r2,#1
0000a0  2102              MOVS     r1,#2
0000a2  4875              LDR      r0,|L1.632|
0000a4  f7fffffe          BL       _Z8WrGpioMDRV14__regbank_GPIOjj ; WrGpioMD(volatile __regbank_GPIO&, unsigned, unsigned)
0000a8  2201              MOVS     r2,#1
0000aa  2102              MOVS     r1,#2
0000ac  4872              LDR      r0,|L1.632|
0000ae  f7fffffe          BL       _Z8WrGpioSPRV14__regbank_GPIOjj ; WrGpioSP(volatile __regbank_GPIO&, unsigned, unsigned)
0000b2  f8df91c4          LDR      r9,|L1.632|
0000b6  2502              MOVS     r5,#2
0000b8  46aa              MOV      r10,r5
0000ba  4655              MOV      r5,r10
0000bc  2001              MOVS     r0,#1
0000be  fa00f205          LSL      r2,r0,r5
0000c2  fa00f105          LSL      r1,r0,r5
0000c6  f1090018          ADD      r0,r9,#0x18
0000ca  f7fffffe          BL       _ZN6Atomic4BfldIjEET_RVS1_S1_S1_ ; T1 Atomic::Bfld<unsigned>(volatile T1&, T1, T1)
0000ce  f104000d          ADD      r0,r4,#0xd
0000d2  f7fffffe          BL       _ZNK5ILtdc7setPinsEv ; ILtdc::setPins() const
0000d6  f104000c          ADD      r0,r4,#0xc
0000da  f7fffffe          BL       _ZNK4ISpi7initSPIEv ; ISpi::initSPI() const
0000de  4620              MOV      r0,r4
0000e0  e8bd9ff0          POP      {r4-r12,pc}
                          ENDP

                  _ZNK7Ili93418SendDataEh PROC ; Ili9341::SendData(unsigned char) const
;;;61     
;;;62     void Ili9341::SendData(uint8_t data) const noexcept {
0000e4  b570              PUSH     {r4-r6,lr}
0000e6  4604              MOV      r4,r0
0000e8  460d              MOV      r5,r1
;;;63     	dcx.Set();
0000ea  6860              LDR      r0,[r4,#4]
0000ec  6801              LDR      r1,[r0,#0]
0000ee  68ca              LDR      r2,[r1,#0xc]
0000f0  2101              MOVS     r1,#1
0000f2  4790              BLX      r2
;;;64     	csx.Clr();
0000f4  6820              LDR      r0,[r4,#0]
0000f6  f7fffffe          BL       _ZN6IWrPin3ClrEv ; IWrPin::Clr()
;;;65     	spi.SPI_Send(data);
0000fa  4629              MOV      r1,r5
0000fc  f104000c          ADD      r0,r4,#0xc
000100  f7fffffe          BL       _ZNK4ISpi8SPI_SendEh ; ISpi::SPI_Send(unsigned char) const
;;;66     	csx.Set();
000104  6820              LDR      r0,[r4,#0]
000106  6801              LDR      r1,[r0,#0]
000108  68ca              LDR      r2,[r1,#0xc]
00010a  2101              MOVS     r1,#1
00010c  4790              BLX      r2
;;;67     }
00010e  bd70              POP      {r4-r6,pc}
;;;68     
                          ENDP

                  _ZNK7Ili934111SendCommandEh PROC ; Ili9341::SendCommand(unsigned char) const
;;;54     
;;;55     void Ili9341::SendCommand(uint8_t data) const noexcept {
000110  b570              PUSH     {r4-r6,lr}
000112  4604              MOV      r4,r0
000114  460d              MOV      r5,r1
;;;56     	dcx.Clr();
000116  6860              LDR      r0,[r4,#4]
000118  f7fffffe          BL       _ZN6IWrPin3ClrEv ; IWrPin::Clr()
;;;57     	csx.Clr();
00011c  6820              LDR      r0,[r4,#0]
00011e  f7fffffe          BL       _ZN6IWrPin3ClrEv ; IWrPin::Clr()
;;;58     	spi.SPI_Send(data);
000122  4629              MOV      r1,r5
000124  f104000c          ADD      r0,r4,#0xc
000128  f7fffffe          BL       _ZNK4ISpi8SPI_SendEh ; ISpi::SPI_Send(unsigned char) const
;;;59     	csx.Set();
00012c  6820              LDR      r0,[r4,#0]
00012e  6801              LDR      r1,[r0,#0]
000130  68ca              LDR      r2,[r1,#0xc]
000132  2101              MOVS     r1,#1
000134  4790              BLX      r2
;;;60     }
000136  bd70              POP      {r4-r6,pc}
;;;61     
                          ENDP

                  _ZNK7Ili93417SendCmdEhPKhj PROC ; Ili9341::SendCmd(unsigned char, const unsigned char*, unsigned) const
;;;44     
;;;45     void Ili9341::SendCmd(BYTE const ctrl, BYTE const * p, unsigned num) const noexcept 
000138  e92d41f0          PUSH     {r4-r8,lr}
;;;46     {
00013c  4607              MOV      r7,r0
00013e  4688              MOV      r8,r1
000140  4615              MOV      r5,r2
000142  461e              MOV      r6,r3
;;;47     	SendCommand(ctrl);
000144  4641              MOV      r1,r8
000146  4638              MOV      r0,r7
000148  f7fffffe          BL       _ZNK7Ili934111SendCommandEh ; Ili9341::SendCommand(unsigned char) const
;;;48     	for(int i = 0; i < num; i++)
00014c  2400              MOVS     r4,#0
00014e  e004              B        |L1.346|
                  |L1.336|
;;;49     	{
;;;50     		
;;;51     		SendData(p[i]);
000150  5d29              LDRB     r1,[r5,r4]
000152  4638              MOV      r0,r7
000154  f7fffffe          BL       _ZNK7Ili93418SendDataEh ; Ili9341::SendData(unsigned char) const
000158  1c64              ADDS     r4,r4,#1              ;48
                  |L1.346|
00015a  42b4              CMP      r4,r6                 ;48
00015c  d3f8              BCC      |L1.336|
;;;52     	}
;;;53     }
00015e  e8bd81f0          POP      {r4-r8,pc}
;;;54     
                          ENDP

                  _ZNK7Ili93419CmdPrefixEh PROC ; Ili9341::CmdPrefix(unsigned char) const
;;;39     
;;;40     void Ili9341::CmdPrefix(BYTE const ctrl) const noexcept
000162  4770              BX       lr
;;;41     {
;;;42       // Steuerleitungen setzen und Kommando-Byte via SPI senden
;;;43     }
;;;44     
                          ENDP

                  _ZN7Ili93415StartEv PROC ; Ili9341::Start()
;;;68     
;;;69     void Ili9341::Start() noexcept 
000164  b570              PUSH     {r4-r6,lr}
;;;70     {
000166  4604              MOV      r4,r0
;;;71       // In verschiedenen Quellen (u.a Application-note von ILITEK!) findet man nachfolgende Kommandierung. 
;;;72       // Die ILI9341-Doku beschreibt dieses Kommando jedoch nicht. 
;;;73     
;;;74       static constexpr BYTE const unknown[] { 0xC3, 0x08, 0x50 }; // <== ???
;;;75     
;;;76       Command(ctrlUnknown  , unknown);
000168  4a44              LDR      r2,|L1.636|
00016a  21ca              MOVS     r1,#0xca
00016c  4620              MOV      r0,r4
00016e  f7fffffe          BL       _ZNK7Ili93417CommandILj3EEEvhRAT__Kh ; void Ili9341::Command<(unsigned)3>(unsigned char, const unsigned char(&)[T1]) const
;;;77     
;;;78       static constexpr BYTE const dataPowerA  [] { 0x39, 0x2C, 0x00, 0x34, 0x02 };
;;;79     
;;;80       Command(ctrlPowerA   , dataPowerA  );
000172  4a43              LDR      r2,|L1.640|
000174  21cb              MOVS     r1,#0xcb
000176  4620              MOV      r0,r4
000178  f7fffffe          BL       _ZNK7Ili93417CommandILj5EEEvhRAT__Kh ; void Ili9341::Command<(unsigned)5>(unsigned char, const unsigned char(&)[T1]) const
;;;81     
;;;82       static constexpr BYTE const dataPowerB  [] { 0x00, 0xC1, 0x30 };
;;;83       
;;;84       Command(ctrlPowerB   , dataPowerB  );
00017c  4a41              LDR      r2,|L1.644|
00017e  21cf              MOVS     r1,#0xcf
000180  4620              MOV      r0,r4
000182  f7fffffe          BL       _ZNK7Ili93417CommandILj3EEEvhRAT__Kh ; void Ili9341::Command<(unsigned)3>(unsigned char, const unsigned char(&)[T1]) const
;;;85     
;;;86       static constexpr BYTE const dataDTCA    [] { 0x85, 0x00, 0x78 };
;;;87     
;;;88       Command(ctrlDTCA     , dataDTCA    );
000186  4a40              LDR      r2,|L1.648|
000188  21e8              MOVS     r1,#0xe8
00018a  4620              MOV      r0,r4
00018c  f7fffffe          BL       _ZNK7Ili93417CommandILj3EEEvhRAT__Kh ; void Ili9341::Command<(unsigned)3>(unsigned char, const unsigned char(&)[T1]) const
;;;89       Command(ctrlDTCB     , 0x00, 0x00  );
000190  2300              MOVS     r3,#0
000192  461a              MOV      r2,r3
000194  21ea              MOVS     r1,#0xea
000196  4620              MOV      r0,r4
000198  f7fffffe          BL       _ZN7Ili93417CommandEhhh ; Ili9341::Command(unsigned char, unsigned char, unsigned char)
;;;90     
;;;91       static constexpr BYTE const dataPwrOnSeq[] { 0x64, 0x03, 0x12, 0x81 };
;;;92     
;;;93       Command(ctrlPwrOnSeq , dataPwrOnSeq);
00019c  4a3b              LDR      r2,|L1.652|
00019e  21ed              MOVS     r1,#0xed
0001a0  4620              MOV      r0,r4
0001a2  f7fffffe          BL       _ZNK7Ili93417CommandILj4EEEvhRAT__Kh ; void Ili9341::Command<(unsigned)4>(unsigned char, const unsigned char(&)[T1]) const
;;;94     
;;;95       Command(ctrlPRC      , 0x20);
0001a6  2220              MOVS     r2,#0x20
0001a8  21f7              MOVS     r1,#0xf7
0001aa  4620              MOV      r0,r4
0001ac  f7fffffe          BL       _ZN7Ili93417CommandEhh ; Ili9341::Command(unsigned char, unsigned char)
;;;96       Command(ctrlPower1   , 0x23);
0001b0  2223              MOVS     r2,#0x23
0001b2  21c0              MOVS     r1,#0xc0
0001b4  4620              MOV      r0,r4
0001b6  f7fffffe          BL       _ZN7Ili93417CommandEhh ; Ili9341::Command(unsigned char, unsigned char)
;;;97       Command(ctrlPower2   , 0x10);
0001ba  2210              MOVS     r2,#0x10
0001bc  21c1              MOVS     r1,#0xc1
0001be  4620              MOV      r0,r4
0001c0  f7fffffe          BL       _ZN7Ili93417CommandEhh ; Ili9341::Command(unsigned char, unsigned char)
;;;98       Command(ctrlVCOM1    , 0x45, 0x15);
0001c4  2315              MOVS     r3,#0x15
0001c6  2245              MOVS     r2,#0x45
0001c8  21c5              MOVS     r1,#0xc5
0001ca  4620              MOV      r0,r4
0001cc  f7fffffe          BL       _ZN7Ili93417CommandEhhh ; Ili9341::Command(unsigned char, unsigned char, unsigned char)
;;;99       Command(ctrlVCOM2    , 0x90);
0001d0  2290              MOVS     r2,#0x90
0001d2  21c7              MOVS     r1,#0xc7
0001d4  4620              MOV      r0,r4
0001d6  f7fffffe          BL       _ZN7Ili93417CommandEhh ; Ili9341::Command(unsigned char, unsigned char)
;;;100      Command(ctrlMAC      , 0xC8);
0001da  22c8              MOVS     r2,#0xc8
0001dc  2136              MOVS     r1,#0x36
0001de  4620              MOV      r0,r4
0001e0  f7fffffe          BL       _ZN7Ili93417CommandEhh ; Ili9341::Command(unsigned char, unsigned char)
;;;101      Command(ctrlColMod   , 0x65);
0001e4  2265              MOVS     r2,#0x65
0001e6  213a              MOVS     r1,#0x3a
0001e8  4620              MOV      r0,r4
0001ea  f7fffffe          BL       _ZN7Ili93417CommandEhh ; Ili9341::Command(unsigned char, unsigned char)
;;;102     
;;;103      Command(ctrlFRC      , 0x00, static_cast<BYTE>(ILtdc::osccklFrequency / ((ILtdc::height + 2U + 2U) * ILtdc::frameRate))); 
0001ee  231d              MOVS     r3,#0x1d
0001f0  2200              MOVS     r2,#0
0001f2  21b1              MOVS     r1,#0xb1
0001f4  4620              MOV      r0,r4
0001f6  f7fffffe          BL       _ZN7Ili93417CommandEhhh ; Ili9341::Command(unsigned char, unsigned char, unsigned char)
;;;104    
;;;105      static constexpr BYTE const dataDFC     [] { 0x0A, 0xA2, (ILtdc::height / 8) - 1, ILtdc::pcdivValue };
;;;106    
;;;107      Command(ctrlDFC      , dataDFC);
0001fa  4a25              LDR      r2,|L1.656|
0001fc  21b6              MOVS     r1,#0xb6
0001fe  4620              MOV      r0,r4
000200  f7fffffe          BL       _ZNK7Ili93417CommandILj4EEEvhRAT__Kh ; void Ili9341::Command<(unsigned)4>(unsigned char, const unsigned char(&)[T1]) const
;;;108      Command(ctrl3GammaEna, 0x00);
000204  2200              MOVS     r2,#0
000206  21f2              MOVS     r1,#0xf2
000208  4620              MOV      r0,r4
00020a  f7fffffe          BL       _ZN7Ili93417CommandEhh ; Ili9341::Command(unsigned char, unsigned char)
;;;109      
;;;110      constexpr HWRD const horMax = ILtdc::width - 1U;
00020e  25ef              MOVS     r5,#0xef
;;;111      static constexpr BYTE const dataSetCA   [] { 0x00, 0x00, MsbFromHwrd(horMax), LsbFromHwrd(horMax) };
;;;112    
;;;113      Command(ctrlSetCA    , dataSetCA);
000210  4a20              LDR      r2,|L1.660|
000212  212a              MOVS     r1,#0x2a
000214  4620              MOV      r0,r4
000216  f7fffffe          BL       _ZNK7Ili93417CommandILj4EEEvhRAT__Kh ; void Ili9341::Command<(unsigned)4>(unsigned char, const unsigned char(&)[T1]) const
;;;114    
;;;115      constexpr HWRD const verMax = ILtdc::height - 1U;
00021a  f240163f          MOV      r6,#0x13f
;;;116      static constexpr BYTE const dataSetPA   [] { 0x00, 0x00, MsbFromHwrd(verMax), LsbFromHwrd(verMax) };
;;;117    
;;;118      Command(ctrlSetPA    , dataSetPA);
00021e  4a1e              LDR      r2,|L1.664|
000220  212b              MOVS     r1,#0x2b
000222  4620              MOV      r0,r4
000224  f7fffffe          BL       _ZNK7Ili93417CommandILj4EEEvhRAT__Kh ; void Ili9341::Command<(unsigned)4>(unsigned char, const unsigned char(&)[T1]) const
;;;119      Command(ctrlGamma    , 0x01);
000228  2201              MOVS     r2,#1
00022a  2126              MOVS     r1,#0x26
00022c  4620              MOV      r0,r4
00022e  f7fffffe          BL       _ZN7Ili93417CommandEhh ; Ili9341::Command(unsigned char, unsigned char)
;;;120    
;;;121      static constexpr BYTE const dataPGamma  [] { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1, 0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
;;;122    
;;;123      Command(ctrlPGamma   , dataPGamma);
000232  4a1a              LDR      r2,|L1.668|
000234  21e0              MOVS     r1,#0xe0
000236  4620              MOV      r0,r4
000238  f7fffffe          BL       _ZNK7Ili93417CommandILj15EEEvhRAT__Kh ; void Ili9341::Command<(unsigned)15>(unsigned char, const unsigned char(&)[T1]) const
;;;124    
;;;125      static constexpr BYTE const dataNGamma  [] { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1, 0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
;;;126    
;;;127      Command(ctrlNGamma   , dataNGamma);
00023c  4a18              LDR      r2,|L1.672|
00023e  21e1              MOVS     r1,#0xe1
000240  4620              MOV      r0,r4
000242  f7fffffe          BL       _ZNK7Ili93417CommandILj15EEEvhRAT__Kh ; void Ili9341::Command<(unsigned)15>(unsigned char, const unsigned char(&)[T1]) const
;;;128      Command(ctrlSleepOut);
000246  2111              MOVS     r1,#0x11
000248  4620              MOV      r0,r4
00024a  f7fffffe          BL       _ZNK7Ili93417CommandEh ; Ili9341::Command(unsigned char) const
;;;129      Command(ctrlDisplayOn);
00024e  2129              MOVS     r1,#0x29
000250  4620              MOV      r0,r4
000252  f7fffffe          BL       _ZNK7Ili93417CommandEh ; Ili9341::Command(unsigned char) const
;;;130      Command(ctrlRgbInterf, 0xC0); //Seite 154 ILITEK -> Lese Daten aus Memory statt Reg 
000256  22c0              MOVS     r2,#0xc0
000258  21b0              MOVS     r1,#0xb0
00025a  4620              MOV      r0,r4
00025c  f7fffffe          BL       _ZN7Ili93417CommandEhh ; Ili9341::Command(unsigned char, unsigned char)
;;;131    
;;;132      static constexpr BYTE const dataLcdIntrf[] { 0x01, 0x00, 0x06 };
;;;133    
;;;134      Command(ctrlLcdInterf, dataLcdIntrf);
000260  4a10              LDR      r2,|L1.676|
000262  21f6              MOVS     r1,#0xf6
000264  4620              MOV      r0,r4
000266  f7fffffe          BL       _ZNK7Ili93417CommandILj3EEEvhRAT__Kh ; void Ili9341::Command<(unsigned)3>(unsigned char, const unsigned char(&)[T1]) const
;;;135    
;;;136    	ltdc.initLTDC();
00026a  f104000d          ADD      r0,r4,#0xd
00026e  f7fffffe          BL       _ZNK5ILtdc8initLTDCEv ; ILtdc::initLTDC() const
;;;137    	
;;;138    }
000272  bd70              POP      {r4-r6,pc}
                          ENDP

                  |L1.628|
                          DCD      rbGPIOD
                  |L1.632|
                          DCD      rbGPIOC
                  |L1.636|
                          DCD      _ZZN7Ili93415StartEvE7unknown ; Ili9341::Start()::unknown
                  |L1.640|
                          DCD      _ZZN7Ili93415StartEvE10dataPowerA ; Ili9341::Start()::dataPowerA
                  |L1.644|
                          DCD      _ZZN7Ili93415StartEvE10dataPowerB ; Ili9341::Start()::dataPowerB
                  |L1.648|
                          DCD      _ZZN7Ili93415StartEvE8dataDTCA ; Ili9341::Start()::dataDTCA
                  |L1.652|
                          DCD      _ZZN7Ili93415StartEvE12dataPwrOnSeq ; Ili9341::Start()::dataPwrOnSeq
                  |L1.656|
                          DCD      _ZZN7Ili93415StartEvE7dataDFC ; Ili9341::Start()::dataDFC
                  |L1.660|
                          DCD      _ZZN7Ili93415StartEvE9dataSetCA ; Ili9341::Start()::dataSetCA
                  |L1.664|
                          DCD      _ZZN7Ili93415StartEvE9dataSetPA ; Ili9341::Start()::dataSetPA
                  |L1.668|
                          DCD      _ZZN7Ili93415StartEvE10dataPGamma ; Ili9341::Start()::dataPGamma
                  |L1.672|
                          DCD      _ZZN7Ili93415StartEvE10dataNGamma ; Ili9341::Start()::dataNGamma
                  |L1.676|
                          DCD      _ZZN7Ili93415StartEvE12dataLcdIntrf ; Ili9341::Start()::dataLcdIntrf

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          REQUIRE __aeabi_unwind_cpp_pr1
                          REQUIRE __aeabi_unwind_cpp_pr0
                          REQUIRE __aeabi_unwind_cpp_pr0
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZN7Ili9341C1Ev||
                          DCD      0x000000e4
                          RELOC 42, ||.text||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZNK7Ili93418SendDataEh||
                          DCD      0x00000110
                          RELOC 42, ||.text||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZNK7Ili934111SendCommandEh||
                          DCD      0x00000164
                          RELOC 42, ||.text||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZN7Ili93415StartEv||

                          AREA ||.ARM.extab||, DATA, READONLY, ALIGN=2

                          REQUIRE __cxa_call_unexpected
                          REQUIRE __cxa_call_terminate
                          REQUIRE __cxa_call_unexpected
                          REQUIRE __cxa_call_terminate
                          REQUIRE __cxa_call_unexpected
                          REQUIRE __cxa_call_terminate
                          REQUIRE __cxa_call_unexpected
                          REQUIRE __cxa_call_terminate
                  ||.extab._ZN7Ili9341C1Ev||
                          DCD      0x8101a700
                          DCD      0x8400b0b0
000008  00ca0017          DCW      0x00ca,0x0017
                          DCD      0x80000000
                          DCD      0x00000001
                          RELOC 42, __ARM_common_noexcept_landing
                          DCD      0x00000000
                  ||.extab._ZNK7Ili93418SendDataEh||
                          DCD      0x80aab0b0
00001c  001c0011          DCW      0x001c,0x0011
                          DCD      0x80000000
                          DCD      0x00000001
                          RELOC 42, __ARM_common_noexcept_landing
                          DCD      0x00000000
                  ||.extab._ZNK7Ili934111SendCommandEh||
                          DCD      0x80aab0b0
000030  000c001d          DCW      0x000c,0x001d
                          DCD      0x80000000
                          DCD      0x00000001
                          RELOC 42, __ARM_common_noexcept_landing
                          DCD      0x00000000
                  ||.extab._ZN7Ili93415StartEv||
                          DCD      0x80aab0b0
000044  0002010f          DCW      0x0002,0x010f
                          DCD      0x80000000
                          DCD      0x00000001
                          RELOC 42, __ARM_common_noexcept_landing
                          DCD      0x00000000

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  _ZZN7Ili93415StartEvE7unknown ; Ili9341::Start()::unknown
000000  c30850            DCB      0xc3,0x08,0x50
                  _ZZN7Ili93415StartEvE10dataPowerA ; Ili9341::Start()::dataPowerA
000003  39                DCB      0x39
000004  2c003402          DCB      0x2c,0x00,0x34,0x02
                  _ZZN7Ili93415StartEvE10dataPowerB ; Ili9341::Start()::dataPowerB
000008  00c130            DCB      0x00,0xc1,0x30
                  _ZZN7Ili93415StartEvE8dataDTCA ; Ili9341::Start()::dataDTCA
00000b  85                DCB      0x85
00000c  0078              DCB      0x00,0x78
                  _ZZN7Ili93415StartEvE12dataPwrOnSeq ; Ili9341::Start()::dataPwrOnSeq
00000e  6403              DCB      0x64,0x03
000010  1281              DCB      0x12,0x81
                  _ZZN7Ili93415StartEvE7dataDFC ; Ili9341::Start()::dataDFC
000012  0aa2              DCB      0x0a,0xa2
000014  2704              DCB      0x27,0x04
                  _ZZN7Ili93415StartEvE9dataSetCA ; Ili9341::Start()::dataSetCA
000016  0000              DCB      0x00,0x00
000018  00ef              DCB      0x00,0xef
                  _ZZN7Ili93415StartEvE9dataSetPA ; Ili9341::Start()::dataSetPA
00001a  0000              DCB      0x00,0x00
00001c  013f              DCB      0x01,0x3f
                  _ZZN7Ili93415StartEvE10dataPGamma ; Ili9341::Start()::dataPGamma
00001e  0f31              DCB      0x0f,0x31
000020  2b0c0e08          DCB      0x2b,0x0c,0x0e,0x08
000024  4ef13707          DCB      0x4e,0xf1,0x37,0x07
000028  10030e09          DCB      0x10,0x03,0x0e,0x09
00002c  00                DCB      0x00
                  _ZZN7Ili93415StartEvE10dataNGamma ; Ili9341::Start()::dataNGamma
00002d  000e14            DCB      0x00,0x0e,0x14
000030  03110731          DCB      0x03,0x11,0x07,0x31
000034  c148080f          DCB      0xc1,0x48,0x08,0x0f
000038  0c31360f          DCB      0x0c,0x31,0x36,0x0f
                  _ZZN7Ili93415StartEvE12dataLcdIntrf ; Ili9341::Start()::dataLcdIntrf
00003c  010006            DCB      0x01,0x00,0x06

                          AREA ||i._Z14AHBClockEnablej||, COMGROUP=_Z14AHBClockEnablej, CODE, READONLY, ALIGN=2

                  _Z14AHBClockEnablej PROC ; AHBClockEnable(unsigned)
;;;332    /// \param[in] num kennzeichnet die AHB-Periphery.
;;;333    inline void AHBClockEnable(WORD const num) noexcept
000000  b570              PUSH     {r4-r6,lr}
;;;334    {
000002  4604              MOV      r4,r0
;;;335      auto const i = num >> PERIPHERY_INDX_POS;
000004  0a25              LSRS     r5,r4,#8
;;;336      auto const n = num % 32U;
000006  f004061f          AND      r6,r4,#0x1f
;;;337      
;;;338      Atomic::Orr(rbRCC.AHBENR[i], 1U << n);
00000a  2201              MOVS     r2,#1
00000c  fa02f106          LSL      r1,r2,r6
000010  4a02              LDR      r2,|L16.28|
000012  eb020085          ADD      r0,r2,r5,LSL #2
000016  f7fffffe          BL       _ZN6Atomic3OrrIjEET_RVS1_S1_ ; T1 Atomic::Orr<unsigned>(volatile T1&, T1)
;;;339    }
00001a  bd70              POP      {r4-r6,pc}
;;;340    
                          ENDP

                  |L16.28|
                          DCD      rbRCC+0x30

                          AREA ||area_number.17||, COMGROUP=_Z14AHBClockEnablej, LINKORDER=||i._Z14AHBClockEnablej||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z14AHBClockEnablej||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic4BfldIjEET_RVS1_S1_S1_||, COMGROUP=_ZN6Atomic4BfldIjEET_RVS1_S1_S1_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic4BfldIjEET_RVS1_S1_S1_ PROC ; T1 Atomic::Bfld<unsigned>(volatile T1&, T1, T1)
;;;326      
;;;327      template<typename TYPE> inline TYPE Bfld(TYPE volatile & data, TYPE const set, TYPE const res) noexcept
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;328      {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;329        TYPE value;
;;;330        
;;;331        do 
00000a  bf00              NOP      
                  |L24.12|
;;;332        {
;;;333          value = Cortex::LoadLinked(data);
00000c  4640              MOV      r0,r8
00000e  f7fffffe          BL       _ZN6Cortex10LoadLinkedIjEET_RVKS1_ ; T1 Cortex::LoadLinked<unsigned>(const volatile T1&)
000012  4604              MOV      r4,r0
;;;334        } while ( Cortex::SaveConditional(data, (TYPE)(set | (value & ~res))) );
000014  ea240006          BIC      r0,r4,r6
000018  ea400105          ORR      r1,r0,r5
00001c  4640              MOV      r0,r8
00001e  f7fffffe          BL       _ZN6Cortex15SaveConditionalIjEEbRVT_S1_ ; bool Cortex::SaveConditional<unsigned>(volatile T1&, T1)
000022  2800              CMP      r0,#0
000024  d1f2              BNE      |L24.12|
;;;335        
;;;336        return value;
000026  4627              MOV      r7,r4
000028  4638              MOV      r0,r7
;;;337      }
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;338    };
                          ENDP


                          AREA ||area_number.25||, COMGROUP=_ZN6Atomic4BfldIjEET_RVS1_S1_S1_, LINKORDER=||t._ZN6Atomic4BfldIjEET_RVS1_S1_S1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic4BfldIjEET_RVS1_S1_S1_||
                          DCD      0x00000001

                          AREA ||i._Z8WrGpioSPRV14__regbank_GPIOjj||, COMGROUP=_Z8WrGpioSPRV14__regbank_GPIOjj, CODE, READONLY, ALIGN=1

                  _Z8WrGpioSPRV14__regbank_GPIOjj PROC ; WrGpioSP(volatile __regbank_GPIO&, unsigned, unsigned)
;;;121    
;;;122    inline WORD WrGpioSP(RegbankTypeGPIO volatile & gpio, unsigned const n, WORD const sp)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;123    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;124      unsigned const pos = GPIO_SP_BIT2POS(n);
00000a  006f              LSLS     r7,r5,#1
;;;125      
;;;126      return Atomic::Bfld(gpio.OSPEEDR, (sp & MASK_GPIO_OSPEEDR) << pos, MASK_GPIO_OSPEEDR << pos);    
00000c  2003              MOVS     r0,#3
00000e  fa00f207          LSL      r2,r0,r7
000012  f0060003          AND      r0,r6,#3
000016  fa00f107          LSL      r1,r0,r7
00001a  f1040008          ADD      r0,r4,#8
00001e  f7fffffe          BL       _ZN6Atomic4BfldIjEET_RVS1_S1_S1_ ; T1 Atomic::Bfld<unsigned>(volatile T1&, T1, T1)
;;;127    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;128    
                          ENDP


                          AREA ||area_number.32||, COMGROUP=_Z8WrGpioSPRV14__regbank_GPIOjj, LINKORDER=||i._Z8WrGpioSPRV14__regbank_GPIOjj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.32||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z8WrGpioSPRV14__regbank_GPIOjj||
                          DCD      0x00000001

                          AREA ||i._Z8WrGpioMDRV14__regbank_GPIOjj||, COMGROUP=_Z8WrGpioMDRV14__regbank_GPIOjj, CODE, READONLY, ALIGN=1

                  _Z8WrGpioMDRV14__regbank_GPIOjj PROC ; WrGpioMD(volatile __regbank_GPIO&, unsigned, unsigned)
;;;131    
;;;132    inline WORD WrGpioMD(RegbankTypeGPIO volatile & gpio, unsigned const n, WORD const md)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;133    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;134      unsigned const pos = GPIO_MD_BIT2POS(n);
00000a  0066              LSLS     r6,r4,#1
;;;135      
;;;136      return Atomic::Bfld(gpio.MODER, (md & MASK_GPIO_MODER) << pos, MASK_GPIO_MODER << pos);
00000c  2003              MOVS     r0,#3
00000e  fa00f206          LSL      r2,r0,r6
000012  f0050003          AND      r0,r5,#3
000016  fa00f106          LSL      r1,r0,r6
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       _ZN6Atomic4BfldIjEET_RVS1_S1_S1_ ; T1 Atomic::Bfld<unsigned>(volatile T1&, T1, T1)
;;;137    }
000020  e8bd81f0          POP      {r4-r8,pc}
;;;138    
                          ENDP


                          AREA ||area_number.40||, COMGROUP=_Z8WrGpioMDRV14__regbank_GPIOjj, LINKORDER=||i._Z8WrGpioMDRV14__regbank_GPIOjj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.40||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z8WrGpioMDRV14__regbank_GPIOjj||
                          DCD      0x00000001

                          AREA ||i._ZN7Ili93417CommandEhhh||, COMGROUP=_ZN7Ili93417CommandEhhh, CODE, READONLY, ALIGN=1

                  _ZN7Ili93417CommandEhhh PROC ; Ili9341::Command(unsigned char, unsigned char, unsigned char)
;;;116    
;;;117      void Command(BYTE const ctrl, BYTE const dat0, BYTE const dat1) noexcept
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;118      { 
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;119        data[0] = dat0;
00000c  73a5              STRB     r5,[r4,#0xe]
;;;120        data[1] = dat1;
00000e  73e6              STRB     r6,[r4,#0xf]
;;;121    
;;;122        SendCmd(ctrl, data, 2U);
000010  2302              MOVS     r3,#2
000012  f104020e          ADD      r2,r4,#0xe
000016  4639              MOV      r1,r7
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       _ZNK7Ili93417SendCmdEhPKhj ; Ili9341::SendCmd(unsigned char, const unsigned char*, unsigned) const
;;;123      }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;124    
                          ENDP


                          AREA ||area_number.48||, COMGROUP=_ZN7Ili93417CommandEhhh, LINKORDER=||i._ZN7Ili93417CommandEhhh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.48||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7Ili93417CommandEhhh||
                          DCD      0x00000001

                          AREA ||t._ZN6Cortex10LoadLinkedIjEET_RVKS1_||, COMGROUP=_ZN6Cortex10LoadLinkedIjEET_RVKS1_, CODE, READONLY, ALIGN=1

                  _ZN6Cortex10LoadLinkedIjEET_RVKS1_ PROC ; T1 Cortex::LoadLinked<unsigned>(const volatile T1&)
;;;247      template<typename TYPE>
;;;248      FORCE_INLINE TYPE LoadLinked(TYPE const volatile & data) noexcept { DMB(); return ArmExclusive<sizeof(TYPE)>::LdrEx(data); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  f7fffffe          BL       _ZN6Cortex3DMBEv ; Cortex::DMB()
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj ; Cortex::ArmExclusive<(unsigned)4>::LdrEx(const volatile unsigned&)
00000e  4605              MOV      r5,r0
000010  4628              MOV      r0,r5
000012  bd70              POP      {r4-r6,pc}
;;;249      
                          ENDP


                          AREA ||area_number.55||, COMGROUP=_ZN6Cortex10LoadLinkedIjEET_RVKS1_, LINKORDER=||t._ZN6Cortex10LoadLinkedIjEET_RVKS1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.55||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Cortex10LoadLinkedIjEET_RVKS1_||
                          DCD      0x00000001

                          AREA ||t._ZN6Cortex15SaveConditionalIjEEbRVT_S1_||, COMGROUP=_ZN6Cortex15SaveConditionalIjEEbRVT_S1_, CODE, READONLY, ALIGN=1

                  _ZN6Cortex15SaveConditionalIjEEbRVT_S1_ PROC ; bool Cortex::SaveConditional<unsigned>(volatile T1&, T1)
;;;258      template<typename TYPE>
;;;259      FORCE_INLINE bool SaveConditional(TYPE volatile & data, TYPE const value) noexcept
000000  b570              PUSH     {r4-r6,lr}
;;;260      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;261        if ( ArmExclusive<sizeof(TYPE)>::StrEx(data, value) )
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj ; Cortex::ArmExclusive<(unsigned)4>::StrEx(volatile unsigned&, unsigned)
00000e  b108              CBZ      r0,|L61.20|
;;;262          return true;
000010  2001              MOVS     r0,#1
                  |L61.18|
;;;263    
;;;264        DSB();
;;;265          
;;;266        return false;
;;;267      }
000012  bd70              POP      {r4-r6,pc}
                  |L61.20|
000014  f7fffffe          BL       _ZN6Cortex3DSBEv ; Cortex::DSB()
000018  2000              MOVS     r0,#0                 ;266
00001a  e7fa              B        |L61.18|
;;;268      
                          ENDP


                          AREA ||area_number.62||, COMGROUP=_ZN6Cortex15SaveConditionalIjEEbRVT_S1_, LINKORDER=||t._ZN6Cortex15SaveConditionalIjEEbRVT_S1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.62||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Cortex15SaveConditionalIjEEbRVT_S1_||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic3OrrIjEET_RVS1_S1_||, COMGROUP=_ZN6Atomic3OrrIjEET_RVS1_S1_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic3OrrIjEET_RVS1_S1_ PROC ; T1 Atomic::Orr<unsigned>(volatile T1&, T1)
;;;182      /// \tparam TYPE ist der Datentyp der atomaren Operation.
;;;183      template<typename TYPE> inline TYPE Orr(TYPE volatile & data, TYPE const mask ) noexcept { return Modify<TYPE, BinOpType::opOrr>(data, mask); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6Atomic6ModifyIjLNS_9BinOpTypeE5EEET_RVS2_S2_ ; T1 Atomic::Modify<unsigned, (Atomic::BinOpType)5>(volatile T1&, T1)
00000e  4606              MOV      r6,r0
000010  4630              MOV      r0,r6
000012  bd70              POP      {r4-r6,pc}
;;;184    
                          ENDP


                          AREA ||area_number.69||, COMGROUP=_ZN6Atomic3OrrIjEET_RVS1_S1_, LINKORDER=||t._ZN6Atomic3OrrIjEET_RVS1_S1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.69||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic3OrrIjEET_RVS1_S1_||
                          DCD      0x00000001

                          AREA ||i._ZN6IWrPin3ClrEv||, COMGROUP=_ZN6IWrPin3ClrEv, CODE, READONLY, ALIGN=1

                  _ZN6IWrPin3ClrEv PROC ; IWrPin::Clr()
;;;47       
;;;48       void Clr() noexcept { Set(false); } 
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  6820              LDR      r0,[r4,#0]
000006  2100              MOVS     r1,#0
000008  68c2              LDR      r2,[r0,#0xc]
00000a  4620              MOV      r0,r4
00000c  4790              BLX      r2
00000e  bd10              POP      {r4,pc}
;;;49     };
                          ENDP


                          AREA ||area_number.76||, COMGROUP=_ZN6IWrPin3ClrEv, LINKORDER=||i._ZN6IWrPin3ClrEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.76||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6IWrPin3ClrEv||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZN6IWrPin3ClrEv||

                          AREA ||area_number.77||, COMGROUP=_ZN6IWrPin3ClrEv, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.77||, ||.ARM.extab||
                          REQUIRE __cxa_call_unexpected
                  ||.extab._ZN6IWrPin3ClrEv||
                          DCD      0x80a8b0b0
000004  0002000f          DCW      0x0002,0x000f
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||i._ZNK7Ili93417CommandEh||, COMGROUP=_ZNK7Ili93417CommandEh, CODE, READONLY, ALIGN=1

                  _ZNK7Ili93417CommandEh PROC ; Ili9341::Command(unsigned char) const
;;;104    
;;;105      void Command(BYTE const ctrl) const noexcept { SendCmd(ctrl); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  2300              MOVS     r3,#0
000008  461a              MOV      r2,r3
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _ZNK7Ili93417SendCmdEhPKhj ; Ili9341::SendCmd(unsigned char, const unsigned char*, unsigned) const
000012  bd70              POP      {r4-r6,pc}
;;;106    
                          ENDP


                          AREA ||area_number.85||, COMGROUP=_ZNK7Ili93417CommandEh, LINKORDER=||i._ZNK7Ili93417CommandEh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.85||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK7Ili93417CommandEh||
                          DCD      0x00000001

                          AREA ||i._ZN7Ili93417CommandEhh||, COMGROUP=_ZN7Ili93417CommandEhh, CODE, READONLY, ALIGN=1

                  _ZN7Ili93417CommandEhh PROC ; Ili9341::Command(unsigned char, unsigned char)
;;;109      
;;;110      void Command(BYTE const ctrl, BYTE const value) noexcept
000000  b570              PUSH     {r4-r6,lr}
;;;111      { 
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;112        data[0] = value;
000008  73a5              STRB     r5,[r4,#0xe]
;;;113    
;;;114        SendCmd(ctrl, data, 1U);
00000a  2301              MOVS     r3,#1
00000c  f104020e          ADD      r2,r4,#0xe
000010  4631              MOV      r1,r6
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       _ZNK7Ili93417SendCmdEhPKhj ; Ili9341::SendCmd(unsigned char, const unsigned char*, unsigned) const
;;;115      }
000018  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||area_number.92||, COMGROUP=_ZN7Ili93417CommandEhh, LINKORDER=||i._ZN7Ili93417CommandEhh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.92||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7Ili93417CommandEhh||
                          DCD      0x00000001

                          AREA ||t._ZNK7Ili93417CommandILj3EEEvhRAT__Kh||, COMGROUP=_ZNK7Ili93417CommandILj3EEEvhRAT__Kh, CODE, READONLY, ALIGN=1

                  _ZNK7Ili93417CommandILj3EEEvhRAT__Kh PROC ; void Ili9341::Command<(unsigned)3>(unsigned char, const unsigned char(&)[T1]) const
;;;107      template<unsigned NUM>
;;;108      void Command(BYTE const ctrl, BYTE const (& bytes)[NUM]) const noexcept { SendCmd(ctrl, bytes, NUM); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  2303              MOVS     r3,#3
00000a  4632              MOV      r2,r6
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       _ZNK7Ili93417SendCmdEhPKhj ; Ili9341::SendCmd(unsigned char, const unsigned char*, unsigned) const
000014  bd70              POP      {r4-r6,pc}
;;;109      
                          ENDP


                          AREA ||area_number.99||, COMGROUP=_ZNK7Ili93417CommandILj3EEEvhRAT__Kh, LINKORDER=||t._ZNK7Ili93417CommandILj3EEEvhRAT__Kh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.99||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK7Ili93417CommandILj3EEEvhRAT__Kh||
                          DCD      0x00000001

                          AREA ||t._ZNK7Ili93417CommandILj15EEEvhRAT__Kh||, COMGROUP=_ZNK7Ili93417CommandILj15EEEvhRAT__Kh, CODE, READONLY, ALIGN=1

                  _ZNK7Ili93417CommandILj15EEEvhRAT__Kh PROC ; void Ili9341::Command<(unsigned)15>(unsigned char, const unsigned char(&)[T1]) const
;;;107      template<unsigned NUM>
;;;108      void Command(BYTE const ctrl, BYTE const (& bytes)[NUM]) const noexcept { SendCmd(ctrl, bytes, NUM); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  230f              MOVS     r3,#0xf
00000a  4632              MOV      r2,r6
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       _ZNK7Ili93417SendCmdEhPKhj ; Ili9341::SendCmd(unsigned char, const unsigned char*, unsigned) const
000014  bd70              POP      {r4-r6,pc}
;;;109      
                          ENDP


                          AREA ||area_number.106||, COMGROUP=_ZNK7Ili93417CommandILj15EEEvhRAT__Kh, LINKORDER=||t._ZNK7Ili93417CommandILj15EEEvhRAT__Kh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.106||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK7Ili93417CommandILj15EEEvhRAT__Kh||
                          DCD      0x00000001

                          AREA ||t._ZNK7Ili93417CommandILj4EEEvhRAT__Kh||, COMGROUP=_ZNK7Ili93417CommandILj4EEEvhRAT__Kh, CODE, READONLY, ALIGN=1

                  _ZNK7Ili93417CommandILj4EEEvhRAT__Kh PROC ; void Ili9341::Command<(unsigned)4>(unsigned char, const unsigned char(&)[T1]) const
;;;107      template<unsigned NUM>
;;;108      void Command(BYTE const ctrl, BYTE const (& bytes)[NUM]) const noexcept { SendCmd(ctrl, bytes, NUM); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  2304              MOVS     r3,#4
00000a  4632              MOV      r2,r6
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       _ZNK7Ili93417SendCmdEhPKhj ; Ili9341::SendCmd(unsigned char, const unsigned char*, unsigned) const
000014  bd70              POP      {r4-r6,pc}
;;;109      
                          ENDP


                          AREA ||area_number.113||, COMGROUP=_ZNK7Ili93417CommandILj4EEEvhRAT__Kh, LINKORDER=||t._ZNK7Ili93417CommandILj4EEEvhRAT__Kh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.113||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK7Ili93417CommandILj4EEEvhRAT__Kh||
                          DCD      0x00000001

                          AREA ||t._ZNK7Ili93417CommandILj5EEEvhRAT__Kh||, COMGROUP=_ZNK7Ili93417CommandILj5EEEvhRAT__Kh, CODE, READONLY, ALIGN=1

                  _ZNK7Ili93417CommandILj5EEEvhRAT__Kh PROC ; void Ili9341::Command<(unsigned)5>(unsigned char, const unsigned char(&)[T1]) const
;;;107      template<unsigned NUM>
;;;108      void Command(BYTE const ctrl, BYTE const (& bytes)[NUM]) const noexcept { SendCmd(ctrl, bytes, NUM); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  2305              MOVS     r3,#5
00000a  4632              MOV      r2,r6
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       _ZNK7Ili93417SendCmdEhPKhj ; Ili9341::SendCmd(unsigned char, const unsigned char*, unsigned) const
000014  bd70              POP      {r4-r6,pc}
;;;109      
                          ENDP


                          AREA ||area_number.120||, COMGROUP=_ZNK7Ili93417CommandILj5EEEvhRAT__Kh, LINKORDER=||t._ZNK7Ili93417CommandILj5EEEvhRAT__Kh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.120||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK7Ili93417CommandILj5EEEvhRAT__Kh||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj, CODE, READONLY, ALIGN=1

                  _ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj PROC ; Cortex::ArmExclusive<(unsigned)4>::LdrEx(const volatile unsigned&)
;;;67         
;;;68         static WORD LdrEx(WORD const volatile & data)                   noexcept { return _LdrExW(&data); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _LdrExW
00000a  4605              MOV      r5,r0
00000c  4628              MOV      r0,r5
00000e  bd70              POP      {r4-r6,pc}
;;;69         static bool StrEx(WORD       volatile & data, WORD const value) noexcept { return _StrExW(&data, value) != 0U; }
                          ENDP


                          AREA ||area_number.127||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj, LINKORDER=||i._ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.127||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj||

                          AREA ||area_number.128||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.128||, ||.ARM.extab||
                          REQUIRE __cxa_call_unexpected
                  ||.extab._ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj||
                          DCD      0x80aab0b0
000004  0002000b          DCW      0x0002,0x000b
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||i._ZN6Cortex3DMBEv||, COMGROUP=_ZN6Cortex3DMBEv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex3DMBEv PROC ; Cortex::DMB()
;;;121    
;;;122      FORCE_INLINE void DMB() noexcept { SCHEDULE_BARRIER(); __dmb(0xF); SCHEDULE_BARRIER(); }  
000000  bf00              NOP      
000002  bf00              NOP      
000004  f3bf8f5f          DMB      
000008  bf00              NOP      
00000a  bf00              NOP      
00000c  4770              BX       lr
;;;123      FORCE_INLINE void DSB() noexcept { SCHEDULE_BARRIER(); __dsb(0xF); SCHEDULE_BARRIER(); }
                          ENDP


                          AREA ||area_number.135||, COMGROUP=_ZN6Cortex3DMBEv, LINKORDER=||i._ZN6Cortex3DMBEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.135||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex3DMBEv||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex3DSBEv||, COMGROUP=_ZN6Cortex3DSBEv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex3DSBEv PROC ; Cortex::DSB()
;;;122      FORCE_INLINE void DMB() noexcept { SCHEDULE_BARRIER(); __dmb(0xF); SCHEDULE_BARRIER(); }  
;;;123      FORCE_INLINE void DSB() noexcept { SCHEDULE_BARRIER(); __dsb(0xF); SCHEDULE_BARRIER(); }
000000  bf00              NOP      
000002  bf00              NOP      
000004  f3bf8f4f          DSB      
000008  bf00              NOP      
00000a  bf00              NOP      
00000c  4770              BX       lr
;;;124      FORCE_INLINE void ISB() noexcept { SCHEDULE_BARRIER(); __isb(0xF); SCHEDULE_BARRIER(); }
                          ENDP


                          AREA ||area_number.142||, COMGROUP=_ZN6Cortex3DSBEv, LINKORDER=||i._ZN6Cortex3DSBEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.142||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex3DSBEv||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj, CODE, READONLY, ALIGN=1

                  _ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj PROC ; Cortex::ArmExclusive<(unsigned)4>::StrEx(volatile unsigned&, unsigned)
;;;68         static WORD LdrEx(WORD const volatile & data)                   noexcept { return _LdrExW(&data); }
;;;69         static bool StrEx(WORD       volatile & data, WORD const value) noexcept { return _StrExW(&data, value) != 0U; }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _StrExW
00000e  b108              CBZ      r0,|L148.20|
000010  2001              MOVS     r0,#1
000012  e000              B        |L148.22|
                  |L148.20|
000014  2000              MOVS     r0,#0
                  |L148.22|
000016  4606              MOV      r6,r0
000018  4630              MOV      r0,r6
00001a  bd70              POP      {r4-r6,pc}
;;;70     
                          ENDP


                          AREA ||area_number.149||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj, LINKORDER=||i._ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.149||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj||

                          AREA ||area_number.150||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.150||, ||.ARM.extab||
                          REQUIRE __cxa_call_unexpected
                  ||.extab._ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj||
                          DCD      0x80aab0b0
000004  0002000f          DCW      0x0002,0x000f
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||t._ZN6Atomic6ModifyIjLNS_9BinOpTypeE5EEET_RVS2_S2_||, COMGROUP=_ZN6Atomic6ModifyIjLNS_9BinOpTypeE5EEET_RVS2_S2_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic6ModifyIjLNS_9BinOpTypeE5EEET_RVS2_S2_ PROC ; T1 Atomic::Modify<unsigned, (Atomic::BinOpType)5>(volatile T1&, T1)
;;;54       template<typename TYPE, BinOpType OP> 
;;;55       inline TYPE Modify(TYPE volatile & data, TYPE const operand) noexcept
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;56       {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;57         TYPE result;
;;;58         
;;;59         do 
000008  bf00              NOP      
                  |L156.10|
;;;60         {
;;;61           result = Cortex::LoadLinked(data);
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       _ZN6Cortex10LoadLinkedIjEET_RVKS1_ ; T1 Cortex::LoadLinked<unsigned>(const volatile T1&)
000010  4604              MOV      r4,r0
;;;62         } while ( Cortex::SaveConditional(data, BinOp<TYPE, OP>::Calc(result, operand)) );
000012  4639              MOV      r1,r7
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       _ZN6Atomic5BinOpIjLNS_9BinOpTypeE5EE4CalcEjj ; Atomic::BinOp<unsigned, (Atomic::BinOpType)5>::Calc(unsigned, unsigned)
00001a  4680              MOV      r8,r0
00001c  4641              MOV      r1,r8
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       _ZN6Cortex15SaveConditionalIjEEbRVT_S1_ ; bool Cortex::SaveConditional<unsigned>(volatile T1&, T1)
000024  2800              CMP      r0,#0
000026  d1f0              BNE      |L156.10|
;;;63         
;;;64         return result;
000028  4625              MOV      r5,r4
00002a  4628              MOV      r0,r5
;;;65       }
00002c  e8bd81f0          POP      {r4-r8,pc}
;;;66     
                          ENDP


                          AREA ||area_number.157||, COMGROUP=_ZN6Atomic6ModifyIjLNS_9BinOpTypeE5EEET_RVS2_S2_, LINKORDER=||t._ZN6Atomic6ModifyIjLNS_9BinOpTypeE5EEET_RVS2_S2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.157||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic6ModifyIjLNS_9BinOpTypeE5EEET_RVS2_S2_||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic5BinOpIjLNS_9BinOpTypeE5EE4CalcEjj||, COMGROUP=_ZN6Atomic5BinOpIjLNS_9BinOpTypeE5EE4CalcEjj, CODE, READONLY, ALIGN=1

                  _ZN6Atomic5BinOpIjLNS_9BinOpTypeE5EE4CalcEjj PROC ; Atomic::BinOp<unsigned, (Atomic::BinOpType)5>::Calc(unsigned, unsigned)
;;;41       template<typename TYPE> struct BinOp<TYPE, BinOpType::opAnd> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l & r; } };
;;;42       template<typename TYPE> struct BinOp<TYPE, BinOpType::opOrr> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l | r; } };
000000  4602              MOV      r2,r0
000002  ea420001          ORR      r0,r2,r1
000006  4770              BX       lr
;;;43       
                          ENDP


                          AREA ||area_number.164||, COMGROUP=_ZN6Atomic5BinOpIjLNS_9BinOpTypeE5EE4CalcEjj, LINKORDER=||t._ZN6Atomic5BinOpIjLNS_9BinOpTypeE5EE4CalcEjj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.164||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic5BinOpIjLNS_9BinOpTypeE5EE4CalcEjj||
                          DCD      0x00000001

                          AREA ||i.__ARM_common_noexcept_landing||, COMGROUP=__ARM_common_noexcept_landing, CODE, READONLY, ALIGN=1

                  __ARM_common_noexcept_landing PROC
000000  f7ffbffe          B.W      __cxa_call_terminate
                          ENDP


                          AREA ||area_number.171||, COMGROUP=__ARM_common_noexcept_landing, LINKORDER=||i.__ARM_common_noexcept_landing||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.171||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__ARM_common_noexcept_landing||
                          DCD      0x00000001
