L 1 "Src\Cortex\Cortex.cpp"
N//
N// Cortex.cpp
N//
N
N/// \file Cortex.cpp
N/// %Cortex-spezifische Funktionen (Implementierung).
N/// \sa Cortex.h
N
N#include <Compiler.h>
L 1 ".\Inc\Compiler.h" 1
N//
N// Compiler.h
N//
N
N/// \file Compiler.h
N/// Compiler-spezifische Definitions, Macros und Funktionen.
N/// Um die Quellen auch zu Testzwecken auch mit anderen Compilern (z.B. MSC) übersetzen zu können, müssten in dieser Datei
N/// mittels bedingter Kompilierung verschiedene Makros für die unterschiedlichen Compiler definiert werden.
N
N#if ! defined(guard_COMPILER_H) && defined(__arm__)
X#if ! 0L && 1L
N# define guard_COMPILER_H
N
N# if ! defined(__cplusplus)
X# if ! 1L
S#  error C++ only!
N# endif
N
N# if   defined(_DEBUG)  && ! defined(DEBUG)
X# if   0L  && ! 1L
S#  define DEBUG
N# endif
N
N# if   defined(RELEASE) &&   defined(DEBUG)
X# if   0L &&   1L
S#  error You cannot define RELEASE and DEBUG at the same time
N# endif
N# if ! defined(RELEASE) && ! defined(DEBUG)
X# if ! 0L && ! 1L
S#  error You must define ether RELEASE or DEBUG
N# endif
N
N# include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060037
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
N      namespace std {
N          #define __CLIBNS std::
N          extern "C" {
N    #else
S      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !1L || 0L
S
S    /* 7.18.2.1 */
S
S    /* minimum values of exact-width signed integer types */
S#define INT8_MIN                   -128
S#define INT16_MIN                -32768
S#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
S#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
S
S    /* maximum values of exact-width signed integer types */
S#define INT8_MAX                    127
S#define INT16_MAX                 32767
S#define INT32_MAX            2147483647
S#define INT64_MAX  __INT64_C(9223372036854775807)
S
S    /* maximum values of exact-width unsigned integer types */
S#define UINT8_MAX                   255
S#define UINT16_MAX                65535
S#define UINT32_MAX           4294967295u
S#define UINT64_MAX __UINT64_C(18446744073709551615)
S
S    /* 7.18.2.2 */
S
S    /* minimum values of minimum-width signed integer types */
S#define INT_LEAST8_MIN                   -128
S#define INT_LEAST16_MIN                -32768
S#define INT_LEAST32_MIN          (~0x7fffffff)
S#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
S
S    /* maximum values of minimum-width signed integer types */
S#define INT_LEAST8_MAX                    127
S#define INT_LEAST16_MAX                 32767
S#define INT_LEAST32_MAX            2147483647
S#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
S
S    /* maximum values of minimum-width unsigned integer types */
S#define UINT_LEAST8_MAX                   255
S#define UINT_LEAST16_MAX                65535
S#define UINT_LEAST32_MAX           4294967295u
S#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
S
S    /* 7.18.2.3 */
S
S    /* minimum values of fastest minimum-width signed integer types */
S#define INT_FAST8_MIN           (~0x7fffffff)
S#define INT_FAST16_MIN          (~0x7fffffff)
S#define INT_FAST32_MIN          (~0x7fffffff)
S#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
S
S    /* maximum values of fastest minimum-width signed integer types */
S#define INT_FAST8_MAX             2147483647
S#define INT_FAST16_MAX            2147483647
S#define INT_FAST32_MAX            2147483647
S#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
S
S    /* maximum values of fastest minimum-width unsigned integer types */
S#define UINT_FAST8_MAX            4294967295u
S#define UINT_FAST16_MAX           4294967295u
S#define UINT_FAST32_MAX           4294967295u
S#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
S
S    /* 7.18.2.4 */
S
S    /* minimum value of pointer-holding signed integer type */
S#if __sizeof_ptr == 8
S#define INTPTR_MIN INT64_MIN
S#else
S#define INTPTR_MIN INT32_MIN
S#endif
S
S    /* maximum value of pointer-holding signed integer type */
S#if __sizeof_ptr == 8
S#define INTPTR_MAX INT64_MAX
S#else
S#define INTPTR_MAX INT32_MAX
S#endif
S
S    /* maximum value of pointer-holding unsigned integer type */
S#if __sizeof_ptr == 8
S#define UINTPTR_MAX UINT64_MAX
S#else
S#define UINTPTR_MAX UINT32_MAX
S#endif
S
S    /* 7.18.2.5 */
S
S    /* minimum value of greatest-width signed integer type */
S#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
S
S    /* maximum value of greatest-width signed integer type */
S#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
S
S    /* maximum value of greatest-width unsigned integer type */
S#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
S
S    /* 7.18.3 */
S
S    /* limits of ptrdiff_t */
S#if __sizeof_ptr == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
S#else
S#define PTRDIFF_MIN INT32_MIN
S#define PTRDIFF_MAX INT32_MAX
S#endif
S
S    /* limits of sig_atomic_t */
S#define SIG_ATOMIC_MIN (~0x7fffffff)
S#define SIG_ATOMIC_MAX   2147483647
S
S    /* limit of size_t */
S#if __sizeof_ptr == 8
S#define SIZE_MAX UINT64_MAX
S#else
S#define SIZE_MAX UINT32_MAX
S#endif
S
S    /* limits of wchar_t */
S    /* NB we have to undef and redef because they're defined in both
S     * stdint.h and wchar.h */
S#undef WCHAR_MIN
S#undef WCHAR_MAX
S
S#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
S#else
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   65535
S#endif
S
S    /* limits of wint_t */
S#define WINT_MIN (~0x7fffffff)
S#define WINT_MAX 2147483647
S
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !1L || 0L
S
S    /* 7.18.4.1 macros for minimum-width integer constants */
S#define INT8_C(x)   (x)
S#define INT16_C(x)  (x)
S#define INT32_C(x)  (x)
S#define INT64_C(x)  __INT64_C(x)
S
S#define UINT8_C(x)  (x ## u)
S#define UINT16_C(x) (x ## u)
S#define UINT32_C(x) (x ## u)
S#define UINT64_C(x) __UINT64_C(x)
S
S    /* 7.18.4.2 macros for greatest-width integer constants */
S#define INTMAX_C(x)  __ESCAPE__(x ## ll)
S#define UINTMAX_C(x) __ESCAPE__(x ## ull)
S
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
N         }  /* extern "C" */
N      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
N    #ifndef __STDINT_NO_EXPORTS
N      using ::std::int8_t;
N      using ::std::int16_t;
N      using ::std::int32_t;
N      using ::std::int64_t;
N      using ::std::uint8_t;
N      using ::std::uint16_t;
N      using ::std::uint32_t;
N      using ::std::uint64_t;
N      using ::std::int_least8_t;
N      using ::std::int_least16_t;
N      using ::std::int_least32_t;
N      using ::std::int_least64_t;
N      using ::std::uint_least8_t;
N      using ::std::uint_least16_t;
N      using ::std::uint_least32_t;
N      using ::std::uint_least64_t;
N      using ::std::int_fast8_t;
N      using ::std::int_fast16_t;
N      using ::std::int_fast32_t;
N      using ::std::int_fast64_t;
N      using ::std::uint_fast8_t;
N      using ::std::uint_fast16_t;
N      using ::std::uint_fast32_t;
N      using ::std::uint_fast64_t;
N      using ::std::intptr_t;
N      using ::std::uintptr_t;
N      using ::std::intmax_t;
N      using ::std::uintmax_t;
N    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 29 ".\Inc\Compiler.h" 2
N# include <stdbool.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdbool.h" 1
N/* stdbool.h: ISO/IEC 9899:1999 (C99), section 7.16 */
N
N/* Copyright (C) ARM Ltd., 2002
N * All rights reserved
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: drodgman $
N */
N
N#ifndef __bool_true_false_are_defined
N#define __bool_true_false_are_defined 1
N#define __ARMCLIB_VERSION 5060037
N
N  #ifndef __cplusplus /* In C++, 'bool', 'true' and 'false' and keywords */
S    #define bool _Bool
S    #define true 1
S    #define false 0
N  #else
N    #ifdef __GNUC__
S      /* GNU C++ supports direct inclusion of stdbool.h to provide C99
S         compatibility by defining _Bool */
S      #define _Bool bool
N    #endif
N  #endif
N
N#endif /* __bool_true_false_are_defined */
N
L 30 ".\Inc\Compiler.h" 2
N
N# define BYTE                   uint8_t               ///< Byte-Datentyp (8 Bits).
N# define WORD                   uint32_t              ///< Wort-Datentyp (nach ARM-Konvention 32 Bits, d.h. 4 Bytes).
N# define HWRD                   uint16_t              ///< Halbwort-Datentyp (nach ARM-Konvention 16 Bits, d.h. 2 Bytes).
N# define DWRD                   uint64_t              ///< Doppelwort-Datentyp (nach ARM-Konvention 8 Bytes).
N
N// Nomenklatur <s>INT<nn>:
N// <s> = U bzw. S für unsigned bzw. signed
N// <nn> = 08, 12, 32, 64 für 8 bis 64 Bits
N
N# define UINT64                 uint64_t              ///< 8 byte unsigned int.
N# define SINT64                 int64_t               ///< 8 byte signed int.
N
N# define UINT32                 uint32_t              ///< 4 byte unsigned int.
N# define SINT32                 int32_t               ///< 4 byte signed int.
N
N# define UINT16                 uint16_t              ///< 2 byte unsigned int.
N# define SINT16                 int16_t               ///< 2 byte signed int.
N
N# define UINT08                 uint8_t               ///< Single byte unsigned int.
N# define SINT08                 int8_t                ///< Single byte signed int.
N
N# include <stddef.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stddef.h" 1
N/* stddef.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.1.4 */
N
N/* Copyright (C) ARM Ltd., 1999
N * All rights reserved
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright 1991 ARM Limited. All rights reserved.             */
N/* version 0.05 */
N
N/*
N * The following types and macros are defined in several headers referred to in
N * the descriptions of the functions declared in that header. They are also
N * defined in this header file.
N */
N
N#ifndef __stddef_h
N#define __stddef_h
N#define __ARMCLIB_VERSION 5060037
N
N  #ifndef __STDDEF_DECLS
N  #define __STDDEF_DECLS
N    #undef __CLIBNS
N    #ifdef __cplusplus
N        namespace std {
N        #define __CLIBNS ::std::
N        extern "C" {
N    #else
S      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if __sizeof_ptr == 8
X#if 4 == 8
S  typedef signed long ptrdiff_t;
N#else
N  typedef signed int ptrdiff_t;
N#endif
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 1L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
S   /* the unsigned integral type of the result of the sizeof operator. */
N#endif
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
S  #if !defined(__STRICT_ANSI__)
S  /* unconditional in non-strict C for consistency of debug info */
S    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #else
S      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #endif
S  #elif !defined(__wchar_t)
S    #define __wchar_t 1
S    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #else
S      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #endif
S   /*
S    * An integral type whose range of values can represent distinct codes for
S    * all members of the largest extended character set specified among the
S    * supported locales; the null character shall have the code value zero and
S    * each member of the basic character set shall have a code value when used
S    * as the lone character in an integer character constant.
S    */
S  #endif
N#endif
N
N#undef NULL  /* others (e.g. <stdio.h>) also define */
N#define NULL 0
N   /* null pointer constant. */
N
N#ifdef __clang__
S  #define offsetof(t, d) __builtin_offsetof(t, d)
N#else
N  /* EDG uses __INTADDR__ to avoid errors when strict */
N  #define offsetof(t, memb) ((__CLIBNS size_t)__INTADDR__(&(((t *)0)->memb)))
N#endif
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 201112L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (0L && 201112L <= __STDC_VERSION__) || (1L && 201103L <= 201103L)
N  typedef long double max_align_t;
N#endif
N
N    #ifdef __cplusplus
N         }  /* extern "C" */
N      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDDEF_DECLS */
N
N
N  #ifdef __cplusplus
N    #ifndef __STDDEF_NO_EXPORTS
N      using ::std::size_t;
N      using ::std::ptrdiff_t;
N      #if !defined(__STRICT_ANSI__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X      #if !0L || (1L && 201103L <= 201103L)
N        using ::std::max_align_t;
N      #endif
N    #endif 
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of stddef.h */
N
L 53 ".\Inc\Compiler.h" 2
N
N# if __ARMCC_VERSION >= 6000000
X# if 5060750 >= 6000000
S#  pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
S#  pragma clang diagnostic ignored "-Wnested-anon-types"
S#  pragma clang diagnostic ignored "-Wc++17-compat-mangling"
S#  pragma clang diagnostic ignored "-Wc++98-compat-pedantic"
S#  pragma clang diagnostic ignored "-Wc++98-compat"
S#  pragma clang diagnostic ignored "-Wgcc-compat"
S
S#  define IMPORT(X)             asm(".global " #X);
S
Sstatic __attribute__((always_inline)) inline void ___barrier(void) { asm volatile("" ::: "memory", "cc"); }
S
S#  define SCHEDULE_BARRIER      ___barrier
S#  define FORCE_STORES          ___barrier
S#  define MEMORY_CHANGED        ___barrier
S
S#  define __weak                __attribute__((weak))
S#  define __svc(...)
S#  define __align(x)            __attribute__((aligned(x)))
S
S#  define __clrex               __builtin_arm_clrex
S#  define __dmb                 __builtin_arm_dmb
S#  define __dsb                 __builtin_arm_dsb
S#  define __isb                 __builtin_arm_isb
S#  define __wfi                 __builtin_arm_wfi
S#  define __wfe                 __builtin_arm_wfe
S#  define __rbit                __builtin_arm_rbit
S#  define __rev                 __builtin_bswap32
S#  define __clz                 __builtin_clz
S
S#  define ARM_RSR(NAME)         __builtin_arm_rsr(#NAME)
S#  define ARM_WSR(NAME, VALUE)  __builtin_arm_wsr(#NAME, VALUE)
S
S#  define DEFINE_ARM_RSR(NAME)  inline WORD ARM_RSR_ ## NAME()                 noexcept { return ARM_RSR(NAME); }
S#  define DEFINE_ARM_WSR(NAME)  inline void ARM_WSR_ ## NAME(WORD const value) noexcept { ARM_WSR(NAME, value); }
S
S#  define OFFSET_OF(S, M)       __builtin_offsetof(S, M)
S
S#  define BREAKPOINT(v)         asm volatile("bkpt %0" :: "i"(v))
S
S#  define WRITEONLY             /// not implemented
S#  define READONLY              const
S
S#  define __AT(ADDR)            __attribute__((section(".ARM.__at_" #ADDR)))
S#  define LOCATE_AT(ADDR)       __AT(ADDR)
S
S#  define FORCE_INLINE          __attribute__((always_inline)) inline
S
S#  define FILE                  __FILE__
S#  define FUNC                  __FUNCTION__
S#  define LINE                  __LINE__
N# else
N#  pragma anon_unions
N#  define PRAGMA(X)             _Pragma(#X)
N
N#  define IMPORT(X)             PRAGMA(import(X))
N
N#  define SCHEDULE_BARRIER()    __schedule_barrier() ///< Compiler-spezifische Pseudo-Anweisung, um die compiler-bedingte Umsortierung von Befehlen über diese Grenze hinaus zu unterbinden. 
N#  define FORCE_STORES()        __force_stores()
N#  define MEMORY_CHANGED()      __memory_changed()
N
N#  define DEFINE_ARM_RSR(NAME)  inline WORD ARM_RSR_ ## NAME()                 noexcept { register WORD NAME __asm(#NAME); return NAME; }
N#  define DEFINE_ARM_WSR(NAME)  inline void ARM_WSR_ ## NAME(WORD const value) noexcept { register WORD NAME __asm(#NAME); NAME = value; }
N
N#  define ARM_RSR(NAME)         ARM_RSR_ ## NAME()
N#  define ARM_WSR(NAME, VALUE)  ARM_WSR_ ## NAME(VALUE)
N
N#  define OFFSET_OF(S, M)       offsetof(S, M)
N
N#  define BREAKPOINT(n)         __breakpoint(n)
N
N#  define WRITEONLY             __writeonly
N#  define READONLY              const
N
N#  define LOCATE_AT(ADDR)       __attribute__((at(ADDR)))
N
N#  define FORCE_INLINE          __forceinline
N
N#  define FILE                  __MODULE__            ///< Name der aktuellen Datei.
N
N#  define FUNC                  __PRETTY_FUNCTION__   ///< Name der aktuellen Funktion.
N#  define LINE                  __LINE__              ///< Aktuelle Zeilennummer.
N# endif
N
Nnamespace std { using nullptr_t = decltype(nullptr); }
N
N# if defined(DEBUG) && ! defined(NO_BREAK)
X# if 1L && ! 0L
N#  define DEBUG_BREAK(n)        BREAKPOINT(n)
N# else
S#  define DEBUG_BREAK(n)
N# endif
N
N# define __CONCAT(A, B)         A##B
N# define CONCAT(A, B)           __CONCAT(A, B)
N
Ntemplate<typename TYPE, unsigned DIM> constexpr unsigned ArrayDim(TYPE const (&)[DIM]) noexcept { return DIM; }
Ntemplate<typename TYPE, unsigned DIM> constexpr unsigned ArrayMax(TYPE const (&)[DIM]) noexcept { return DIM - 1U; }
N
Ntemplate<typename TYPE, unsigned H, unsigned W> constexpr unsigned MatrixRows(TYPE const (&)[H][W]) noexcept { return H; }
Ntemplate<typename TYPE, unsigned H, unsigned W> constexpr unsigned MatrixCols(TYPE const (&)[H][W]) noexcept { return W; }
N
N/// Achtung: Die obigen Varianten zur Bestimmung von Feld oder Matrixdimensionen funktionieren nicht, wenn das Feld
N/// nicht-statische Member-Variable in einer Klasse ist, weil der this-Zeiger nicht constexpr ist.
N
Ninline void * operator new   (unsigned, void * const p) noexcept { return p; }
Ninline void   operator delete(void *, void *) noexcept { }
N
N#endif
N
L 10 "Src\Cortex\Cortex.cpp" 2
N#include <Cortex.h>
L 1 ".\Inc\Cortex\Cortex.h" 1
N//
N// Cortex.H
N//
N
N/// \file Cortex.h
N/// %Cortex-spezifische Funktionen.
N
N#ifndef guard_CORTEX_H
N# define guard_CORTEX_H
N
N# include <Compiler.h>
L 1 ".\Inc\Compiler.h" 1
N//
N// Compiler.h
N//
N
N/// \file Compiler.h
N/// Compiler-spezifische Definitions, Macros und Funktionen.
N/// Um die Quellen auch zu Testzwecken auch mit anderen Compilern (z.B. MSC) übersetzen zu können, müssten in dieser Datei
N/// mittels bedingter Kompilierung verschiedene Makros für die unterschiedlichen Compiler definiert werden.
N
N#if ! defined(guard_COMPILER_H) && defined(__arm__)
X#if ! 1L && 1L
S# define guard_COMPILER_H
S
S# if ! defined(__cplusplus)
S#  error C++ only!
S# endif
S
S# if   defined(_DEBUG)  && ! defined(DEBUG)
S#  define DEBUG
S# endif
S
S# if   defined(RELEASE) &&   defined(DEBUG)
S#  error You cannot define RELEASE and DEBUG at the same time
S# endif
S# if ! defined(RELEASE) && ! defined(DEBUG)
S#  error You must define ether RELEASE or DEBUG
S# endif
S
S# include <stdint.h>
S# include <stdbool.h>
S
S# define BYTE                   uint8_t               ///< Byte-Datentyp (8 Bits).
S# define WORD                   uint32_t              ///< Wort-Datentyp (nach ARM-Konvention 32 Bits, d.h. 4 Bytes).
S# define HWRD                   uint16_t              ///< Halbwort-Datentyp (nach ARM-Konvention 16 Bits, d.h. 2 Bytes).
S# define DWRD                   uint64_t              ///< Doppelwort-Datentyp (nach ARM-Konvention 8 Bytes).
S
S// Nomenklatur <s>INT<nn>:
S// <s> = U bzw. S für unsigned bzw. signed
S// <nn> = 08, 12, 32, 64 für 8 bis 64 Bits
S
S# define UINT64                 uint64_t              ///< 8 byte unsigned int.
S# define SINT64                 int64_t               ///< 8 byte signed int.
S
S# define UINT32                 uint32_t              ///< 4 byte unsigned int.
S# define SINT32                 int32_t               ///< 4 byte signed int.
S
S# define UINT16                 uint16_t              ///< 2 byte unsigned int.
S# define SINT16                 int16_t               ///< 2 byte signed int.
S
S# define UINT08                 uint8_t               ///< Single byte unsigned int.
S# define SINT08                 int8_t                ///< Single byte signed int.
S
S# include <stddef.h>
S
S# if __ARMCC_VERSION >= 6000000
S#  pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
S#  pragma clang diagnostic ignored "-Wnested-anon-types"
S#  pragma clang diagnostic ignored "-Wc++17-compat-mangling"
S#  pragma clang diagnostic ignored "-Wc++98-compat-pedantic"
S#  pragma clang diagnostic ignored "-Wc++98-compat"
S#  pragma clang diagnostic ignored "-Wgcc-compat"
S
S#  define IMPORT(X)             asm(".global " #X);
S
Sstatic __attribute__((always_inline)) inline void ___barrier(void) { asm volatile("" ::: "memory", "cc"); }
S
S#  define SCHEDULE_BARRIER      ___barrier
S#  define FORCE_STORES          ___barrier
S#  define MEMORY_CHANGED        ___barrier
S
S#  define __weak                __attribute__((weak))
S#  define __svc(...)
S#  define __align(x)            __attribute__((aligned(x)))
S
S#  define __clrex               __builtin_arm_clrex
S#  define __dmb                 __builtin_arm_dmb
S#  define __dsb                 __builtin_arm_dsb
S#  define __isb                 __builtin_arm_isb
S#  define __wfi                 __builtin_arm_wfi
S#  define __wfe                 __builtin_arm_wfe
S#  define __rbit                __builtin_arm_rbit
S#  define __rev                 __builtin_bswap32
S#  define __clz                 __builtin_clz
S
S#  define ARM_RSR(NAME)         __builtin_arm_rsr(#NAME)
S#  define ARM_WSR(NAME, VALUE)  __builtin_arm_wsr(#NAME, VALUE)
S
S#  define DEFINE_ARM_RSR(NAME)  inline WORD ARM_RSR_ ## NAME()                 noexcept { return ARM_RSR(NAME); }
S#  define DEFINE_ARM_WSR(NAME)  inline void ARM_WSR_ ## NAME(WORD const value) noexcept { ARM_WSR(NAME, value); }
S
S#  define OFFSET_OF(S, M)       __builtin_offsetof(S, M)
S
S#  define BREAKPOINT(v)         asm volatile("bkpt %0" :: "i"(v))
S
S#  define WRITEONLY             /// not implemented
S#  define READONLY              const
S
S#  define __AT(ADDR)            __attribute__((section(".ARM.__at_" #ADDR)))
S#  define LOCATE_AT(ADDR)       __AT(ADDR)
S
S#  define FORCE_INLINE          __attribute__((always_inline)) inline
S
S#  define FILE                  __FILE__
S#  define FUNC                  __FUNCTION__
S#  define LINE                  __LINE__
S# else
S#  pragma anon_unions
S#  define PRAGMA(X)             _Pragma(#X)
S
S#  define IMPORT(X)             PRAGMA(import(X))
S
S#  define SCHEDULE_BARRIER()    __schedule_barrier() ///< Compiler-spezifische Pseudo-Anweisung, um die compiler-bedingte Umsortierung von Befehlen über diese Grenze hinaus zu unterbinden. 
S#  define FORCE_STORES()        __force_stores()
S#  define MEMORY_CHANGED()      __memory_changed()
S
S#  define DEFINE_ARM_RSR(NAME)  inline WORD ARM_RSR_ ## NAME()                 noexcept { register WORD NAME __asm(#NAME); return NAME; }
S#  define DEFINE_ARM_WSR(NAME)  inline void ARM_WSR_ ## NAME(WORD const value) noexcept { register WORD NAME __asm(#NAME); NAME = value; }
S
S#  define ARM_RSR(NAME)         ARM_RSR_ ## NAME()
S#  define ARM_WSR(NAME, VALUE)  ARM_WSR_ ## NAME(VALUE)
S
S#  define OFFSET_OF(S, M)       offsetof(S, M)
S
S#  define BREAKPOINT(n)         __breakpoint(n)
S
S#  define WRITEONLY             __writeonly
S#  define READONLY              const
S
S#  define LOCATE_AT(ADDR)       __attribute__((at(ADDR)))
S
S#  define FORCE_INLINE          __forceinline
S
S#  define FILE                  __MODULE__            ///< Name der aktuellen Datei.
S
S#  define FUNC                  __PRETTY_FUNCTION__   ///< Name der aktuellen Funktion.
S#  define LINE                  __LINE__              ///< Aktuelle Zeilennummer.
S# endif
S
Snamespace std { using nullptr_t = decltype(nullptr); }
S
S# if defined(DEBUG) && ! defined(NO_BREAK)
S#  define DEBUG_BREAK(n)        BREAKPOINT(n)
S# else
S#  define DEBUG_BREAK(n)
S# endif
S
S# define __CONCAT(A, B)         A##B
S# define CONCAT(A, B)           __CONCAT(A, B)
S
Stemplate<typename TYPE, unsigned DIM> constexpr unsigned ArrayDim(TYPE const (&)[DIM]) noexcept { return DIM; }
Stemplate<typename TYPE, unsigned DIM> constexpr unsigned ArrayMax(TYPE const (&)[DIM]) noexcept { return DIM - 1U; }
S
Stemplate<typename TYPE, unsigned H, unsigned W> constexpr unsigned MatrixRows(TYPE const (&)[H][W]) noexcept { return H; }
Stemplate<typename TYPE, unsigned H, unsigned W> constexpr unsigned MatrixCols(TYPE const (&)[H][W]) noexcept { return W; }
S
S/// Achtung: Die obigen Varianten zur Bestimmung von Feld oder Matrixdimensionen funktionieren nicht, wenn das Feld
S/// nicht-statische Member-Variable in einer Klasse ist, weil der this-Zeiger nicht constexpr ist.
S
Sinline void * operator new   (unsigned, void * const p) noexcept { return p; }
Sinline void   operator delete(void *, void *) noexcept { }
S
N#endif
N
L 12 ".\Inc\Cortex\Cortex.h" 2
N
Nextern "C" WORD _LdrExW(void const volatile * p            );
Xextern "C" uint32_t _LdrExW(void const volatile * p            );
Nextern "C" HWRD _LdrExH(void const volatile * p            );
Xextern "C" uint16_t _LdrExH(void const volatile * p            );
Nextern "C" BYTE _LdrExB(void const volatile * p            );
Xextern "C" uint8_t _LdrExB(void const volatile * p            );
N  
Nextern "C" WORD _StrExW(void       volatile * p, WORD value);
Xextern "C" uint32_t _StrExW(void       volatile * p, uint32_t value);
Nextern "C" WORD _StrExH(void       volatile * p, HWRD value); 
Xextern "C" uint32_t _StrExH(void       volatile * p, uint16_t value); 
Nextern "C" WORD _StrExB(void       volatile * p, BYTE value);
Xextern "C" uint32_t _StrExB(void       volatile * p, uint8_t value);
N
N# if   CORTEX_M == 4
X# if   4 == 4
N#  define IRAM2_START             0x10000000U // CCM
N#  define IRAM2_LENGTH            0x00010000U
N#  define IRAM1_START             0x20000000U
N#  define IRAM1_LENGTH            0x00020000U
N#  define IROM1_START             0x08000000U
N#  define IROM1_LENGTH            0x00100000U
N# elif CORTEX_M == 7
S#  define IRAM2_START             0x20000000U // TCM
S#  define IRAM2_LENGTH            0x00010000U
S#  define IRAM1_START             (IRAM2_START + IRAM2_LENGTH)
S#  define IRAM1_LENGTH            0x00040000U
S#  define IROM1_START             0x08000000U
S#  define IROM1_LENGTH            0x00100000U
S# else
S#  error Missing CORTEX_M definition (must be 4 or 7)
N# endif
N
NDEFINE_ARM_RSR(control)
Xinline uint32_t ARM_RSR_control() noexcept { register uint32_t control __asm("control"); return control; }
NDEFINE_ARM_WSR(control)
Xinline void ARM_WSR_control(uint32_t const value) noexcept { register uint32_t control __asm("control"); control = value; }
NDEFINE_ARM_RSR(basepri)
Xinline uint32_t ARM_RSR_basepri() noexcept { register uint32_t basepri __asm("basepri"); return basepri; }
NDEFINE_ARM_WSR(basepri)
Xinline void ARM_WSR_basepri(uint32_t const value) noexcept { register uint32_t basepri __asm("basepri"); basepri = value; }
NDEFINE_ARM_RSR(primask)
Xinline uint32_t ARM_RSR_primask() noexcept { register uint32_t primask __asm("primask"); return primask; }
NDEFINE_ARM_WSR(primask)
Xinline void ARM_WSR_primask(uint32_t const value) noexcept { register uint32_t primask __asm("primask"); primask = value; }
NDEFINE_ARM_RSR(faultmask)
Xinline uint32_t ARM_RSR_faultmask() noexcept { register uint32_t faultmask __asm("faultmask"); return faultmask; }
NDEFINE_ARM_WSR(faultmask)
Xinline void ARM_WSR_faultmask(uint32_t const value) noexcept { register uint32_t faultmask __asm("faultmask"); faultmask = value; }
N
NDEFINE_ARM_RSR(psp)
Xinline uint32_t ARM_RSR_psp() noexcept { register uint32_t psp __asm("psp"); return psp; }
NDEFINE_ARM_WSR(psp)
Xinline void ARM_WSR_psp(uint32_t const value) noexcept { register uint32_t psp __asm("psp"); psp = value; }
NDEFINE_ARM_RSR(msp)
Xinline uint32_t ARM_RSR_msp() noexcept { register uint32_t msp __asm("msp"); return msp; }
NDEFINE_ARM_WSR(msp)
Xinline void ARM_WSR_msp(uint32_t const value) noexcept { register uint32_t msp __asm("msp"); msp = value; }
N
NDEFINE_ARM_RSR(epsr)
Xinline uint32_t ARM_RSR_epsr() noexcept { register uint32_t epsr __asm("epsr"); return epsr; }
NDEFINE_ARM_RSR(apsr)
Xinline uint32_t ARM_RSR_apsr() noexcept { register uint32_t apsr __asm("apsr"); return apsr; }
NDEFINE_ARM_RSR(ipsr)
Xinline uint32_t ARM_RSR_ipsr() noexcept { register uint32_t ipsr __asm("ipsr"); return ipsr; }
N
N/// Spezifische Funktionen des %Cortex(-M3/M4/M7) bzw. des zugehörigen aktuellen Befehlssatzes (ARMv7-M).
Nnamespace Cortex 
N{
N  template<unsigned SIZE> struct ArmExclusive;
N
N  template<> struct ArmExclusive<sizeof(WORD)> final
X  template<> struct ArmExclusive<sizeof(uint32_t)> final
N  { 
N    ArmExclusive() = delete;
N    ArmExclusive(ArmExclusive const &) = delete;
N    ArmExclusive(ArmExclusive      &&) = delete;
N    
N    static WORD LdrEx(WORD const volatile & data)                   noexcept { return _LdrExW(&data); }
X    static uint32_t LdrEx(uint32_t const volatile & data)                   noexcept { return _LdrExW(&data); }
N    static bool StrEx(WORD       volatile & data, WORD const value) noexcept { return _StrExW(&data, value) != 0U; }
X    static bool StrEx(uint32_t       volatile & data, uint32_t const value) noexcept { return _StrExW(&data, value) != 0U; }
N
N    template<typename TYPE>
N    static TYPE * LdrEx(TYPE * const volatile & p)                  noexcept { return (TYPE *)_LdrExW(&p); }
N
N    template<typename TYPE>
N    static bool   StrEx(TYPE *       volatile & p, TYPE * const q)  noexcept { return _StrExW(&p, (WORD)q) != 0U; }
X    static bool   StrEx(TYPE *       volatile & p, TYPE * const q)  noexcept { return _StrExW(&p, (uint32_t)q) != 0U; }
N  };
N
N  template<> struct ArmExclusive<sizeof(HWRD)> final
X  template<> struct ArmExclusive<sizeof(uint16_t)> final
N  { 
N    ArmExclusive() = delete;
N    ArmExclusive(ArmExclusive const &) = delete;
N    ArmExclusive(ArmExclusive      &&) = delete;
N    
N    static HWRD LdrEx(HWRD const volatile & data)                   noexcept { return _LdrExH(&data); }
X    static uint16_t LdrEx(uint16_t const volatile & data)                   noexcept { return _LdrExH(&data); }
N    static bool StrEx(HWRD       volatile & data, HWRD const value) noexcept { return _StrExH(&data, value) != 0U; }
X    static bool StrEx(uint16_t       volatile & data, uint16_t const value) noexcept { return _StrExH(&data, value) != 0U; }
N  };
N
N  template<> struct ArmExclusive<sizeof(BYTE)> final
X  template<> struct ArmExclusive<sizeof(uint8_t)> final
N  { 
N    ArmExclusive() = delete;
N    ArmExclusive(ArmExclusive const &) = delete;
N    ArmExclusive(ArmExclusive      &&) = delete;
N    
N    static BYTE LdrEx(BYTE const volatile & data)                   noexcept { return _LdrExB(&data); }
X    static uint8_t LdrEx(uint8_t const volatile & data)                   noexcept { return _LdrExB(&data); }
N    static bool StrEx(BYTE       volatile & data, BYTE const value) noexcept { return _StrExB(&data, value) != 0U; }
X    static bool StrEx(uint8_t       volatile & data, uint8_t const value) noexcept { return _StrExB(&data, value) != 0U; }
N  };
N
N  // This are the (core) numbers of the current exception, see Cortex-M3/M4/M7 PSR
N
N  constexpr unsigned const isrNum_THREAD_MODE =  0U; ///< ISR-Nummer in PSR für Thread-Modus
N  constexpr unsigned const isrNum_RESET       =  1U;
N  constexpr unsigned const isrNum_NMI         =  2U;
N  constexpr unsigned const isrNum_HRD_FAULT   =  3U; ///< ISR-Nummer in PSR für Hard-Fault
N  constexpr unsigned const isrNum_MEM_FAULT   =  4U; ///< ISR-Nummer in PSR für Memory-Fault
N  constexpr unsigned const isrNum_BUS_FAULT   =  5U; ///< ISR-Nummer in PSR für Bus-Fault
N  constexpr unsigned const isrNum_USG_FAULT   =  6U; ///< ISR-Nummer in PSR für Usage-Fault
N  constexpr unsigned const isrNum_SVC         = 11U; ///< ISR-Nummer in PSR für SVC
N  constexpr unsigned const isrNum_DEBMON      = 12U; 
N  constexpr unsigned const isrNum_PSV         = 14U; ///< ISR-Nummer in PSR für PSV
N  constexpr unsigned const isrNum_STK         = 15U; ///< ISR-Nummer in PSR für STK (System tick)
N  constexpr unsigned const isrNum_EXTERN0     = 16U; // ab 16 beginnen die externen ISRs
N
N  FORCE_INLINE constexpr unsigned isrNum_EXTERN(unsigned const n) noexcept { return n + isrNum_EXTERN0; }
X  __forceinline constexpr unsigned isrNum_EXTERN(unsigned const n) noexcept { return n + isrNum_EXTERN0; }
N
N  constexpr WORD const excReturnNonFp = 0xFFFFFFFDU; ///< Exception return code (thumb mode, return to thread mode, use PSP after return, non-FP state).
X  constexpr uint32_t const excReturnNonFp = 0xFFFFFFFDU; 
N  constexpr WORD const excReturnUseFp = 0xFFFFFFEDU; ///< Exception return code (thumb mode, return to thread mode, use PSP after return, use FP state).
X  constexpr uint32_t const excReturnUseFp = 0xFFFFFFEDU; 
N
N  [[noreturn]] void Reset() noexcept;
N
N  [[noreturn]] void Reset_privileged() noexcept;
N
N  FORCE_INLINE void DMB() noexcept { SCHEDULE_BARRIER(); __dmb(0xF); SCHEDULE_BARRIER(); }  
X  __forceinline void DMB() noexcept { __schedule_barrier(); __dmb(0xF); __schedule_barrier(); }  
N  FORCE_INLINE void DSB() noexcept { SCHEDULE_BARRIER(); __dsb(0xF); SCHEDULE_BARRIER(); }
X  __forceinline void DSB() noexcept { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); }
N  FORCE_INLINE void ISB() noexcept { SCHEDULE_BARRIER(); __isb(0xF); SCHEDULE_BARRIER(); }
X  __forceinline void ISB() noexcept { __schedule_barrier(); __isb(0xF); __schedule_barrier(); }
N
N  FORCE_INLINE WORD RBIT(WORD w) noexcept { return __rbit(w); }
X  __forceinline uint32_t RBIT(uint32_t w) noexcept { return __rbit(w); }
N  
N  FORCE_INLINE WORD REV(WORD w) noexcept { return __rev(w); }
X  __forceinline uint32_t REV(uint32_t w) noexcept { return __rev(w); }
N  
N  FORCE_INLINE void WFI() noexcept { __wfi(); }
X  __forceinline void WFI() noexcept { __wfi(); }
N  FORCE_INLINE void WFE() noexcept { __wfe(); }
X  __forceinline void WFE() noexcept { __wfe(); }
N
N  /// Anzahl der (linksseitig) führenden 0-Bits (beginnend bei Bit 31) bestimmen.
N  /// \param value ist der zu analysierende Wert.
N  /// \return Anzahl der 'linksbündigen' 0-en (0 bis 32)
N  FORCE_INLINE int CLZ(WORD const value) { return __clz( value); }
X  __forceinline int CLZ(uint32_t const value) { return __clz( value); }
N
N  /// Anzahl der (linksseitig) führenden 1-Bits (beginnend bei Bit 31) bestimmen.
N  /// \param value ist der zu analysierende Wert.
N  /// \return Anzahl der 'linksbündigen' 1-en (0 bis 32)
N  FORCE_INLINE int CLO(WORD const value) { return __clz(~value); }
X  __forceinline int CLO(uint32_t const value) { return __clz(~value); }
N
N  BYTE GetPSVPrio() noexcept;
X  uint8_t GetPSVPrio() noexcept;
N  BYTE GetSVCPrio() noexcept;
X  uint8_t GetSVCPrio() noexcept;
N  BYTE GetSTKPrio() noexcept;
X  uint8_t GetSTKPrio() noexcept;
N  BYTE GetMinPrio() noexcept;
X  uint8_t GetMinPrio() noexcept;
N  
N  constexpr unsigned const CONTROL_usermode = 1U;
N  constexpr unsigned const CONTROL_altstack = 2U;
N  constexpr unsigned const CONTROL_fpucntxt = 4U;
N
N  /// CONTROL-Register auslesen.
N  /// \return Wert des CONTROL-Registers
N  FORCE_INLINE WORD GetCONTROL() noexcept { return ARM_RSR(control); }
X  __forceinline uint32_t GetCONTROL() noexcept { return ARM_RSR_control(); }
N
N  /// CONTROL-Register einstellen.
N  /// \param[in] value ist der neue Wert des CONTROL-Registers
N  /// \note Der Prozessor muss sich im privilegierten Modus befinden. Es findet keine Prüfung statt, ob diese Voraussetzung zutrifft.
N  FORCE_INLINE void SetCONTROL_privileged(WORD const value) noexcept { ARM_WSR(control, value); }
X  __forceinline void SetCONTROL_privileged(uint32_t const value) noexcept { ARM_WSR_control(value); }
N
N  void SetCONTROL(WORD value) noexcept;
X  void SetCONTROL(uint32_t value) noexcept;
N
N  /// BASEPRI-Register auslesen.
N  /// \return Wert des BASEPRI-Registers
N  /// \note Der Prozessor muss sich im privilegierten Modus befinden. Es findet keine Prüfung statt, ob diese Voraussetzung zutrifft.
N  FORCE_INLINE WORD GetBASEPRI_privileged() noexcept { return ARM_RSR(basepri); }
X  __forceinline uint32_t GetBASEPRI_privileged() noexcept { return ARM_RSR_basepri(); }
N
N  /// BASEPRI-Register einstellen.
N  /// \param[in] basePri ist der neue Wert des BASEPRI-Registers
N  /// \note Der Prozessor muss sich im privilegierten Modus befinden. Es findet keine Prüfung statt, ob diese Voraussetzung zutrifft.
N  /// BASEPRI-Register auslesen.
N  /// \return Wert des BASEPRI-Registers.
N  WORD GetBASEPRI() noexcept;
X  uint32_t GetBASEPRI() noexcept;
N
N  FORCE_INLINE void SetBASEPRI_privileged(WORD const value) noexcept { ARM_WSR(basepri, value); }
X  __forceinline void SetBASEPRI_privileged(uint32_t const value) noexcept { ARM_WSR_basepri(value); }
N
N  /// BASEPRI-Register einstellen.
N  /// \param[in] value ist der neue Wert des BASEPRI-Registers
N  void SetBASEPRI(WORD value) noexcept;
X  void SetBASEPRI(uint32_t value) noexcept;
N
N  /// PRIMASK-Register auslesen im privilegierten Modus.
N  /// \copydetails Cortex::GetPRIMASK()
N  /// \return Wert des PRIMASK-Registers.
N  /// \warning Der Prozessor muss sich im privilegierten Modus befinden, damit diese Funktion ausgeführt werden kann.
N  /// Befindet sich der Prozessor nicht im privilegierten Modus, wird ein Usage-Fault ausgelöst.
N  WORD GetPRIMASK_privileged() noexcept;
X  uint32_t GetPRIMASK_privileged() noexcept;
N
N  /// PRIMASK-Register auslesen.
N  /// Das PRIMASK-Register besteht aus einem Bit. Ist es gesetzt, so werden \b alle IRQs (Exceptions) mit einstellbarer 
N  /// Priorität gesperrt. Achtung, dies betrifft auch den SVC-IRQ.
N  /// Wenn dieses Bit gesetzt ist, können folglich auch keine SVC-IRQs mehr bedient werden. Ein SVC-Aufruf ist dann verboten.
N  /// Es muss deshalb sichergestellt werden, dass immer dann, wenn das PRIMASK-Register gesetzt wird auch gleichzeitig
N  /// das System in den Exception-Modus versetzt wird, weil sonst keine privilegierten Befehle mehr ausgeführt werden können.
N  /// Ist das PRIMASK-Register gelöscht, so können auch nicht-privilegierte Befehle indirekt via SVC-Aufruf implementiert werden.
N  /// Hierzu löst man einen SVC aus, der dann in dem zugehörigen Handler (immer im Exception-Modus) die entsprechenden 
N  /// Operationen ausführt. 
N  /// \return Wert des PRIMASK-Registers.
N  WORD GetPRIMASK() noexcept;
X  uint32_t GetPRIMASK() noexcept;
N
N  /// PRIMASK aktivieren (alle Interrupts bis auf NMI und Hard-fault sperren).
N  /// \note Der Prozessor muss sich im privilegierten Modus befinden. Es findet keine Prüfung statt, ob diese Voraussetzung zutrifft.
N  /// \note Der Prozessor wird zusätzlich auch außerhalb einer IRQ in den privilegierten Modus versetzt, damit man ein Möglichkeit hat, die
N  /// Exception wieder zu erlauben, da man auf das PRIMASK-Register nur im privilegierten Modus zugreifen kann.
N  /// \warning
N  /// Ist das PRIMASK-Register gesetzt und befindet sich der Controller gleichzeitig im User-Modus, 
N  /// so gibt es somit keine generelle Möglichkeit mehr, privilegierte Operationen auszuführen, weil dann auch der
N  /// SVC-IRQ nicht mehr verwendbar ist. Da das Ändern der PRIMASK-Register eine privilegierte Anweisung darstellt, könnte man
N  /// dann das PRIMASK-Register nie mehr ändern.
N  /// \warning Diese Funktion sperrt auch die Ausführung aller Exceptions mit programmierbarer Priorität, also \b auch den SVC
N  /// und ebenfalls Usage-/Bus- und Memory-Faults!
N  void SetPRIMASK_privileged() noexcept;
N
N  /// PRIMASK löschen.
N  /// \note Der Prozessor muss sich im privilegierten Modus befinden. Es findet keine Prüfung statt, ob diese Voraussetzung zutrifft.
N  /// \warning Es gibt keine User-Mode-Variante dieser Funktion. 
N  void ClrPRIMASK_privileged() noexcept;
N
N  /// PRIMASK setzen.
N  void SetPRIMASK() noexcept;
N
N  FORCE_INLINE WORD GetIPSR() noexcept { return ARM_RSR(ipsr); }
X  __forceinline uint32_t GetIPSR() noexcept { return ARM_RSR_ipsr(); }
N  FORCE_INLINE WORD GetAPSR() noexcept { return ARM_RSR(apsr); }
X  __forceinline uint32_t GetAPSR() noexcept { return ARM_RSR_apsr(); }
N  FORCE_INLINE WORD GetEPSR() noexcept { return ARM_RSR(epsr); }
X  __forceinline uint32_t GetEPSR() noexcept { return ARM_RSR_epsr(); }
N
N  /// FAULTMASK auslesen.
N  /// \return Wert des FAULTMASK-Registers
N  /// \note Der Prozessor muss sich im privilegierten Modus befinden. Es findet keine Prüfung statt, ob diese Voraussetzung zutrifft.
N  FORCE_INLINE WORD GetFLTMASK_privileged() noexcept { return ARM_RSR(faultmask); }
X  __forceinline uint32_t GetFLTMASK_privileged() noexcept { return ARM_RSR_faultmask(); }
N
N  /// FAULTMASK einstellen.
N  /// \param[in] value ist der neue Wert des FAULTMASK-Registers
N  /// \note Der Prozessor muss sich im privilegierten Modus befinden. Es findet keine Prüfung statt, ob diese Voraussetzung zutrifft.
N  FORCE_INLINE void SetFLTMASK_privileged(WORD const value) { ARM_WSR(faultmask, value); }
X  __forceinline void SetFLTMASK_privileged(uint32_t const value) { ARM_WSR_faultmask(value); }
N
N  void FpuEnable() noexcept;
N
N  void FpuDisable() noexcept;
N
N  /// Load-linked-Befehl.
N  /// Diese Funktion lädt ein Datum (1, 2 oder 4 Bytes breit) und markiert die Ownership des Datums. 
N  /// \param data ist eine Referenz auf das zu lesende Datum
N  /// \return Es wird der gelesene Wert zurückgegeben
N  /// \tparam TYPE ist der Typ des zu lesenden Datums
N  /// \warning Ein weiterer Aufruf dieser Funktion mit einem anderen Argument, löscht die Ownership des vorangegangenen 
N  /// Aufrufs; ein verschachtelter Aufruf ist nicht erlaubt.
N  /// \sa Cortex::SaveConditional()
N  template<typename TYPE>
N  FORCE_INLINE TYPE LoadLinked(TYPE const volatile & data) noexcept { DMB(); return ArmExclusive<sizeof(TYPE)>::LdrEx(data); }
X  __forceinline TYPE LoadLinked(TYPE const volatile & data) noexcept { DMB(); return ArmExclusive<sizeof(TYPE)>::LdrEx(data); }
N  
N  /// Store-conditional-Befehl.  
N  /// Diese Funktion überschreibt ein Datum (1, 2 oder 4 Bytes breit) dessen Ownership zuvor belegt wurde.
N  /// Die Speicherung scheitert, wenn die Ownership nicht belegt ist. 
N  /// \param data ist eine Referenz auf das zu Datum, das überschrieben werden soll.
N  /// \param value ist der Wert, mit dem das Datum überschrieben wird.
N  /// \return \c false bei Erfolg; \c true, wenn der Vorgang wiederholt werden muss. 
N  /// \tparam TYPE ist der Typ des zu speichernden Datums
N  /// \sa Cortex::LoadLinked()
N  template<typename TYPE>
N  FORCE_INLINE bool SaveConditional(TYPE volatile & data, TYPE const value) noexcept
X  __forceinline bool SaveConditional(TYPE volatile & data, TYPE const value) noexcept
N  {
N    if ( ArmExclusive<sizeof(TYPE)>::StrEx(data, value) )
N      return true;
N
N    DSB();
N      
N    return false;
N  }
N  
N  /// Ownership entfernen.
N  /// \sa Cortex::SaveConditional()
N  /// \sa Cortex::LoadLinked()
N  FORCE_INLINE void ClearOwnership() noexcept { __clrex(); ISB(); }
X  __forceinline void ClearOwnership() noexcept { __clrex(); ISB(); }
N
N  /// Nummer der aktuellen Exception zurückgeben.
N  /// Die Nummer der aktuellen Exception (bzw. der aktiven Interrupt-Service-Routine) wird vom Cortex-M3 im (I)PSR zur Verfügung
N  /// gestellt. Diese Nummer ist 0-relativ (0 = thread mode, d.h. keine Exception). Werte größer als 15 geben externe
N  /// Exceptions an.
N  /// \return Nummer der aktiven Exception.
N  FORCE_INLINE WORD GetCurrentIsrNum() noexcept { return GetIPSR(); }
X  __forceinline uint32_t GetCurrentIsrNum() noexcept { return GetIPSR(); }
N
N  /// Abfrage, ob sich der Prozessor im Thread-Modus befindet.
N  /// \return \c true, wenn sich der Prozessor im Thread-Mode befindet und somit zurzeit keine IRQ bedient wird.
N  /// \note Die Bestimmung, ob sich der Prozessor im Thread-Modus befindet, erfolgt anhand der aktuellen ISR-Nummer.
N  FORCE_INLINE bool IsThreadMode() noexcept { return GetCurrentIsrNum() == isrNum_THREAD_MODE; }
X  __forceinline bool IsThreadMode() noexcept { return GetCurrentIsrNum() == isrNum_THREAD_MODE; }
N
N  /// Abfrage, ob sich der Prozessor im aktuellen Kontext privilegierte Befehle ausführen kann.
N  /// \return \c true, wenn privilegierte Befehle ausführbar sind.
N  /// \note Exception mode ist immer privilegiert, unabhängig von CONTROL[0]!
N  FORCE_INLINE bool IsPrivileged() noexcept { return (GetCONTROL() & CONTROL_usermode) == 0U || ! IsThreadMode(); }
X  __forceinline bool IsPrivileged() noexcept { return (GetCONTROL() & CONTROL_usermode) == 0U || ! IsThreadMode(); }
N  
N  bool IsInterruptable(BYTE prio) noexcept;
X  bool IsInterruptable(uint8_t prio) noexcept;
N
N  inline bool IsInterruptableByPSV() noexcept { return IsInterruptable(GetPSVPrio()); }
N  inline bool IsInterruptableBySVC() noexcept { return IsInterruptable(GetSVCPrio()); }
N  inline bool IsInterruptableBySTK() noexcept { return IsInterruptable(GetSTKPrio()); }
N
N  /// Anzahl der System-Ticks zurückgeben.
N  /// Da der Cortex-Core einen System-Timer beinhaltet (Modul STK), kann man diesen dazu verwenden, um eine Systemzeit 
N  /// zu implementieren.
N  /// \return Anzahl der System-Ticks (Zyklusdauer normalerweise 1 ms) seit Systemstart.
N  WORD GetTicks() noexcept;
X  uint32_t GetTicks() noexcept;
N
N  /// Anzahl der System-Ticks als 64-Bit-Zahl zurückgeben, um Probleme bei tagelanger Betriebsdauer zu vermeiden.
N  /// \return Anzahl der System-Ticks (Zyklusdauer normalerweise 1 ms) seit Systemstart.
N  UINT64 GetWideTicks() noexcept;
X  uint64_t GetWideTicks() noexcept;
N
N  /// Systemzeit (Anzal der System-Ticks) mit erhöhter Auflösung bzw. Genauigkeit zurückgeben.
N  UINT64 GetFineTime(UINT32 const scf) noexcept;
X  uint64_t GetFineTime(uint32_t const scf) noexcept;
N
N  /// Alternativen Stack einrichten.
N  /// \param[in] stack ist die \b Endadresse des Stack-Speicherbereiches. \b Achtung: Must be 8-byte-aligned!
N  /// \param[in] num gibt die Anzahl der Wörter des Stacks an.
N  /// \warning Der Prozessor muss sich im privilegierten Modus befinden. Es findet keine Prüfung statt, ob diese Voraussetzung zutrifft.
N  /// Wird die Voraussetzung verletzt, wird ein Usage-Fault ausgelöst.
N  void SwitchStack(WORD * stack, unsigned num) noexcept;
X  void SwitchStack(uint32_t * stack, unsigned num) noexcept;
N
N  template<unsigned DIM>
N  FORCE_INLINE void SwitchStack(WORD (& stack)[DIM]) noexcept { return SwitchStack(stack, DIM); } 
X  __forceinline void SwitchStack(uint32_t (& stack)[DIM]) noexcept { return SwitchStack(stack, DIM); } 
N
N  bool AltStackIsOk() noexcept;
N}
N
N#endif
L 11 "Src\Cortex\Cortex.cpp" 2
N
N#include <RB.h>
L 1 ".\Inc\Drivers\RB.h" 1
N//
N// RB.h
N//
N
N/// \file RB.h
N/// Macros zur Definition der Register-Bits für STM32Fxxx.
N
N#ifndef guard_RB_H
N# define guard_RB_H
N
N# include <Compiler.h>
L 1 ".\Inc\Compiler.h" 1
N//
N// Compiler.h
N//
N
N/// \file Compiler.h
N/// Compiler-spezifische Definitions, Macros und Funktionen.
N/// Um die Quellen auch zu Testzwecken auch mit anderen Compilern (z.B. MSC) übersetzen zu können, müssten in dieser Datei
N/// mittels bedingter Kompilierung verschiedene Makros für die unterschiedlichen Compiler definiert werden.
N
N#if ! defined(guard_COMPILER_H) && defined(__arm__)
X#if ! 1L && 1L
S# define guard_COMPILER_H
S
S# if ! defined(__cplusplus)
S#  error C++ only!
S# endif
S
S# if   defined(_DEBUG)  && ! defined(DEBUG)
S#  define DEBUG
S# endif
S
S# if   defined(RELEASE) &&   defined(DEBUG)
S#  error You cannot define RELEASE and DEBUG at the same time
S# endif
S# if ! defined(RELEASE) && ! defined(DEBUG)
S#  error You must define ether RELEASE or DEBUG
S# endif
S
S# include <stdint.h>
S# include <stdbool.h>
S
S# define BYTE                   uint8_t               ///< Byte-Datentyp (8 Bits).
S# define WORD                   uint32_t              ///< Wort-Datentyp (nach ARM-Konvention 32 Bits, d.h. 4 Bytes).
S# define HWRD                   uint16_t              ///< Halbwort-Datentyp (nach ARM-Konvention 16 Bits, d.h. 2 Bytes).
S# define DWRD                   uint64_t              ///< Doppelwort-Datentyp (nach ARM-Konvention 8 Bytes).
S
S// Nomenklatur <s>INT<nn>:
S// <s> = U bzw. S für unsigned bzw. signed
S// <nn> = 08, 12, 32, 64 für 8 bis 64 Bits
S
S# define UINT64                 uint64_t              ///< 8 byte unsigned int.
S# define SINT64                 int64_t               ///< 8 byte signed int.
S
S# define UINT32                 uint32_t              ///< 4 byte unsigned int.
S# define SINT32                 int32_t               ///< 4 byte signed int.
S
S# define UINT16                 uint16_t              ///< 2 byte unsigned int.
S# define SINT16                 int16_t               ///< 2 byte signed int.
S
S# define UINT08                 uint8_t               ///< Single byte unsigned int.
S# define SINT08                 int8_t                ///< Single byte signed int.
S
S# include <stddef.h>
S
S# if __ARMCC_VERSION >= 6000000
S#  pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
S#  pragma clang diagnostic ignored "-Wnested-anon-types"
S#  pragma clang diagnostic ignored "-Wc++17-compat-mangling"
S#  pragma clang diagnostic ignored "-Wc++98-compat-pedantic"
S#  pragma clang diagnostic ignored "-Wc++98-compat"
S#  pragma clang diagnostic ignored "-Wgcc-compat"
S
S#  define IMPORT(X)             asm(".global " #X);
S
Sstatic __attribute__((always_inline)) inline void ___barrier(void) { asm volatile("" ::: "memory", "cc"); }
S
S#  define SCHEDULE_BARRIER      ___barrier
S#  define FORCE_STORES          ___barrier
S#  define MEMORY_CHANGED        ___barrier
S
S#  define __weak                __attribute__((weak))
S#  define __svc(...)
S#  define __align(x)            __attribute__((aligned(x)))
S
S#  define __clrex               __builtin_arm_clrex
S#  define __dmb                 __builtin_arm_dmb
S#  define __dsb                 __builtin_arm_dsb
S#  define __isb                 __builtin_arm_isb
S#  define __wfi                 __builtin_arm_wfi
S#  define __wfe                 __builtin_arm_wfe
S#  define __rbit                __builtin_arm_rbit
S#  define __rev                 __builtin_bswap32
S#  define __clz                 __builtin_clz
S
S#  define ARM_RSR(NAME)         __builtin_arm_rsr(#NAME)
S#  define ARM_WSR(NAME, VALUE)  __builtin_arm_wsr(#NAME, VALUE)
S
S#  define DEFINE_ARM_RSR(NAME)  inline WORD ARM_RSR_ ## NAME()                 noexcept { return ARM_RSR(NAME); }
S#  define DEFINE_ARM_WSR(NAME)  inline void ARM_WSR_ ## NAME(WORD const value) noexcept { ARM_WSR(NAME, value); }
S
S#  define OFFSET_OF(S, M)       __builtin_offsetof(S, M)
S
S#  define BREAKPOINT(v)         asm volatile("bkpt %0" :: "i"(v))
S
S#  define WRITEONLY             /// not implemented
S#  define READONLY              const
S
S#  define __AT(ADDR)            __attribute__((section(".ARM.__at_" #ADDR)))
S#  define LOCATE_AT(ADDR)       __AT(ADDR)
S
S#  define FORCE_INLINE          __attribute__((always_inline)) inline
S
S#  define FILE                  __FILE__
S#  define FUNC                  __FUNCTION__
S#  define LINE                  __LINE__
S# else
S#  pragma anon_unions
S#  define PRAGMA(X)             _Pragma(#X)
S
S#  define IMPORT(X)             PRAGMA(import(X))
S
S#  define SCHEDULE_BARRIER()    __schedule_barrier() ///< Compiler-spezifische Pseudo-Anweisung, um die compiler-bedingte Umsortierung von Befehlen über diese Grenze hinaus zu unterbinden. 
S#  define FORCE_STORES()        __force_stores()
S#  define MEMORY_CHANGED()      __memory_changed()
S
S#  define DEFINE_ARM_RSR(NAME)  inline WORD ARM_RSR_ ## NAME()                 noexcept { register WORD NAME __asm(#NAME); return NAME; }
S#  define DEFINE_ARM_WSR(NAME)  inline void ARM_WSR_ ## NAME(WORD const value) noexcept { register WORD NAME __asm(#NAME); NAME = value; }
S
S#  define ARM_RSR(NAME)         ARM_RSR_ ## NAME()
S#  define ARM_WSR(NAME, VALUE)  ARM_WSR_ ## NAME(VALUE)
S
S#  define OFFSET_OF(S, M)       offsetof(S, M)
S
S#  define BREAKPOINT(n)         __breakpoint(n)
S
S#  define WRITEONLY             __writeonly
S#  define READONLY              const
S
S#  define LOCATE_AT(ADDR)       __attribute__((at(ADDR)))
S
S#  define FORCE_INLINE          __forceinline
S
S#  define FILE                  __MODULE__            ///< Name der aktuellen Datei.
S
S#  define FUNC                  __PRETTY_FUNCTION__   ///< Name der aktuellen Funktion.
S#  define LINE                  __LINE__              ///< Aktuelle Zeilennummer.
S# endif
S
Snamespace std { using nullptr_t = decltype(nullptr); }
S
S# if defined(DEBUG) && ! defined(NO_BREAK)
S#  define DEBUG_BREAK(n)        BREAKPOINT(n)
S# else
S#  define DEBUG_BREAK(n)
S# endif
S
S# define __CONCAT(A, B)         A##B
S# define CONCAT(A, B)           __CONCAT(A, B)
S
Stemplate<typename TYPE, unsigned DIM> constexpr unsigned ArrayDim(TYPE const (&)[DIM]) noexcept { return DIM; }
Stemplate<typename TYPE, unsigned DIM> constexpr unsigned ArrayMax(TYPE const (&)[DIM]) noexcept { return DIM - 1U; }
S
Stemplate<typename TYPE, unsigned H, unsigned W> constexpr unsigned MatrixRows(TYPE const (&)[H][W]) noexcept { return H; }
Stemplate<typename TYPE, unsigned H, unsigned W> constexpr unsigned MatrixCols(TYPE const (&)[H][W]) noexcept { return W; }
S
S/// Achtung: Die obigen Varianten zur Bestimmung von Feld oder Matrixdimensionen funktionieren nicht, wenn das Feld
S/// nicht-statische Member-Variable in einer Klasse ist, weil der this-Zeiger nicht constexpr ist.
S
Sinline void * operator new   (unsigned, void * const p) noexcept { return p; }
Sinline void   operator delete(void *, void *) noexcept { }
S
N#endif
N
L 12 ".\Inc\Drivers\RB.h" 2
N
N# define REG_BITMASK(N)         (1U << INDX_ ## N)
N
N# define SET_REG_BIT(RB, REG, BIT) ( rb ## RB.REG |=  MASK_ ## RB ## _ ## REG ## _ ## BIT)   
N# define RES_REG_BIT(RB, REG, BIT) ( rb ## RB.REG &= ~MASK_ ## RB ## _ ## REG ## _ ## BIT)   
N# define GET_REG_BIT(RB, REG, BIT) ((rb ## RB.REG &   MASK_ ## RB ## _ ## REG ## _ ## BIT) != 0)   
N
Ntypedef struct __regbank_MPU
N{
N  union {
N    WORD TYPE;
X    uint32_t TYPE;
N    struct {
N      BYTE res0;
X      uint8_t res0;
N      BYTE TYPE_DREGION;
X      uint8_t TYPE_DREGION;
N      BYTE TYPE_IREGION;
X      uint8_t TYPE_IREGION;
N      BYTE res3;
X      uint8_t res3;
N    };
N  };
N  WORD CTRL;                    
X  uint32_t CTRL;                    
N  WORD RNR;                     
X  uint32_t RNR;                     
N  WORD RBAR;                    
X  uint32_t RBAR;                    
N  WORD RASR;                    
X  uint32_t RASR;                    
N  WORD RBAR_A1;                 
X  uint32_t RBAR_A1;                 
N  WORD RASR_A1;                 
X  uint32_t RASR_A1;                 
N  WORD RBAR_A2;                 
X  uint32_t RBAR_A2;                 
N  WORD RASR_A2;
X  uint32_t RASR_A2;
N  WORD RBAR_A3;
X  uint32_t RBAR_A3;
N  WORD RASR_A3;
X  uint32_t RASR_A3;
N} RegbankTypeMPU;
N
Nextern RegbankTypeMPU volatile rbMPU;
N
N# define MASK_MPU_RASR_ENABLE   1U
N
N# define INDX_MPU_RASR_SIZE     1
N
N# define INDX_MPU_RASR_SRD      8
N
N# define INDX_MPU_RASR_B        16
N# define MASK_MPU_RASR_B        (1U << INDX_MPU_RASR_B)
N
N# define INDX_MPU_RASR_C        17
N# define MASK_MPU_RASR_C        (1U << INDX_MPU_RASR_C)
N
N# define INDX_MPU_RASR_S        18
N# define MASK_MPU_RASR_S        (1U << INDX_MPU_RASR_S)
N
N# define INDX_MPU_RASR_TEX      19
N
N# define INDX_MPU_RASR_AP       24
N
N# define INDX_MPU_RASR_XN       28
N
N/// The processor prevents instruction accesses (a fault exception is 
N/// generated on execution of an instruction executed from an XN region).
N# define MASK_MPU_RASR_XN       (1U << INDX_MPU_RASR_XN) 
N
N// Memory region sizes
N
N# define MASK_MPU_RASR_SIZE_001KB (0x09U << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_002KB (0x0AU << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_004KB (0x0BU << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_008KB (0x0CU << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_016KB (0x0DU << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_032KB (0x0EU << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_064KB (0x0FU << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_128KB (0x10U << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_256KB (0x11U << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_512KB (0x12U << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_001MB (0x13U << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_002MB (0x14U << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_004MB (0x15U << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_008MB (0x16U << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_016MB (0x17U << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_032MB (0x18U << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_064MB (0x19U << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_128MB (0x1AU << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_256MB (0x1BU << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_512MB (0x1CU << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_001GB (0x1DU << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_002GB (0x1EU << INDX_MPU_RASR_SIZE)
N# define MASK_MPU_RASR_SIZE_004GB (0x1FU << INDX_MPU_RASR_SIZE)
N
N// Memory region permissions (privileged, user; NA=no access)
N
N#define  MASK_MPU_RASR_AP_NA_NA  (0x0U << INDX_MPU_RASR_AP)
N#define  MASK_MPU_RASR_AP_RW_NA  (0x1U << INDX_MPU_RASR_AP)
N#define  MASK_MPU_RASR_AP_RW_RO  (0x2U << INDX_MPU_RASR_AP)
N#define  MASK_MPU_RASR_AP_RW_RW  (0x3U << INDX_MPU_RASR_AP) ///< Memory region full access (privileged: read/write, user: read/write).
N#define  MASK_MPU_RASR_AP_RO_NA  (0x5U << INDX_MPU_RASR_AP) 
N#define  MASK_MPU_RASR_AP_RO_RO  (0x6U << INDX_MPU_RASR_AP) 
N
N// Memory region types
N
N#define  MPU_REGION_STRONGLY_ORDERED 0x0
N#define  MPU_REGION_DEVICE      MASK_MPU_RASR_B
N#define  MPU_REGION_NORMAL_WB   (MASK_MPU_RASR_B | MASK_MPU_RASR_C) ///< Write-back, no write allocate
N#define  MPU_REGION_NORMAL_WT   MASK_MPU_RASR_C                     ///< Write-through, no write allocate
N#define  MPU_REGION_NORMAL_WBWA (MASK_MPU_RASR_B | MASK_MPU_RASR_C | (1U << INDX_MPU_RASR_TEX)) ///< Write-through, write and read allocate
N
N// Control regiszer values
N
N# define MASK_MPU_CTRL_ENABLE   0x1U
N
N# define MASK_MPU_CTRL_HFNMIENA 0x2U
N
N# define MASK_MPU_CTRL_PRIVDEFENA 0x4U              ///< Enables privileged software access to the default memory map
N
Ntypedef struct __regbank_DBG
N{
N  WORD DHCSR;
X  uint32_t DHCSR;
N  WORD DCRSR;
X  uint32_t DCRSR;
N  WORD DCRDR;
X  uint32_t DCRDR;
N  WORD DEMCR;
X  uint32_t DEMCR;
N} RegbankTypeDBG;
N
Nextern RegbankTypeDBG volatile rbDBG;
N
N/// \cond RB_DEFS
N
N// DEMCR definitions
N
N# define INDX_DBG_DEMCR_TRCENA  24
N# define MASK_DBG_DEMCR_TRCENA  (WORD)REG_BITMASK(DBG_DEMCR_TRCENA)
N
N/// \endcond
N
N// Die ersten drei Hexziffern der Adresse bilden den Prefix für die verschiedenene I/O-Bereiche.
N
N# define PERIPH_ADDR_PREFIX     0x400 ///< Cortex-Mx periphery start address prefix
N# define EXTPER_ADDR_PREFIX     0x500
N# define DEVICE_ADDR_PREFIX     0xA00 ///< Cortex-Mx external device start address prefix.
N# define PRVPER_ADDR_PREFIX     0xE00 ///< Cortex-Mx private peripheral bus (PPB, 1MB) address prefix (first 3 hex digits of address).
N
Nvoid TriggerWatchdog() noexcept;
N
N#endif
N
L 13 "Src\Cortex\Cortex.cpp" 2
N#include <RB_SCB.h>
L 1 ".\Inc\Drivers\RB_SCB.h" 1
N//
N// RB_SCB.h
N//
N
N/// \file RB_SCB.h
N/// System control block (SCB, core periphery).
N
N#ifndef guard_RB_SCB_H
N# define guard_RB_SCB_H
N
N# include <RB.h>
N
N/// Datentyp für SCB-Registerbank.
Ntypedef struct __regbank_SCB
N{
N  WORD CPUID;                                         ///< CPU ID base register.
X  uint32_t CPUID;                                         
N  WORD ICSR;                                          ///< Interrupt control and state register.
X  uint32_t ICSR;                                          
N  WORD VTOR;                                          ///< Vector table offset register.
X  uint32_t VTOR;                                          
N  WORD AIRCR;                                         ///< Application interrupt and reset control register.
X  uint32_t AIRCR;                                         
N
N  WORD SCR;                                           ///< System control register.
X  uint32_t SCR;                                           
N  WORD CCR;                                           ///< Configuration and control register.
X  uint32_t CCR;                                           
N
N  BYTE SHPR[12];                                      ///< System handler priority registers.
X  uint8_t SHPR[12];                                      
N
N  WORD SHCSR;                                         ///< System handler control and state register.
X  uint32_t SHCSR;                                         
N
N  union {
N    WORD CFSR;                                        ///< Configurable fault status register.
X    uint32_t CFSR;                                        
N    struct {
N      BYTE MFSR;                                      ///< Mem fault status register.
X      uint8_t MFSR;                                      
N      BYTE BFSR;                                      ///< Bus fault status register.
X      uint8_t BFSR;                                      
N      HWRD UFSR;                                      ///< Usage fault status register.
X      uint16_t UFSR;                                      
N    };
N  };
N
N  WORD HFSR;                                          ///< Offset: 0x02C, Hard fault status register.
X  uint32_t HFSR;                                          
N  WORD DFSR;                                          ///< Offset: 0x030 (R/W) Debug Fault Status Register.
X  uint32_t DFSR;                                          
N  WORD MMFAR;                                         ///< Memory management fault address register.
X  uint32_t MMFAR;                                         
N  WORD BFAR;                                          ///< Bus fault address register.
X  uint32_t BFAR;                                          
N  WORD AFSR;                                          ///< Auxilliary fault address register.
X  uint32_t AFSR;                                          
N
N  WORD PFR[2];                                        ///< Offset: 0x040 (R) Processor Feature Register.
X  uint32_t PFR[2];                                        
N  WORD DFR;                                           ///< Offset: 0x048 (R) Debug Feature Register.
X  uint32_t DFR;                                           
N  WORD AFR;                                           ///< Offset: 0x04C (R) Auxiliary Feature Register.
X  uint32_t AFR;                                           
N  WORD MMFR[4];                                       ///< Offset: 0x050 (R) Memory Model Feature Register.
X  uint32_t MMFR[4];                                       
N  WORD ISAR[5];                                       ///< Offset: 0x060 (R) Instruction Set Attributes Register.
X  uint32_t ISAR[5];                                       
N  WORD reserved0[1];
X  uint32_t reserved0[1];
N  WORD CLIDR;                                         ///< Offset: 0x078 (R) Cache Level ID register.
X  uint32_t CLIDR;                                         
N  WORD CTR;                                           ///< Offset: 0x07C (R) Cache Type register.
X  uint32_t CTR;                                           
N  WORD CCSIDR;                                        ///< Offset: 0x080 (R) Cache Size ID Register.
X  uint32_t CCSIDR;                                        
N  WORD CSSELR;                                        ///< Offset: 0x084 (R/W) Cache Size Selection Register.
X  uint32_t CSSELR;                                        
N  WORD CPACR;                                         ///< Offset: 0x088 (R/W) Coprocessor Access Control Register.
X  uint32_t CPACR;                                         
N} RegbankTypeSCB;
N
Nextern RegbankTypeSCB volatile rbSCB;                 ///< SCB-Registerbank.
N
Nextern WORD volatile WRITEONLY regSTIR;               ///< Software Triggered Interrupt Register.
Xextern uint32_t volatile __writeonly regSTIR;               
Nextern WORD volatile WRITEONLY regICIALLU;            ///< Instruction cache invalidate all to the Point of Unification (PoU).
Xextern uint32_t volatile __writeonly regICIALLU;            
Nextern WORD volatile WRITEONLY regICIMVAU;            ///< Instruction cache invalidate by address to the PoU.
Xextern uint32_t volatile __writeonly regICIMVAU;            
Nextern WORD volatile WRITEONLY regDCIMVAC;            ///< Data cache invalidate by address to the Point of Coherency (PoC).
Xextern uint32_t volatile __writeonly regDCIMVAC;            
Nextern WORD volatile WRITEONLY regDCISW;              ///< Data cache invalidate by set/way.
Xextern uint32_t volatile __writeonly regDCISW;              
Nextern WORD volatile WRITEONLY regDCCMVAU;            ///< Data cache clean by address to the PoU.
Xextern uint32_t volatile __writeonly regDCCMVAU;            
Nextern WORD volatile WRITEONLY regDCCMVAC;            ///< Data cache clean by address to the PoC.
Xextern uint32_t volatile __writeonly regDCCMVAC;            
Nextern WORD volatile WRITEONLY regDCCSW;              ///< Data cache clean by set/way.
Xextern uint32_t volatile __writeonly regDCCSW;              
Nextern WORD volatile WRITEONLY regDCCIMVAC;           ///< Data cache clean and invalidate by address to the PoC.
Xextern uint32_t volatile __writeonly regDCCIMVAC;           
Nextern WORD volatile WRITEONLY regDCCISW;             ///< Data cache clean and invalidate by set/way.
Xextern uint32_t volatile __writeonly regDCCISW;             
N
Nextern WORD volatile             regITCMCR;           ///< Instruction Tightly-Coupled Memory Control Register.
Xextern uint32_t volatile             regITCMCR;           
Nextern WORD volatile             regDTCMCR;           ///< Data Tightly-Coupled Memory Control Registers.
Xextern uint32_t volatile             regDTCMCR;           
Nextern WORD volatile             regAHBPCR;           ///< AHBP Control Register.
Xextern uint32_t volatile             regAHBPCR;           
Nextern WORD volatile             regCACR;             ///< L1 Cache Control Register.
Xextern uint32_t volatile             regCACR;             
Nextern WORD volatile             regAHBSCR;           ///< AHB Slave Control Register.
Xextern uint32_t volatile             regAHBSCR;           
Nextern WORD volatile             regABFSR;            ///< Auxiliary Bus Fault Status Register.
Xextern uint32_t volatile             regABFSR;            
N
N/// \cond RB_DEFS
N
N// CCR
N
N# define INDX_SCB_CCR_USERSETMPEND 1
N# define MASK_SCB_CCR_USERSETMPEND (WORD)REG_BITMASK(SCB_CCR_USERSETMPEND)
N
N# define INDX_SCB_CCR_UNALIGN_TRP 3
N# define MASK_SCB_CCR_UNALIGN_TRP  (WORD)REG_BITMASK(SCB_CCR_UNALIGN_TRP)
N
N# define INDX_SCB_CCR_DIVZERO_TRP 4
N
N# define INDX_SCB_CCR_DC        16                    ///< Data cache enable bit position 
N# define MASK_SCB_CCR_DC        (WORD)REG_BITMASK(SCB_CCR_DC) 
N
N# define INDX_SCB_CCR_IC        17                    ///< Instruction cache enable bit position 
N# define MASK_SCB_CCR_IC        (WORD)REG_BITMASK(SCB_CCR_IC) 
N
N# define INDX_SCB_CCR_BP        18                    ///< Branch prediction enable bit position 
N# define MASK_SCB_CCR_BP        (WORD)REG_BITMASK(SCB_CCR_BP) 
N
N// SHPR
N
N# define SCB_SHPR_MEM_FLT       0
N# define SCB_SHPR_BUS_FLT       1
N# define SCB_SHPR_USG_FLT       2
N# define SCB_SHPR_SVC           7
N# define SCB_SHPR_PSV           10
N# define SCB_SHPR_STK           11
N
N// ICSR definitions
N
N# define INDX_SCB_ICSR_PENDSVCSET 28
N# define MASK_SCB_ICSR_PENDSVCSET (WORD)REG_BITMASK(SCB_ICSR_PENDSVCSET)
N
N# define INDX_SCB_ICSR_PENDSVCCLR 27
N# define MASK_SCB_ICSR_PENDSVCCLR (WORD)REG_BITMASK(SCB_ICSR_PENDSVCCLR)
N
N# define INDX_SCB_ICSR_ISRPENDING 22
N# define MASK_SCB_ICSR_ISRPENDING (WORD)REG_BITMASK(SCB_ICSR_ISRPENDING)
N
N// SHCSR definitions
N
N# define INDX_SCB_SHCSR_SYSTICKACT 11
N# define MASK_SCB_SHCSR_SYSTICKACT (WORD)REG_BITMASK(SCB_SHCSR_SYSTICKACT)
N
N# define INDX_SCB_SHCSR_PENDSVACT 10
N# define MASK_SCB_SHCSR_PENDSVACT (WORD)REG_BITMASK(SCB_SHCSR_PENDSVACT)
N
N# define INDX_SCB_SHCSR_SVCALLACT 7
N# define MASK_SCB_SHCSR_SVCALLACT (WORD)REG_BITMASK(SCB_SHCSR_SVCALLACT)
N
N# define MASK_SCB_SHCSR_SYSTEMACT (MASK_SCB_SHCSR_SYSTICKACT | MASK_SCB_SHCSR_PENDSVACT | MASK_SCB_SHCSR_SVCALLACT)
N
N# define INDX_SCB_SHCSR_USGFAULTACT 3
N
N# define INDX_SCB_SHCSR_BUSFAULTACT 1
N
N# define INDX_SCB_SHCSR_MEMFAULTACT 0
N
N// AIRCR definitions
N
N# define INDX_SCB_AIRCR_SYSRESETREQ 2
N# define MASK_SCB_AIRCR_SYSRESETREQ (WORD)(1U << INDX_SCB_AIRCR_SYSRESETREQ)
N
N# define INDX_SCB_AIRCR_PRIGROUP 8
N# define MASK_SCB_AIRCR_PRIGROUP_4_4 (WORD)(0x3U << INDX_SCB_AIRCR_PRIGROUP)
N# define MASK_SCB_AIRCR_PRIGROUP_3_5 (WORD)(0x4U << INDX_SCB_AIRCR_PRIGROUP)
N
N# define MASK_SCB_AIRCR_VECTKEY_WR 0x05FA0000U     // on write: magic number defined by core, must be written to AIRCR to unlock
N# define MASK_SCB_AIRCR_VECTKEY_RD 0xFA050000U     // on read
N
N// HFSR definitions
N
N# define INDX_SCB_HFSR_DEBUGEVT 31
N
N# define INDX_SCB_HFSR_FORCED   30
N# define MASK_SCB_HFSR_FORCED   (WORD)REG_BITMASK(SCB_HFSR_FORCED)
N
N# define INDX_SCB_HFSR_VECTTBL  1
N
N/// \endcond
N
N#endif
L 14 "Src\Cortex\Cortex.cpp" 2
N
Nstatic constexpr WORD const magical = 0x55555555U; ///< Magical fill number for alternative stack (used to detect stack corruption).
Xstatic constexpr uint32_t const magical = 0x55555555U; 
Nstatic WORD volatile const * boas = nullptr; ///< Bottom of alternative stack.
Xstatic uint32_t volatile const * boas = nullptr; 
N
Nvoid Cortex::FpuEnable() noexcept  
N{ 
N  ISB();
N
N  constexpr WORD const fpuOn = (3U << (10 * 2)) | (3U << (11 * 2));  // CP10 and CP11 Full Access
X  constexpr uint32_t const fpuOn = (3U << (10 * 2)) | (3U << (11 * 2));  
N  
N  rbSCB.CPACR = fpuOn; 
N  
N  DSB();
N}
N
Nvoid Cortex::FpuDisable() noexcept
N{ 
N  ISB();
N 
N  rbSCB.CPACR = 0U;
N 
N  DSB();
N  
N  ARM_WSR(control, ARM_RSR(control) & ~CONTROL_fpucntxt);
X  ARM_WSR_control(ARM_RSR_control() & ~CONTROL_fpucntxt);
N}
N
Nvoid Cortex::Reset_privileged() noexcept
N{
N  for ( ;; ) 
N  {
N    DEBUG_BREAK(3);
X    __breakpoint(3);
N
N    rbSCB.AIRCR = MASK_SCB_AIRCR_SYSRESETREQ | MASK_SCB_AIRCR_VECTKEY_WR;
X    rbSCB.AIRCR = (uint32_t)(1U << 2) | 0x05FA0000U;
N  }
N}
N
N__weak void Cortex::Reset() noexcept 
N{ 
N  Cortex::Reset_privileged(); 
N}
N
Nbool Cortex::AltStackIsOk() noexcept
N{
N  return boas == nullptr || *boas == magical;
N}
N
N__weak BYTE Cortex::GetPSVPrio() noexcept { return 0xF0; }
X__weak uint8_t Cortex::GetPSVPrio() noexcept { return 0xF0; }
N__weak BYTE Cortex::GetSVCPrio() noexcept { return 0x10; }
X__weak uint8_t Cortex::GetSVCPrio() noexcept { return 0x10; }
N__weak BYTE Cortex::GetSTKPrio() noexcept { return 0x20; }
X__weak uint8_t Cortex::GetSTKPrio() noexcept { return 0x20; }
N__weak BYTE Cortex::GetMinPrio() noexcept { return GetSTKPrio(); }
X__weak uint8_t Cortex::GetMinPrio() noexcept { return GetSTKPrio(); }
N
N__weak void Cortex::SetCONTROL(WORD const value) noexcept {        SetCONTROL_privileged(value); }
X__weak void Cortex::SetCONTROL(uint32_t const value) noexcept {        SetCONTROL_privileged(value); }
N__weak void Cortex::SetBASEPRI(WORD const value) noexcept {        SetBASEPRI_privileged(value); }
X__weak void Cortex::SetBASEPRI(uint32_t const value) noexcept {        SetBASEPRI_privileged(value); }
N__weak WORD Cortex::GetBASEPRI()                 noexcept { return GetBASEPRI_privileged(); }
X__weak uint32_t Cortex::GetBASEPRI()                 noexcept { return GetBASEPRI_privileged(); }
N__weak void Cortex::SetPRIMASK()                 noexcept {        SetPRIMASK_privileged(); }
N__weak WORD Cortex::GetPRIMASK()                 noexcept { return GetPRIMASK_privileged(); }
X__weak uint32_t Cortex::GetPRIMASK()                 noexcept { return GetPRIMASK_privileged(); }
N
Nvoid Cortex::SetPRIMASK_privileged() noexcept
N{
N  ISB(); 
N  
N  ARM_WSR_primask(1U);
N  ARM_WSR_control(ARM_RSR_control() & ~CONTROL_usermode);
N}
N
Nvoid Cortex::ClrPRIMASK_privileged() noexcept { ISB();        ARM_WSR_primask(0U); }
NWORD Cortex::GetPRIMASK_privileged() noexcept { ISB(); return ARM_RSR_primask(); }
Xuint32_t Cortex::GetPRIMASK_privileged() noexcept { ISB(); return ARM_RSR_primask(); }
N
Nvoid Cortex::SwitchStack(WORD * const stack, unsigned num) noexcept
Xvoid Cortex::SwitchStack(uint32_t * const stack, unsigned num) noexcept
N{
N  auto i = num;
N  
N  do {
N    stack[--i] = magical;
N  } while ( i > 0 );
N
N  boas = stack;
N
N  ISB();
N  
N  WORD const tos((WORD)(stack + num - 1U));
X  uint32_t const tos((uint32_t)(stack + num - 1U));
N  
N  ARM_WSR_psp(ARM_RSR_msp());
N  ARM_WSR_msp(tos);
N  
N  ARM_WSR_control(ARM_RSR_control() |  CONTROL_altstack);
N}
N
Nbool Cortex::IsInterruptable(BYTE const prio) noexcept
Xbool Cortex::IsInterruptable(uint8_t const prio) noexcept
N{
N  if ( GetPRIMASK() != 0U )
N    return false;
N    
N  auto const basepri(GetBASEPRI());
N  
N  if ( basepri == 0x00U )
N    return true;
N    
N  return basepri > prio;
N}
N
N
