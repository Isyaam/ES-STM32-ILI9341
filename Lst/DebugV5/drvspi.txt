; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--cpp11 --list --debug -c --asm --interleave --exceptions --protect_stack -o.\out\debugv5\drvspi.o --asm_dir=.\Lst\DebugV5\ --list_dir=.\Lst\DebugV5\ --depend=.\out\debugv5\drvspi.d --cpu=Cortex-M4 --apcs=interwork --no_unaligned_access -O0 --diag_suppress=9931 -I.\Inc -I.\Inc\Debug -I.\Inc\Cortex -I.\Inc\Drivers -I.\Inc\Utilities -D__UVISION_VERSION=527 -DSTM32F429xx -DCORTEX_M=4 -DDEBUG --omf_browse=.\out\debugv5\drvspi.crf --no_rtti Src\DrvSpi.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ZN4ISpiC2Ev                  ; Alternate entry point ; ISpi::ISpi__sub_object()
                  _ZN4ISpiC1Ev PROC ; ISpi::ISpi()
;;;2      
;;;3      ISpi::ISpi()
;;;4      {
;;;5      }
;;;6      
000000  4770              BX       lr
                          ENDP

                  _ZNK4ISpi7initSPIEv PROC ; ISpi::initSPI() const
;;;16     
;;;17     void ISpi::initSPI() const {
000002  e92d4ff8          PUSH     {r3-r11,lr}
000006  4682              MOV      r10,r0
;;;18     	
;;;19     	APBClockEnable(PERIPHERY_APB_SPI5);
000008  f44f708a          MOV      r0,#0x114
00000c  f7fffffe          BL       _Z14APBClockEnablej ; APBClockEnable(unsigned)
;;;20     	AHBClockEnable(PERIPHERY_AHB_GPIOF);
000010  2005              MOVS     r0,#5
000012  f7fffffe          BL       _Z14AHBClockEnablej ; AHBClockEnable(unsigned)
;;;21     	
;;;22     	static constexpr BYTE const pins[] = {7,8,9};
;;;23     	EnableAF(rbGPIOF, MASK_GPIO_AFR_AF05, MASK_GPIO_OSPEEDR_HIGH, MASK_GPIO_OTYPER_PP, pins, 3U);
000016  4d2e              LDR      r5,|L1.208|
000018  2605              MOVS     r6,#5
00001a  2703              MOVS     r7,#3
00001c  f04f0800          MOV      r8,#0
000020  4c2c              LDR      r4,|L1.212|
000022  46b9              MOV      r9,r7
000024  e008              B        |L1.56|
                  |L1.38|
000026  f8140b01          LDRB     r0,[r4],#1
00002a  4643              MOV      r3,r8
00002c  463a              MOV      r2,r7
00002e  4631              MOV      r1,r6
000030  9000              STR      r0,[sp,#0]
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       _Z8EnableAFRV14__regbank_GPIOjjbj ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)
                  |L1.56|
000038  f1b90000          SUBS     r0,r9,#0
00003c  f1a90901          SUB      r9,r9,#1
000040  d1f1              BNE      |L1.38|
000042  bf00              NOP      
;;;24     	
;;;25     	rbSPI5.CR1 &= ~MASK_SPI_CR1_SPE;
000044  4824              LDR      r0,|L1.216|
000046  8800              LDRH     r0,[r0,#0]  ; rbSPI5
000048  f0200040          BIC      r0,r0,#0x40
00004c  4922              LDR      r1,|L1.216|
00004e  8008              STRH     r0,[r1,#0]
;;;26     	rbSPI5.CR1 |= MASK_SPI_CR1_SSM;
000050  4608              MOV      r0,r1
000052  8800              LDRH     r0,[r0,#0]  ; rbSPI5
000054  f4407000          ORR      r0,r0,#0x200
000058  8008              STRH     r0,[r1,#0]
;;;27     	rbSPI5.CR1 |= MASK_SPI_CR1_SSI;
00005a  4608              MOV      r0,r1
00005c  8800              LDRH     r0,[r0,#0]  ; rbSPI5
00005e  f4407080          ORR      r0,r0,#0x100
000062  8008              STRH     r0,[r1,#0]
;;;28     	rbSPI5.CR1 |= MASK_SPI_CR1_MSTR;
000064  4608              MOV      r0,r1
000066  8800              LDRH     r0,[r0,#0]  ; rbSPI5
000068  f0400004          ORR      r0,r0,#4
00006c  8008              STRH     r0,[r1,#0]
;;;29     	rbSPI5.CR1 |= MASK_SPI_CR1_SPE;
00006e  4608              MOV      r0,r1
000070  8800              LDRH     r0,[r0,#0]  ; rbSPI5
000072  f0400040          ORR      r0,r0,#0x40
000076  8008              STRH     r0,[r1,#0]
;;;30     }
000078  e8bd8ff8          POP      {r3-r11,pc}
                          ENDP

                  _ZNK4ISpi8SPI_SendEh PROC ; ISpi::SPI_Send(unsigned char) const
;;;7      
;;;8      uint8_t ISpi::SPI_Send(uint8_t data) const {
00007c  4602              MOV      r2,r0
;;;9      	if(!rbSPI5.CR1 & MASK_SPI_CR1_SPE) return 1;
00007e  4816              LDR      r0,|L1.216|
000080  8800              LDRH     r0,[r0,#0]  ; rbSPI5
000082  b908              CBNZ     r0,|L1.136|
000084  2001              MOVS     r0,#1
000086  e000              B        |L1.138|
                  |L1.136|
000088  2000              MOVS     r0,#0
                  |L1.138|
00008a  f0000040          AND      r0,r0,#0x40
00008e  b108              CBZ      r0,|L1.148|
000090  2001              MOVS     r0,#1
                  |L1.146|
;;;10     	while(SPI_BSY);
;;;11     	rbSPI5.DRbyte = data;
;;;12     	while(SPI_BSY);
;;;13     	return rbSPI5.DRbyte;
;;;14     }
000092  4770              BX       lr
                  |L1.148|
000094  bf00              NOP                            ;10
                  |L1.150|
000096  4810              LDR      r0,|L1.216|
000098  8900              LDRH     r0,[r0,#8]            ;10  ; rbSPI5
00009a  f0000080          AND      r0,r0,#0x80           ;10
00009e  2800              CMP      r0,#0                 ;10
0000a0  d1f9              BNE      |L1.150|
0000a2  480d              LDR      r0,|L1.216|
0000a4  8900              LDRH     r0,[r0,#8]            ;10  ; rbSPI5
0000a6  2000              MOVS     r0,#0                 ;10
0000a8  2800              CMP      r0,#0                 ;10
0000aa  d1f4              BNE      |L1.150|
0000ac  480a              LDR      r0,|L1.216|
0000ae  7301              STRB     r1,[r0,#0xc]          ;11
0000b0  bf00              NOP                            ;12
                  |L1.178|
0000b2  4809              LDR      r0,|L1.216|
0000b4  8900              LDRH     r0,[r0,#8]            ;12  ; rbSPI5
0000b6  f0000080          AND      r0,r0,#0x80           ;12
0000ba  2800              CMP      r0,#0                 ;12
0000bc  d1f9              BNE      |L1.178|
0000be  4806              LDR      r0,|L1.216|
0000c0  8900              LDRH     r0,[r0,#8]            ;12  ; rbSPI5
0000c2  2000              MOVS     r0,#0                 ;12
0000c4  2800              CMP      r0,#0                 ;12
0000c6  d1f4              BNE      |L1.178|
0000c8  4803              LDR      r0,|L1.216|
0000ca  7b00              LDRB     r0,[r0,#0xc]          ;13  ; rbSPI5
0000cc  e7e1              B        |L1.146|
;;;15     
                          ENDP

0000ce  0000              DCW      0x0000
                  |L1.208|
                          DCD      rbGPIOF
                  |L1.212|
                          DCD      _ZZNK4ISpi7initSPIEvE4pins ; ISpi::initSPI() const::pins
                  |L1.216|
                          DCD      rbSPI5

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  _ZZNK4ISpi7initSPIEvE4pins ; ISpi::initSPI() const::pins
000000  070809            DCB      0x07,0x08,0x09

                          AREA ||.constdata__ZZ8EnableAFRV14__regbank_GPIOjjbjEs||, COMGROUP=_ZZ8EnableAFRV14__regbank_GPIOjjbjEs, DATA, READONLY, ALIGN=0

                  _ZZ8EnableAFRV14__regbank_GPIOjjbjEs ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)::string
000000  6e203c20          DCB      0x6e,0x20,0x3c,0x20
000004  31365500          DCB      0x31,0x36,0x55,0x00

                          AREA ||.constdata__ZZ8EnableAFRV14__regbank_GPIOjjbjEs_0||, COMGROUP=_ZZ8EnableAFRV14__regbank_GPIOjjbjEs_0, DATA, READONLY, ALIGN=0

                  _ZZ8EnableAFRV14__regbank_GPIOjjbjEs_0 ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)::string (instance 2)
000000  52425f47          DCB      0x52,0x42,0x5f,0x47
000004  50494f2e          DCB      0x50,0x49,0x4f,0x2e
000008  6800              DCB      0x68,0x00

                          AREA ||.constdata__ZZ8EnableAFRV14__regbank_GPIOjjbjEs_1||, COMGROUP=_ZZ8EnableAFRV14__regbank_GPIOjjbjEs_1, DATA, READONLY, ALIGN=0

                  _ZZ8EnableAFRV14__regbank_GPIOjjbjEs_1 ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)::string (instance 3)
000000  6166203c          DCB      0x61,0x66,0x20,0x3c
000004  20313655          DCB      0x20,0x31,0x36,0x55
000008  00                DCB      0x00

                          AREA ||t._ZN6Atomic4BfldIjEET_RVS1_S1_S1_||, COMGROUP=_ZN6Atomic4BfldIjEET_RVS1_S1_S1_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic4BfldIjEET_RVS1_S1_S1_ PROC ; T1 Atomic::Bfld<unsigned>(volatile T1&, T1, T1)
;;;326      
;;;327      template<typename TYPE> inline TYPE Bfld(TYPE volatile & data, TYPE const set, TYPE const res) noexcept
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;328      {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;329        TYPE value;
;;;330        
;;;331        do 
00000a  bf00              NOP      
                  |L20.12|
;;;332        {
;;;333          value = Cortex::LoadLinked(data);
00000c  4640              MOV      r0,r8
00000e  f7fffffe          BL       _ZN6Cortex10LoadLinkedIjEET_RVKS1_ ; T1 Cortex::LoadLinked<unsigned>(const volatile T1&)
000012  4604              MOV      r4,r0
;;;334        } while ( Cortex::SaveConditional(data, (TYPE)(set | (value & ~res))) );
000014  ea240006          BIC      r0,r4,r6
000018  ea400105          ORR      r1,r0,r5
00001c  4640              MOV      r0,r8
00001e  f7fffffe          BL       _ZN6Cortex15SaveConditionalIjEEbRVT_S1_ ; bool Cortex::SaveConditional<unsigned>(volatile T1&, T1)
000022  2800              CMP      r0,#0
000024  d1f2              BNE      |L20.12|
;;;335        
;;;336        return value;
000026  4627              MOV      r7,r4
000028  4638              MOV      r0,r7
;;;337      }
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;338    };
                          ENDP


                          AREA ||area_number.21||, COMGROUP=_ZN6Atomic4BfldIjEET_RVS1_S1_S1_, LINKORDER=||t._ZN6Atomic4BfldIjEET_RVS1_S1_S1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic4BfldIjEET_RVS1_S1_S1_||
                          DCD      0x00000001

                          AREA ||i._Z8EnableAFRV14__regbank_GPIOjjbj||, COMGROUP=_Z8EnableAFRV14__regbank_GPIOjjbj, CODE, READONLY, ALIGN=2

                  _Z8EnableAFRV14__regbank_GPIOjjbj PROC ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)
;;;165    
;;;166    inline void EnableAF(RegbankTypeGPIO volatile & gpio, WORD const af, WORD const sp, bool const od, unsigned const n) noexcept 
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;167    {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
00000a  469b              MOV      r11,r3
00000c  9c0e              LDR      r4,[sp,#0x38]
;;;168      ASSERT(n < 16U);
00000e  2c10              CMP      r4,#0x10
000010  d200              BCS      |L27.20|
000012  e005              B        |L27.32|
                  |L27.20|
000014  4b27              LDR      r3,|L27.180|
000016  22a8              MOVS     r2,#0xa8
000018  4927              LDR      r1,|L27.184|
00001a  4828              LDR      r0,|L27.188|
00001c  f7fffffe          BL       _Z15AssertionFailedPKcS0_jS0_ ; AssertionFailed(const char*, const char*, unsigned, const char*)
                  |L27.32|
;;;169      ASSERT(af < 16U);
000020  2f10              CMP      r7,#0x10
000022  d200              BCS      |L27.38|
000024  e005              B        |L27.50|
                  |L27.38|
000026  4b23              LDR      r3,|L27.180|
000028  22a9              MOVS     r2,#0xa9
00002a  4923              LDR      r1,|L27.184|
00002c  4824              LDR      r0,|L27.192|
00002e  f7fffffe          BL       _Z15AssertionFailedPKcS0_jS0_ ; AssertionFailed(const char*, const char*, unsigned, const char*)
                  |L27.50|
;;;170    
;;;171      auto const pos((n % 8U) * 4U);
000032  0760              LSLS     r0,r4,#29
000034  ea4f68d0          LSR      r8,r0,#27
;;;172      WORD const set(af            << pos);
000038  fa07f008          LSL      r0,r7,r8
00003c  9003              STR      r0,[sp,#0xc]
;;;173      WORD const res(MASK_GPIO_AFR << pos);
00003e  200f              MOVS     r0,#0xf
000040  fa00f008          LSL      r0,r0,r8
000044  9002              STR      r0,[sp,#8]
;;;174      auto const indx(n / 8U);
000046  08e1              LSRS     r1,r4,#3
000048  9101              STR      r1,[sp,#4]
;;;175    
;;;176      Atomic::Bfld(gpio.AFR[indx], set, res);
00004a  f1050220          ADD      r2,r5,#0x20
00004e  9901              LDR      r1,[sp,#4]
000050  eb020081          ADD      r0,r2,r1,LSL #2
000054  e9dd2102          LDRD     r2,r1,[sp,#8]
000058  f7fffffe          BL       _ZN6Atomic4BfldIjEET_RVS1_S1_S1_ ; T1 Atomic::Bfld<unsigned>(volatile T1&, T1, T1)
;;;177      
;;;178      HWRD const mask = 1U << n;
00005c  2001              MOVS     r0,#1
00005e  40a0              LSLS     r0,r0,r4
000060  b280              UXTH     r0,r0
000062  9000              STR      r0,[sp,#0]
;;;179      
;;;180      if ( od )
000064  f1bb0f00          CMP      r11,#0
000068  d004              BEQ      |L27.116|
;;;181        Atomic::Orr(gpio.OTYPER, mask);
00006a  1d28              ADDS     r0,r5,#4
00006c  9900              LDR      r1,[sp,#0]
00006e  f7fffffe          BL       _ZN6Atomic3OrrItEET_RVS1_S1_ ; T1 Atomic::Orr<unsigned short>(volatile T1&, T1)
000072  e003              B        |L27.124|
                  |L27.116|
;;;182      else
;;;183        Atomic::Bic(gpio.OTYPER, mask);
000074  1d28              ADDS     r0,r5,#4
000076  9900              LDR      r1,[sp,#0]
000078  f7fffffe          BL       _ZN6Atomic3BicItEET_RVS1_S1_ ; T1 Atomic::Bic<unsigned short>(volatile T1&, T1)
                  |L27.124|
;;;184    
;;;185      WrGpioSP(gpio, n, sp);
00007c  bf00              NOP      
00007e  ea4f0944          LSL      r9,r4,#1
000082  2003              MOVS     r0,#3
000084  fa00f209          LSL      r2,r0,r9
000088  f0060003          AND      r0,r6,#3
00008c  fa00f109          LSL      r1,r0,r9
000090  f1050008          ADD      r0,r5,#8
000094  f7fffffe          BL       _ZN6Atomic4BfldIjEET_RVS1_S1_S1_ ; T1 Atomic::Bfld<unsigned>(volatile T1&, T1, T1)
;;;186      WrGpioMD(gpio, n, MASK_GPIO_MODER_ALTFNC);     
000098  f04f0902          MOV      r9,#2
00009c  ea4f0a44          LSL      r10,r4,#1
0000a0  2003              MOVS     r0,#3
0000a2  fa00f20a          LSL      r2,r0,r10
0000a6  fa09f10a          LSL      r1,r9,r10
0000aa  4628              MOV      r0,r5
0000ac  f7fffffe          BL       _ZN6Atomic4BfldIjEET_RVS1_S1_S1_ ; T1 Atomic::Bfld<unsigned>(volatile T1&, T1, T1)
;;;187    }
0000b0  e8bd9fff          POP      {r0-r12,pc}
;;;188    
                          ENDP

                  |L27.180|
                          DCD      _ZZ8EnableAFRV14__regbank_GPIOjjbjE19__PRETTY_FUNCTION__ ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)::__PRETTY_FUNCTION__
                  |L27.184|
                          DCD      _ZZ8EnableAFRV14__regbank_GPIOjjbjEs_0 ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)::string (instance 2)
                  |L27.188|
                          DCD      _ZZ8EnableAFRV14__regbank_GPIOjjbjEs ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)::string
                  |L27.192|
                          DCD      _ZZ8EnableAFRV14__regbank_GPIOjjbjEs_1 ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)::string (instance 3)

                          AREA ||area_number.28||, COMGROUP=_Z8EnableAFRV14__regbank_GPIOjjbj, LINKORDER=||i._Z8EnableAFRV14__regbank_GPIOjjbj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z8EnableAFRV14__regbank_GPIOjjbj||
                          DCD      0x00000001

                          AREA ||t._ZN6Cortex10LoadLinkedIjEET_RVKS1_||, COMGROUP=_ZN6Cortex10LoadLinkedIjEET_RVKS1_, CODE, READONLY, ALIGN=1

                  _ZN6Cortex10LoadLinkedIjEET_RVKS1_ PROC ; T1 Cortex::LoadLinked<unsigned>(const volatile T1&)
;;;247      template<typename TYPE>
;;;248      FORCE_INLINE TYPE LoadLinked(TYPE const volatile & data) noexcept { DMB(); return ArmExclusive<sizeof(TYPE)>::LdrEx(data); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  f7fffffe          BL       _ZN6Cortex3DMBEv ; Cortex::DMB()
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj ; Cortex::ArmExclusive<(unsigned)4>::LdrEx(const volatile unsigned&)
00000e  4605              MOV      r5,r0
000010  4628              MOV      r0,r5
000012  bd70              POP      {r4-r6,pc}
;;;249      
                          ENDP


                          AREA ||area_number.36||, COMGROUP=_ZN6Cortex10LoadLinkedIjEET_RVKS1_, LINKORDER=||t._ZN6Cortex10LoadLinkedIjEET_RVKS1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Cortex10LoadLinkedIjEET_RVKS1_||
                          DCD      0x00000001

                          AREA ||t._ZN6Cortex15SaveConditionalIjEEbRVT_S1_||, COMGROUP=_ZN6Cortex15SaveConditionalIjEEbRVT_S1_, CODE, READONLY, ALIGN=1

                  _ZN6Cortex15SaveConditionalIjEEbRVT_S1_ PROC ; bool Cortex::SaveConditional<unsigned>(volatile T1&, T1)
;;;258      template<typename TYPE>
;;;259      FORCE_INLINE bool SaveConditional(TYPE volatile & data, TYPE const value) noexcept
000000  b570              PUSH     {r4-r6,lr}
;;;260      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;261        if ( ArmExclusive<sizeof(TYPE)>::StrEx(data, value) )
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj ; Cortex::ArmExclusive<(unsigned)4>::StrEx(volatile unsigned&, unsigned)
00000e  b108              CBZ      r0,|L42.20|
;;;262          return true;
000010  2001              MOVS     r0,#1
                  |L42.18|
;;;263    
;;;264        DSB();
;;;265          
;;;266        return false;
;;;267      }
000012  bd70              POP      {r4-r6,pc}
                  |L42.20|
000014  f7fffffe          BL       _ZN6Cortex3DSBEv ; Cortex::DSB()
000018  2000              MOVS     r0,#0                 ;266
00001a  e7fa              B        |L42.18|
;;;268      
                          ENDP


                          AREA ||area_number.43||, COMGROUP=_ZN6Cortex15SaveConditionalIjEEbRVT_S1_, LINKORDER=||t._ZN6Cortex15SaveConditionalIjEEbRVT_S1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.43||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Cortex15SaveConditionalIjEEbRVT_S1_||
                          DCD      0x00000001

                          AREA ||i._Z14AHBClockEnablej||, COMGROUP=_Z14AHBClockEnablej, CODE, READONLY, ALIGN=2

                  _Z14AHBClockEnablej PROC ; AHBClockEnable(unsigned)
;;;332    /// \param[in] num kennzeichnet die AHB-Periphery.
;;;333    inline void AHBClockEnable(WORD const num) noexcept
000000  b570              PUSH     {r4-r6,lr}
;;;334    {
000002  4604              MOV      r4,r0
;;;335      auto const i = num >> PERIPHERY_INDX_POS;
000004  0a25              LSRS     r5,r4,#8
;;;336      auto const n = num % 32U;
000006  f004061f          AND      r6,r4,#0x1f
;;;337      
;;;338      Atomic::Orr(rbRCC.AHBENR[i], 1U << n);
00000a  2201              MOVS     r2,#1
00000c  fa02f106          LSL      r1,r2,r6
000010  4a02              LDR      r2,|L49.28|
000012  eb020085          ADD      r0,r2,r5,LSL #2
000016  f7fffffe          BL       _ZN6Atomic3OrrIjEET_RVS1_S1_ ; T1 Atomic::Orr<unsigned>(volatile T1&, T1)
;;;339    }
00001a  bd70              POP      {r4-r6,pc}
;;;340    
                          ENDP

                  |L49.28|
                          DCD      rbRCC+0x30

                          AREA ||area_number.50||, COMGROUP=_Z14AHBClockEnablej, LINKORDER=||i._Z14AHBClockEnablej||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.50||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z14AHBClockEnablej||
                          DCD      0x00000001

                          AREA ||i._Z14APBClockEnablej||, COMGROUP=_Z14APBClockEnablej, CODE, READONLY, ALIGN=2

                  _Z14APBClockEnablej PROC ; APBClockEnable(unsigned)
;;;342    /// \param[in] num kennzeichnet die APB-Periphery.
;;;343    inline void APBClockEnable(WORD const num) noexcept
000000  b570              PUSH     {r4-r6,lr}
;;;344    {
000002  4604              MOV      r4,r0
;;;345      auto const i = num >> PERIPHERY_INDX_POS;
000004  0a25              LSRS     r5,r4,#8
;;;346      auto const n = num % 32U;
000006  f004061f          AND      r6,r4,#0x1f
;;;347      
;;;348      Atomic::Orr(rbRCC.APBENR[i], 1U << n);
00000a  2201              MOVS     r2,#1
00000c  fa02f106          LSL      r1,r2,r6
000010  4a02              LDR      r2,|L56.28|
000012  eb020085          ADD      r0,r2,r5,LSL #2
000016  f7fffffe          BL       _ZN6Atomic3OrrIjEET_RVS1_S1_ ; T1 Atomic::Orr<unsigned>(volatile T1&, T1)
;;;349    }
00001a  bd70              POP      {r4-r6,pc}
;;;350    
                          ENDP

                  |L56.28|
                          DCD      rbRCC+0x40

                          AREA ||area_number.57||, COMGROUP=_Z14APBClockEnablej, LINKORDER=||i._Z14APBClockEnablej||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.57||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z14APBClockEnablej||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic3BicItEET_RVS1_S1_||, COMGROUP=_ZN6Atomic3BicItEET_RVS1_S1_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic3BicItEET_RVS1_S1_ PROC ; T1 Atomic::Bic<unsigned short>(volatile T1&, T1)
;;;189      /// \tparam TYPE ist der Datentyp der atomaren Operation.
;;;190      template<typename TYPE> inline TYPE Bic(TYPE volatile & data, TYPE const mask ) noexcept { return And(data, (TYPE)(~mask)); }
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  43e0              MVNS     r0,r4
000008  b281              UXTH     r1,r0
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       _ZN6Atomic3AndItEET_RVS1_S1_ ; T1 Atomic::And<unsigned short>(volatile T1&, T1)
000010  4606              MOV      r6,r0
000012  4630              MOV      r0,r6
000014  bd70              POP      {r4-r6,pc}
;;;191    
                          ENDP


                          AREA ||area_number.64||, COMGROUP=_ZN6Atomic3BicItEET_RVS1_S1_, LINKORDER=||t._ZN6Atomic3BicItEET_RVS1_S1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.64||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic3BicItEET_RVS1_S1_||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic3OrrItEET_RVS1_S1_||, COMGROUP=_ZN6Atomic3OrrItEET_RVS1_S1_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic3OrrItEET_RVS1_S1_ PROC ; T1 Atomic::Orr<unsigned short>(volatile T1&, T1)
;;;182      /// \tparam TYPE ist der Datentyp der atomaren Operation.
;;;183      template<typename TYPE> inline TYPE Orr(TYPE volatile & data, TYPE const mask ) noexcept { return Modify<TYPE, BinOpType::opOrr>(data, mask); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6Atomic6ModifyItLNS_9BinOpTypeE5EEET_RVS2_S2_ ; T1 Atomic::Modify<unsigned short, (Atomic::BinOpType)5>(volatile T1&, T1)
00000e  4606              MOV      r6,r0
000010  4630              MOV      r0,r6
000012  bd70              POP      {r4-r6,pc}
;;;184    
                          ENDP


                          AREA ||area_number.71||, COMGROUP=_ZN6Atomic3OrrItEET_RVS1_S1_, LINKORDER=||t._ZN6Atomic3OrrItEET_RVS1_S1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.71||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic3OrrItEET_RVS1_S1_||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj, CODE, READONLY, ALIGN=1

                  _ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj PROC ; Cortex::ArmExclusive<(unsigned)4>::LdrEx(const volatile unsigned&)
;;;67         
;;;68         static WORD LdrEx(WORD const volatile & data)                   noexcept { return _LdrExW(&data); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _LdrExW
00000a  4605              MOV      r5,r0
00000c  4628              MOV      r0,r5
00000e  bd70              POP      {r4-r6,pc}
;;;69         static bool StrEx(WORD       volatile & data, WORD const value) noexcept { return _StrExW(&data, value) != 0U; }
                          ENDP


                          AREA ||area_number.78||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj, LINKORDER=||i._ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.78||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj||

                          AREA ||.ARM.extab||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj, DATA, READONLY, ALIGN=2

                          REQUIRE __cxa_call_unexpected
                  ||.extab._ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj||
                          DCD      0x80aab0b0
000004  0002000b          DCW      0x0002,0x000b
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||i._ZN6Cortex3DMBEv||, COMGROUP=_ZN6Cortex3DMBEv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex3DMBEv PROC ; Cortex::DMB()
;;;121    
;;;122      FORCE_INLINE void DMB() noexcept { SCHEDULE_BARRIER(); __dmb(0xF); SCHEDULE_BARRIER(); }  
000000  bf00              NOP      
000002  bf00              NOP      
000004  f3bf8f5f          DMB      
000008  bf00              NOP      
00000a  bf00              NOP      
00000c  4770              BX       lr
;;;123      FORCE_INLINE void DSB() noexcept { SCHEDULE_BARRIER(); __dsb(0xF); SCHEDULE_BARRIER(); }
                          ENDP


                          AREA ||area_number.86||, COMGROUP=_ZN6Cortex3DMBEv, LINKORDER=||i._ZN6Cortex3DMBEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.86||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex3DMBEv||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex3DSBEv||, COMGROUP=_ZN6Cortex3DSBEv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex3DSBEv PROC ; Cortex::DSB()
;;;122      FORCE_INLINE void DMB() noexcept { SCHEDULE_BARRIER(); __dmb(0xF); SCHEDULE_BARRIER(); }  
;;;123      FORCE_INLINE void DSB() noexcept { SCHEDULE_BARRIER(); __dsb(0xF); SCHEDULE_BARRIER(); }
000000  bf00              NOP      
000002  bf00              NOP      
000004  f3bf8f4f          DSB      
000008  bf00              NOP      
00000a  bf00              NOP      
00000c  4770              BX       lr
;;;124      FORCE_INLINE void ISB() noexcept { SCHEDULE_BARRIER(); __isb(0xF); SCHEDULE_BARRIER(); }
                          ENDP


                          AREA ||area_number.93||, COMGROUP=_ZN6Cortex3DSBEv, LINKORDER=||i._ZN6Cortex3DSBEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.93||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex3DSBEv||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj, CODE, READONLY, ALIGN=1

                  _ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj PROC ; Cortex::ArmExclusive<(unsigned)4>::StrEx(volatile unsigned&, unsigned)
;;;68         static WORD LdrEx(WORD const volatile & data)                   noexcept { return _LdrExW(&data); }
;;;69         static bool StrEx(WORD       volatile & data, WORD const value) noexcept { return _StrExW(&data, value) != 0U; }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _StrExW
00000e  b108              CBZ      r0,|L99.20|
000010  2001              MOVS     r0,#1
000012  e000              B        |L99.22|
                  |L99.20|
000014  2000              MOVS     r0,#0
                  |L99.22|
000016  4606              MOV      r6,r0
000018  4630              MOV      r0,r6
00001a  bd70              POP      {r4-r6,pc}
;;;70     
                          ENDP


                          AREA ||area_number.100||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj, LINKORDER=||i._ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.100||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj||

                          AREA ||area_number.101||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.101||, ||.ARM.extab||
                          REQUIRE __cxa_call_unexpected
                  ||.extab._ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj||
                          DCD      0x80aab0b0
000004  0002000f          DCW      0x0002,0x000f
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||t._ZN6Atomic3OrrIjEET_RVS1_S1_||, COMGROUP=_ZN6Atomic3OrrIjEET_RVS1_S1_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic3OrrIjEET_RVS1_S1_ PROC ; T1 Atomic::Orr<unsigned>(volatile T1&, T1)
;;;182      /// \tparam TYPE ist der Datentyp der atomaren Operation.
;;;183      template<typename TYPE> inline TYPE Orr(TYPE volatile & data, TYPE const mask ) noexcept { return Modify<TYPE, BinOpType::opOrr>(data, mask); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6Atomic6ModifyIjLNS_9BinOpTypeE5EEET_RVS2_S2_ ; T1 Atomic::Modify<unsigned, (Atomic::BinOpType)5>(volatile T1&, T1)
00000e  4606              MOV      r6,r0
000010  4630              MOV      r0,r6
000012  bd70              POP      {r4-r6,pc}
;;;184    
                          ENDP


                          AREA ||area_number.108||, COMGROUP=_ZN6Atomic3OrrIjEET_RVS1_S1_, LINKORDER=||t._ZN6Atomic3OrrIjEET_RVS1_S1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.108||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic3OrrIjEET_RVS1_S1_||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic3AndItEET_RVS1_S1_||, COMGROUP=_ZN6Atomic3AndItEET_RVS1_S1_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic3AndItEET_RVS1_S1_ PROC ; T1 Atomic::And<unsigned short>(volatile T1&, T1)
;;;175      /// \tparam TYPE ist der Datentyp der atomaren Operation.
;;;176      template<typename TYPE> inline TYPE And(TYPE volatile & data, TYPE const mask ) noexcept { return Modify<TYPE, BinOpType::opAnd>(data, mask); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6Atomic6ModifyItLNS_9BinOpTypeE4EEET_RVS2_S2_ ; T1 Atomic::Modify<unsigned short, (Atomic::BinOpType)4>(volatile T1&, T1)
00000e  4606              MOV      r6,r0
000010  4630              MOV      r0,r6
000012  bd70              POP      {r4-r6,pc}
;;;177    
                          ENDP


                          AREA ||area_number.115||, COMGROUP=_ZN6Atomic3AndItEET_RVS1_S1_, LINKORDER=||t._ZN6Atomic3AndItEET_RVS1_S1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.115||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic3AndItEET_RVS1_S1_||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic6ModifyItLNS_9BinOpTypeE5EEET_RVS2_S2_||, COMGROUP=_ZN6Atomic6ModifyItLNS_9BinOpTypeE5EEET_RVS2_S2_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic6ModifyItLNS_9BinOpTypeE5EEET_RVS2_S2_ PROC ; T1 Atomic::Modify<unsigned short, (Atomic::BinOpType)5>(volatile T1&, T1)
;;;54       template<typename TYPE, BinOpType OP> 
;;;55       inline TYPE Modify(TYPE volatile & data, TYPE const operand) noexcept
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;56       {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;57         TYPE result;
;;;58         
;;;59         do 
000008  bf00              NOP      
                  |L121.10|
;;;60         {
;;;61           result = Cortex::LoadLinked(data);
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       _ZN6Cortex10LoadLinkedItEET_RVKS1_ ; T1 Cortex::LoadLinked<unsigned short>(const volatile T1&)
000010  4604              MOV      r4,r0
;;;62         } while ( Cortex::SaveConditional(data, BinOp<TYPE, OP>::Calc(result, operand)) );
000012  4639              MOV      r1,r7
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       _ZN6Atomic5BinOpItLNS_9BinOpTypeE5EE4CalcEtt ; Atomic::BinOp<unsigned short, (Atomic::BinOpType)5>::Calc(unsigned short, unsigned short)
00001a  4680              MOV      r8,r0
00001c  4641              MOV      r1,r8
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       _ZN6Cortex15SaveConditionalItEEbRVT_S1_ ; bool Cortex::SaveConditional<unsigned short>(volatile T1&, T1)
000024  2800              CMP      r0,#0
000026  d1f0              BNE      |L121.10|
;;;63         
;;;64         return result;
000028  4625              MOV      r5,r4
00002a  4628              MOV      r0,r5
;;;65       }
00002c  e8bd81f0          POP      {r4-r8,pc}
;;;66     
                          ENDP


                          AREA ||area_number.122||, COMGROUP=_ZN6Atomic6ModifyItLNS_9BinOpTypeE5EEET_RVS2_S2_, LINKORDER=||t._ZN6Atomic6ModifyItLNS_9BinOpTypeE5EEET_RVS2_S2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.122||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic6ModifyItLNS_9BinOpTypeE5EEET_RVS2_S2_||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic6ModifyIjLNS_9BinOpTypeE5EEET_RVS2_S2_||, COMGROUP=_ZN6Atomic6ModifyIjLNS_9BinOpTypeE5EEET_RVS2_S2_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic6ModifyIjLNS_9BinOpTypeE5EEET_RVS2_S2_ PROC ; T1 Atomic::Modify<unsigned, (Atomic::BinOpType)5>(volatile T1&, T1)
;;;54       template<typename TYPE, BinOpType OP> 
;;;55       inline TYPE Modify(TYPE volatile & data, TYPE const operand) noexcept
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;56       {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;57         TYPE result;
;;;58         
;;;59         do 
000008  bf00              NOP      
                  |L128.10|
;;;60         {
;;;61           result = Cortex::LoadLinked(data);
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       _ZN6Cortex10LoadLinkedIjEET_RVKS1_ ; T1 Cortex::LoadLinked<unsigned>(const volatile T1&)
000010  4604              MOV      r4,r0
;;;62         } while ( Cortex::SaveConditional(data, BinOp<TYPE, OP>::Calc(result, operand)) );
000012  4639              MOV      r1,r7
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       _ZN6Atomic5BinOpIjLNS_9BinOpTypeE5EE4CalcEjj ; Atomic::BinOp<unsigned, (Atomic::BinOpType)5>::Calc(unsigned, unsigned)
00001a  4680              MOV      r8,r0
00001c  4641              MOV      r1,r8
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       _ZN6Cortex15SaveConditionalIjEEbRVT_S1_ ; bool Cortex::SaveConditional<unsigned>(volatile T1&, T1)
000024  2800              CMP      r0,#0
000026  d1f0              BNE      |L128.10|
;;;63         
;;;64         return result;
000028  4625              MOV      r5,r4
00002a  4628              MOV      r0,r5
;;;65       }
00002c  e8bd81f0          POP      {r4-r8,pc}
;;;66     
                          ENDP


                          AREA ||area_number.129||, COMGROUP=_ZN6Atomic6ModifyIjLNS_9BinOpTypeE5EEET_RVS2_S2_, LINKORDER=||t._ZN6Atomic6ModifyIjLNS_9BinOpTypeE5EEET_RVS2_S2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.129||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic6ModifyIjLNS_9BinOpTypeE5EEET_RVS2_S2_||
                          DCD      0x00000001

                          AREA ||t._ZN6Cortex10LoadLinkedItEET_RVKS1_||, COMGROUP=_ZN6Cortex10LoadLinkedItEET_RVKS1_, CODE, READONLY, ALIGN=1

                  _ZN6Cortex10LoadLinkedItEET_RVKS1_ PROC ; T1 Cortex::LoadLinked<unsigned short>(const volatile T1&)
;;;247      template<typename TYPE>
;;;248      FORCE_INLINE TYPE LoadLinked(TYPE const volatile & data) noexcept { DMB(); return ArmExclusive<sizeof(TYPE)>::LdrEx(data); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  f7fffffe          BL       _ZN6Cortex3DMBEv ; Cortex::DMB()
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt ; Cortex::ArmExclusive<(unsigned)2>::LdrEx(const volatile unsigned short&)
00000e  4605              MOV      r5,r0
000010  4628              MOV      r0,r5
000012  bd70              POP      {r4-r6,pc}
;;;249      
                          ENDP


                          AREA ||area_number.136||, COMGROUP=_ZN6Cortex10LoadLinkedItEET_RVKS1_, LINKORDER=||t._ZN6Cortex10LoadLinkedItEET_RVKS1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.136||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Cortex10LoadLinkedItEET_RVKS1_||
                          DCD      0x00000001

                          AREA ||t._ZN6Cortex15SaveConditionalItEEbRVT_S1_||, COMGROUP=_ZN6Cortex15SaveConditionalItEEbRVT_S1_, CODE, READONLY, ALIGN=1

                  _ZN6Cortex15SaveConditionalItEEbRVT_S1_ PROC ; bool Cortex::SaveConditional<unsigned short>(volatile T1&, T1)
;;;258      template<typename TYPE>
;;;259      FORCE_INLINE bool SaveConditional(TYPE volatile & data, TYPE const value) noexcept
000000  b570              PUSH     {r4-r6,lr}
;;;260      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;261        if ( ArmExclusive<sizeof(TYPE)>::StrEx(data, value) )
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt ; Cortex::ArmExclusive<(unsigned)2>::StrEx(volatile unsigned short&, unsigned short)
00000e  b108              CBZ      r0,|L142.20|
;;;262          return true;
000010  2001              MOVS     r0,#1
                  |L142.18|
;;;263    
;;;264        DSB();
;;;265          
;;;266        return false;
;;;267      }
000012  bd70              POP      {r4-r6,pc}
                  |L142.20|
000014  f7fffffe          BL       _ZN6Cortex3DSBEv ; Cortex::DSB()
000018  2000              MOVS     r0,#0                 ;266
00001a  e7fa              B        |L142.18|
;;;268      
                          ENDP


                          AREA ||area_number.143||, COMGROUP=_ZN6Cortex15SaveConditionalItEEbRVT_S1_, LINKORDER=||t._ZN6Cortex15SaveConditionalItEEbRVT_S1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.143||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Cortex15SaveConditionalItEEbRVT_S1_||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic6ModifyItLNS_9BinOpTypeE4EEET_RVS2_S2_||, COMGROUP=_ZN6Atomic6ModifyItLNS_9BinOpTypeE4EEET_RVS2_S2_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic6ModifyItLNS_9BinOpTypeE4EEET_RVS2_S2_ PROC ; T1 Atomic::Modify<unsigned short, (Atomic::BinOpType)4>(volatile T1&, T1)
;;;54       template<typename TYPE, BinOpType OP> 
;;;55       inline TYPE Modify(TYPE volatile & data, TYPE const operand) noexcept
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;56       {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;57         TYPE result;
;;;58         
;;;59         do 
000008  bf00              NOP      
                  |L149.10|
;;;60         {
;;;61           result = Cortex::LoadLinked(data);
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       _ZN6Cortex10LoadLinkedItEET_RVKS1_ ; T1 Cortex::LoadLinked<unsigned short>(const volatile T1&)
000010  4604              MOV      r4,r0
;;;62         } while ( Cortex::SaveConditional(data, BinOp<TYPE, OP>::Calc(result, operand)) );
000012  4639              MOV      r1,r7
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       _ZN6Atomic5BinOpItLNS_9BinOpTypeE4EE4CalcEtt ; Atomic::BinOp<unsigned short, (Atomic::BinOpType)4>::Calc(unsigned short, unsigned short)
00001a  4680              MOV      r8,r0
00001c  4641              MOV      r1,r8
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       _ZN6Cortex15SaveConditionalItEEbRVT_S1_ ; bool Cortex::SaveConditional<unsigned short>(volatile T1&, T1)
000024  2800              CMP      r0,#0
000026  d1f0              BNE      |L149.10|
;;;63         
;;;64         return result;
000028  4625              MOV      r5,r4
00002a  4628              MOV      r0,r5
;;;65       }
00002c  e8bd81f0          POP      {r4-r8,pc}
;;;66     
                          ENDP


                          AREA ||area_number.150||, COMGROUP=_ZN6Atomic6ModifyItLNS_9BinOpTypeE4EEET_RVS2_S2_, LINKORDER=||t._ZN6Atomic6ModifyItLNS_9BinOpTypeE4EEET_RVS2_S2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.150||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic6ModifyItLNS_9BinOpTypeE4EEET_RVS2_S2_||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic5BinOpItLNS_9BinOpTypeE5EE4CalcEtt||, COMGROUP=_ZN6Atomic5BinOpItLNS_9BinOpTypeE5EE4CalcEtt, CODE, READONLY, ALIGN=1

                  _ZN6Atomic5BinOpItLNS_9BinOpTypeE5EE4CalcEtt PROC ; Atomic::BinOp<unsigned short, (Atomic::BinOpType)5>::Calc(unsigned short, unsigned short)
;;;41       template<typename TYPE> struct BinOp<TYPE, BinOpType::opAnd> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l & r; } };
;;;42       template<typename TYPE> struct BinOp<TYPE, BinOpType::opOrr> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l | r; } };
000000  4602              MOV      r2,r0
000002  ea420001          ORR      r0,r2,r1
000006  4770              BX       lr
;;;43       
                          ENDP


                          AREA ||area_number.157||, COMGROUP=_ZN6Atomic5BinOpItLNS_9BinOpTypeE5EE4CalcEtt, LINKORDER=||t._ZN6Atomic5BinOpItLNS_9BinOpTypeE5EE4CalcEtt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.157||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic5BinOpItLNS_9BinOpTypeE5EE4CalcEtt||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic5BinOpIjLNS_9BinOpTypeE5EE4CalcEjj||, COMGROUP=_ZN6Atomic5BinOpIjLNS_9BinOpTypeE5EE4CalcEjj, CODE, READONLY, ALIGN=1

                  _ZN6Atomic5BinOpIjLNS_9BinOpTypeE5EE4CalcEjj PROC ; Atomic::BinOp<unsigned, (Atomic::BinOpType)5>::Calc(unsigned, unsigned)
;;;41       template<typename TYPE> struct BinOp<TYPE, BinOpType::opAnd> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l & r; } };
;;;42       template<typename TYPE> struct BinOp<TYPE, BinOpType::opOrr> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l | r; } };
000000  4602              MOV      r2,r0
000002  ea420001          ORR      r0,r2,r1
000006  4770              BX       lr
;;;43       
                          ENDP


                          AREA ||area_number.164||, COMGROUP=_ZN6Atomic5BinOpIjLNS_9BinOpTypeE5EE4CalcEjj, LINKORDER=||t._ZN6Atomic5BinOpIjLNS_9BinOpTypeE5EE4CalcEjj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.164||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic5BinOpIjLNS_9BinOpTypeE5EE4CalcEjj||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt||, COMGROUP=_ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt, CODE, READONLY, ALIGN=1

                  _ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt PROC ; Cortex::ArmExclusive<(unsigned)2>::LdrEx(const volatile unsigned short&)
;;;83         
;;;84         static HWRD LdrEx(HWRD const volatile & data)                   noexcept { return _LdrExH(&data); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _LdrExH
00000a  4605              MOV      r5,r0
00000c  4628              MOV      r0,r5
00000e  bd70              POP      {r4-r6,pc}
;;;85         static bool StrEx(HWRD       volatile & data, HWRD const value) noexcept { return _StrExH(&data, value) != 0U; }
                          ENDP


                          AREA ||area_number.171||, COMGROUP=_ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt, LINKORDER=||i._ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.171||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt||

                          AREA ||area_number.172||, COMGROUP=_ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.172||, ||.ARM.extab||
                          REQUIRE __cxa_call_unexpected
                  ||.extab._ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt||
                          DCD      0x80aab0b0
000004  0002000b          DCW      0x0002,0x000b
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||t._ZN6Atomic5BinOpItLNS_9BinOpTypeE4EE4CalcEtt||, COMGROUP=_ZN6Atomic5BinOpItLNS_9BinOpTypeE4EE4CalcEtt, CODE, READONLY, ALIGN=1

                  _ZN6Atomic5BinOpItLNS_9BinOpTypeE4EE4CalcEtt PROC ; Atomic::BinOp<unsigned short, (Atomic::BinOpType)4>::Calc(unsigned short, unsigned short)
;;;40       template<typename TYPE> struct BinOp<TYPE, BinOpType::opMul> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l * r; } };
;;;41       template<typename TYPE> struct BinOp<TYPE, BinOpType::opAnd> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l & r; } };
000000  4602              MOV      r2,r0
000002  ea020001          AND      r0,r2,r1
000006  4770              BX       lr
;;;42       template<typename TYPE> struct BinOp<TYPE, BinOpType::opOrr> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l | r; } };
                          ENDP


                          AREA ||area_number.179||, COMGROUP=_ZN6Atomic5BinOpItLNS_9BinOpTypeE4EE4CalcEtt, LINKORDER=||t._ZN6Atomic5BinOpItLNS_9BinOpTypeE4EE4CalcEtt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.179||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic5BinOpItLNS_9BinOpTypeE4EE4CalcEtt||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt||, COMGROUP=_ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt, CODE, READONLY, ALIGN=1

                  _ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt PROC ; Cortex::ArmExclusive<(unsigned)2>::StrEx(volatile unsigned short&, unsigned short)
;;;84         static HWRD LdrEx(HWRD const volatile & data)                   noexcept { return _LdrExH(&data); }
;;;85         static bool StrEx(HWRD       volatile & data, HWRD const value) noexcept { return _StrExH(&data, value) != 0U; }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _StrExH
00000e  b108              CBZ      r0,|L185.20|
000010  2001              MOVS     r0,#1
000012  e000              B        |L185.22|
                  |L185.20|
000014  2000              MOVS     r0,#0
                  |L185.22|
000016  4606              MOV      r6,r0
000018  4630              MOV      r0,r6
00001a  bd70              POP      {r4-r6,pc}
;;;86       };
                          ENDP


                          AREA ||area_number.186||, COMGROUP=_ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt, LINKORDER=||i._ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.186||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt||

                          AREA ||area_number.187||, COMGROUP=_ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.187||, ||.ARM.extab||
                          REQUIRE __cxa_call_unexpected
                  ||.extab._ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt||
                          DCD      0x80aab0b0
000004  0002000f          DCW      0x0002,0x000f
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.constdata__ZZ8EnableAFRV14__regbank_GPIOjjbjE19__PRETTY_FUNCTION__||, COMGROUP=_ZZ8EnableAFRV14__regbank_GPIOjjbjE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZ8EnableAFRV14__regbank_GPIOjjbjE19__PRETTY_FUNCTION__ ; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  20456e61          DCB      0x20,0x45,0x6e,0x61
000008  626c6541          DCB      0x62,0x6c,0x65,0x41
00000c  4628766f          DCB      0x46,0x28,0x76,0x6f
000010  6c617469          DCB      0x6c,0x61,0x74,0x69
000014  6c65205f          DCB      0x6c,0x65,0x20,0x5f
000018  5f726567          DCB      0x5f,0x72,0x65,0x67
00001c  62616e6b          DCB      0x62,0x61,0x6e,0x6b
000020  5f475049          DCB      0x5f,0x47,0x50,0x49
000024  4f20262c          DCB      0x4f,0x20,0x26,0x2c
000028  20756e73          DCB      0x20,0x75,0x6e,0x73
00002c  69676e65          DCB      0x69,0x67,0x6e,0x65
000030  6420696e          DCB      0x64,0x20,0x69,0x6e
000034  742c2075          DCB      0x74,0x2c,0x20,0x75
000038  6e736967          DCB      0x6e,0x73,0x69,0x67
00003c  6e656420          DCB      0x6e,0x65,0x64,0x20
000040  696e742c          DCB      0x69,0x6e,0x74,0x2c
000044  20626f6f          DCB      0x20,0x62,0x6f,0x6f
000048  6c2c2075          DCB      0x6c,0x2c,0x20,0x75
00004c  6e736967          DCB      0x6e,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e7429          DCB      0x69,0x6e,0x74,0x29
000058  00                DCB      0x00

                          AREA ||i.__ARM_common_noexcept_landing||, COMGROUP=__ARM_common_noexcept_landing, CODE, READONLY, ALIGN=1

                  __ARM_common_noexcept_landing PROC
000000  f7ffbffe          B.W      __cxa_call_terminate
                          ENDP


                          AREA ||area_number.196||, COMGROUP=__ARM_common_noexcept_landing, LINKORDER=||i.__ARM_common_noexcept_landing||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.196||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__ARM_common_noexcept_landing||
                          DCD      0x00000001
