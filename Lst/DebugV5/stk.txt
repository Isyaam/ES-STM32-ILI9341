; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--cpp11 --list --debug -c --asm --interleave --exceptions --protect_stack -o.\out\debugv5\stk.o --asm_dir=.\Lst\DebugV5\ --list_dir=.\Lst\DebugV5\ --depend=.\out\debugv5\stk.d --cpu=Cortex-M4 --apcs=interwork --no_unaligned_access -O0 --diag_suppress=9931 -I.\Inc -I.\Inc\Debug -I.\Inc\Cortex -I.\Inc\Drivers -I.\Inc\Utilities -D__UVISION_VERSION=527 -DSTM32F429xx -DCORTEX_M=4 -DDEBUG --omf_browse=.\out\debugv5\stk.crf --no_rtti Src\Cortex\STK.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  IRQ_STK PROC
;;;62     
;;;63     extern "C" void IRQ_STK(void)
000000  b510              PUSH     {r4,lr}
;;;64     {
;;;65       WORD const csr = rbSTK.CSR; // dummy read to reset
000002  483b              LDR      r0,|L1.240|
000004  6804              LDR      r4,[r0,#0]  ; rbSTK
;;;66     
;;;67       if ( Atomic::Incr(ticks.l) == ~0U )
000006  483b              LDR      r0,|L1.244|
000008  f7fffffe          BL       _ZN6Atomic4IncrIjEET_RVS1_ ; T1 Atomic::Incr<unsigned>(volatile T1&)
00000c  1c40              ADDS     r0,r0,#1
00000e  b920              CBNZ     r0,|L1.26|
;;;68         ticks.h++;
000010  4838              LDR      r0,|L1.244|
000012  6840              LDR      r0,[r0,#4]  ; ticks
000014  1c40              ADDS     r0,r0,#1
000016  4937              LDR      r1,|L1.244|
000018  6048              STR      r0,[r1,#4]  ; ticks
                  |L1.26|
;;;69     
;;;70       STACK_CHECK();
00001a  f7fffffe          BL       _Z10StackCheckv ; StackCheck()
;;;71     }
00001e  bd10              POP      {r4,pc}
;;;72     
                          ENDP

                  _ZN6Cortex11GetFineTimeEj PROC ; Cortex::GetFineTime(unsigned)
;;;34     
;;;35     UINT64 Cortex::GetFineTime(UINT32 const scf) noexcept 
000020  e92d47f0          PUSH     {r4-r10,lr}
;;;36     {
000024  4680              MOV      r8,r0
;;;37       ASSERT(IsInterruptableBySTK());
000026  f7fffffe          BL       _ZN6Cortex20IsInterruptableBySTKEv ; Cortex::IsInterruptableBySTK()
00002a  b100              CBZ      r0,|L1.46|
00002c  e005              B        |L1.58|
                  |L1.46|
00002e  4b32              LDR      r3,|L1.248|
000030  2225              MOVS     r2,#0x25
000032  a132              ADR      r1,|L1.252|
000034  a033              ADR      r0,|L1.260|
000036  f7fffffe          BL       _Z15AssertionFailedPKcS0_jS0_ ; AssertionFailed(const char*, const char*, unsigned, const char*)
                  |L1.58|
;;;38       ASSERT(IsPrivileged()); 
00003a  f7fffffe          BL       _ZN6Cortex12IsPrivilegedEv ; Cortex::IsPrivileged()
00003e  b100              CBZ      r0,|L1.66|
000040  e005              B        |L1.78|
                  |L1.66|
000042  4b2d              LDR      r3,|L1.248|
000044  2226              MOVS     r2,#0x26
000046  a12d              ADR      r1,|L1.252|
000048  a034              ADR      r0,|L1.284|
00004a  f7fffffe          BL       _Z15AssertionFailedPKcS0_jS0_ ; AssertionFailed(const char*, const char*, unsigned, const char*)
                  |L1.78|
;;;39       
;;;40       WORD tref;
;;;41       UINT64 fine; 
;;;42      
;;;43       do {
00004e  bf00              NOP      
                  |L1.80|
;;;44         fine = STK_FineTime(tref = ticks.l, scf);
000050  4928              LDR      r1,|L1.244|
000052  f8d19000          LDR      r9,[r1,#0]  ; ticks
000056  4648              MOV      r0,r9
000058  4641              MOV      r1,r8
00005a  f7fffffe          BL       _ZN28_INTERNAL_7_STK_cpp_9e11975f12STK_FineTimeEjj ; [local to STK_cpp]::STK_FineTime(unsigned, unsigned)
00005e  4604              MOV      r4,r0
000060  460d              MOV      r5,r1
;;;45       } while ( tref != ticks.l ); 
000062  4824              LDR      r0,|L1.244|
000064  6800              LDR      r0,[r0,#0]  ; ticks
000066  4548              CMP      r0,r9
000068  d1f2              BNE      |L1.80|
;;;46     
;;;47       return fine;
00006a  4626              MOV      r6,r4
00006c  462f              MOV      r7,r5
00006e  4630              MOV      r0,r6
000070  4639              MOV      r1,r7
;;;48     }
000072  e8bd87f0          POP      {r4-r10,pc}
;;;49     
                          ENDP

                  _ZN6Cortex12GetWideTicksEv PROC ; Cortex::GetWideTicks()
;;;50     UINT64 Cortex::GetWideTicks() noexcept
000076  b51c              PUSH     {r2-r4,lr}
;;;51     {
;;;52       TicksType result;
;;;53     
;;;54       do {
000078  bf00              NOP      
                  |L1.122|
;;;55         result.x = ticks.x;
00007a  4a1e              LDR      r2,|L1.244|
00007c  6813              LDR      r3,[r2,#0]  ; ticks
00007e  6852              LDR      r2,[r2,#4]  ; ticks
000080  e9cd3200          STRD     r3,r2,[sp,#0]
;;;56       } while ( ticks.h != result.h );
000084  4a1b              LDR      r2,|L1.244|
000086  6852              LDR      r2,[r2,#4]  ; ticks
000088  9b01              LDR      r3,[sp,#4]
00008a  429a              CMP      r2,r3
00008c  d1f5              BNE      |L1.122|
;;;57       
;;;58       return result.x;
00008e  e9dd0100          LDRD     r0,r1,[sp,#0]
;;;59     }
000092  bd1c              POP      {r2-r4,pc}
;;;60     
                          ENDP

                  _ZN6Cortex8GetTicksEv PROC ; Cortex::GetTicks()
;;;61     unsigned Cortex::GetTicks() noexcept { return ticks.l; }
000094  4917              LDR      r1,|L1.244|
000096  6808              LDR      r0,[r1,#0]  ; ticks
000098  4770              BX       lr
;;;62     
                          ENDP

                  _ZN28_INTERNAL_7_STK_cpp_9e11975f12STK_FineTimeEjj PROC ; [local to STK_cpp]::STK_FineTime(unsigned, unsigned)
;;;24     
;;;25     static inline UINT64 STK_FineTime(WORD const t, WORD const s) noexcept
00009a  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;26     { 
00009e  b083              SUB      sp,sp,#0xc
0000a0  460c              MOV      r4,r1
;;;27       WORD const r = rbSTK.RVR;
0000a2  4813              LDR      r0,|L1.240|
0000a4  f8d0b004          LDR      r11,[r0,#4]  ; rbSTK
;;;28       WORD const n = r - rbSTK.CVR;
0000a8  6880              LDR      r0,[r0,#8]  ; rbSTK
0000aa  ebab0900          SUB      r9,r11,r0
;;;29       WORD const d = r + 1U;
0000ae  f10b0a01          ADD      r10,r11,#1
;;;30       auto const x = UMULL(t, d);
0000b2  4651              MOV      r1,r10
0000b4  9803              LDR      r0,[sp,#0xc]
0000b6  f7fffffe          BL       _Z5UMULLjj ; UMULL(unsigned, unsigned)
0000ba  e9cd0100          STRD     r0,r1,[sp,#0]
;;;31       
;;;32       return ((x + n) * s) / d;
0000be  e9dd0100          LDRD     r0,r1,[sp,#0]
0000c2  eb100209          ADDS     r2,r0,r9
0000c6  f1410100          ADC      r1,r1,#0
0000ca  2300              MOVS     r3,#0
0000cc  fba27c04          UMULL    r7,r12,r2,r4
0000d0  fb01c104          MLA      r1,r1,r4,r12
0000d4  fb021103          MLA      r1,r2,r3,r1
0000d8  4652              MOV      r2,r10
0000da  4638              MOV      r0,r7
0000dc  f7fffffe          BL       __aeabi_uldivmod
0000e0  4605              MOV      r5,r0
0000e2  460e              MOV      r6,r1
0000e4  4628              MOV      r0,r5
0000e6  4631              MOV      r1,r6
;;;33     }
0000e8  b005              ADD      sp,sp,#0x14
0000ea  e8bd8ff0          POP      {r4-r11,pc}
;;;34     
                          ENDP

0000ee  0000              DCW      0x0000
                  |L1.240|
                          DCD      rbSTK
                  |L1.244|
                          DCD      ticks
                  |L1.248|
                          DCD      _ZZN6Cortex11GetFineTimeEjE19__PRETTY_FUNCTION__ ; Cortex::GetFineTime(unsigned)::__PRETTY_FUNCTION__
                  |L1.252|
0000fc  53544b2e          DCB      "STK.cpp",0
000100  63707000
                  |L1.260|
000104  4973496e          DCB      "IsInterruptableBySTK()",0
000108  74657272
00010c  75707461
000110  626c6542
000114  7953544b
000118  282900  
00011b  00                DCB      0
                  |L1.284|
00011c  49735072          DCB      "IsPrivileged()",0
000120  6976696c
000124  65676564
000128  282900  
00012b  00                DCB      0

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  _ZZN6Cortex11GetFineTimeEjE19__PRETTY_FUNCTION__ ; Cortex::GetFineTime(unsigned)::__PRETTY_FUNCTION__
000000  756e7369          DCB      0x75,0x6e,0x73,0x69
000004  676e6564          DCB      0x67,0x6e,0x65,0x64
000008  206c6f6e          DCB      0x20,0x6c,0x6f,0x6e
00000c  67206c6f          DCB      0x67,0x20,0x6c,0x6f
000010  6e672043          DCB      0x6e,0x67,0x20,0x43
000014  6f727465          DCB      0x6f,0x72,0x74,0x65
000018  783a3a47          DCB      0x78,0x3a,0x3a,0x47
00001c  65744669          DCB      0x65,0x74,0x46,0x69
000020  6e655469          DCB      0x6e,0x65,0x54,0x69
000024  6d652875          DCB      0x6d,0x65,0x28,0x75
000028  6e736967          DCB      0x6e,0x73,0x69,0x67
00002c  6e656420          DCB      0x6e,0x65,0x64,0x20
000030  696e7429          DCB      0x69,0x6e,0x74,0x29
000034  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=3

                  ticks
000000  00000000          DCQ      0x0000000000000000
000004  00000000

                          AREA ||i._Z5UMULLjj||, COMGROUP=_Z5UMULLjj, CODE, READONLY, ALIGN=1

                  _Z5UMULLjj PROC ; UMULL(unsigned, unsigned)
;;;22     
;;;23     inline UINT64 UMULL(UINT32 const a, UINT32 const b) noexcept { return (UINT64)a * (UINT64)b; }
000000  b530              PUSH     {r4,r5,lr}
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
000006  fba24003          UMULL    r4,r0,r2,r3
00000a  4605              MOV      r5,r0
00000c  4620              MOV      r0,r4
00000e  4629              MOV      r1,r5
000010  bd30              POP      {r4,r5,pc}
;;;24     
                          ENDP


                          AREA ||area_number.18||, COMGROUP=_Z5UMULLjj, LINKORDER=||i._Z5UMULLjj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z5UMULLjj||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic4IncrIjEET_RVS1_||, COMGROUP=_ZN6Atomic4IncrIjEET_RVS1_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic4IncrIjEET_RVS1_ PROC ; T1 Atomic::Incr<unsigned>(volatile T1&)
;;;259    
;;;260      template<typename TYPE> inline TYPE Incr(TYPE volatile & data) noexcept { constexpr TYPE const one = 1; return Add(data, one); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  2601              MOVS     r6,#1
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6Atomic3AddIjEET_RVS1_S1_ ; T1 Atomic::Add<unsigned>(volatile T1&, T1)
00000e  4605              MOV      r5,r0
000010  4628              MOV      r0,r5
000012  bd70              POP      {r4-r6,pc}
;;;261      template<typename TYPE> inline TYPE Decr(TYPE volatile & data) noexcept { constexpr TYPE const one = 1; return Sub(data, one); }
                          ENDP


                          AREA ||area_number.25||, COMGROUP=_ZN6Atomic4IncrIjEET_RVS1_, LINKORDER=||t._ZN6Atomic4IncrIjEET_RVS1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic4IncrIjEET_RVS1_||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex12IsPrivilegedEv||, COMGROUP=_ZN6Cortex12IsPrivilegedEv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex12IsPrivilegedEv PROC ; Cortex::IsPrivileged()
;;;288      /// \note Exception mode ist immer privilegiert, unabhängig von CONTROL[0]!
;;;289      FORCE_INLINE bool IsPrivileged() noexcept { return (GetCONTROL() & CONTROL_usermode) == 0U || ! IsThreadMode(); }
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _ZN6Cortex10GetCONTROLEv ; Cortex::GetCONTROL()
000006  f0000001          AND      r0,r0,#1
00000a  b110              CBZ      r0,|L31.18|
00000c  f7fffffe          BL       _ZN6Cortex12IsThreadModeEv ; Cortex::IsThreadMode()
000010  b908              CBNZ     r0,|L31.22|
                  |L31.18|
000012  2001              MOVS     r0,#1
000014  e000              B        |L31.24|
                  |L31.22|
000016  2000              MOVS     r0,#0
                  |L31.24|
000018  4604              MOV      r4,r0
00001a  4620              MOV      r0,r4
00001c  bd10              POP      {r4,pc}
;;;290      
                          ENDP


                          AREA ||area_number.32||, COMGROUP=_ZN6Cortex12IsPrivilegedEv, LINKORDER=||i._ZN6Cortex12IsPrivilegedEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.32||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex12IsPrivilegedEv||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex20IsInterruptableBySTKEv||, COMGROUP=_ZN6Cortex20IsInterruptableBySTKEv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex20IsInterruptableBySTKEv PROC ; Cortex::IsInterruptableBySTK()
;;;294      inline bool IsInterruptableBySVC() noexcept { return IsInterruptable(GetSVCPrio()); }
;;;295      inline bool IsInterruptableBySTK() noexcept { return IsInterruptable(GetSTKPrio()); }
000000  b570              PUSH     {r4-r6,lr}
000002  f7fffffe          BL       _ZN6Cortex10GetSTKPrioEv ; Cortex::GetSTKPrio()
000006  4605              MOV      r5,r0
000008  f7fffffe          BL       _ZN6Cortex15IsInterruptableEh ; Cortex::IsInterruptable(unsigned char)
00000c  4604              MOV      r4,r0
00000e  4620              MOV      r0,r4
000010  bd70              POP      {r4-r6,pc}
;;;296    
                          ENDP


                          AREA ||area_number.39||, COMGROUP=_ZN6Cortex20IsInterruptableBySTKEv, LINKORDER=||i._ZN6Cortex20IsInterruptableBySTKEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.39||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex20IsInterruptableBySTKEv||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic3AddIjEET_RVS1_S1_||, COMGROUP=_ZN6Atomic3AddIjEET_RVS1_S1_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic3AddIjEET_RVS1_S1_ PROC ; T1 Atomic::Add<unsigned>(volatile T1&, T1)
;;;154      /// \tparam TYPE ist der Datentyp der atomaren Operation.
;;;155      template<typename TYPE> inline TYPE Add(TYPE volatile & data, TYPE const value) noexcept { return Modify<TYPE, BinOpType::opAdd>(data, value); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6Atomic6ModifyIjLNS_9BinOpTypeE1EEET_RVS2_S2_ ; T1 Atomic::Modify<unsigned, (Atomic::BinOpType)1>(volatile T1&, T1)
00000e  4606              MOV      r6,r0
000010  4630              MOV      r0,r6
000012  bd70              POP      {r4-r6,pc}
;;;156    
                          ENDP


                          AREA ||area_number.46||, COMGROUP=_ZN6Atomic3AddIjEET_RVS1_S1_, LINKORDER=||t._ZN6Atomic3AddIjEET_RVS1_S1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.46||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic3AddIjEET_RVS1_S1_||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex10GetCONTROLEv||, COMGROUP=_ZN6Cortex10GetCONTROLEv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex10GetCONTROLEv PROC ; Cortex::GetCONTROL()
;;;153      /// \return Wert des CONTROL-Registers
;;;154      FORCE_INLINE WORD GetCONTROL() noexcept { return ARM_RSR(control); }
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _Z15ARM_RSR_controlv ; ARM_RSR_control()
000006  4604              MOV      r4,r0
000008  4620              MOV      r0,r4
00000a  bd10              POP      {r4,pc}
;;;155    
                          ENDP


                          AREA ||area_number.53||, COMGROUP=_ZN6Cortex10GetCONTROLEv, LINKORDER=||i._ZN6Cortex10GetCONTROLEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.53||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex10GetCONTROLEv||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex12IsThreadModeEv||, COMGROUP=_ZN6Cortex12IsThreadModeEv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex12IsThreadModeEv PROC ; Cortex::IsThreadMode()
;;;283      /// \note Die Bestimmung, ob sich der Prozessor im Thread-Modus befindet, erfolgt anhand der aktuellen ISR-Nummer.
;;;284      FORCE_INLINE bool IsThreadMode() noexcept { return GetCurrentIsrNum() == isrNum_THREAD_MODE; }
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _ZN6Cortex16GetCurrentIsrNumEv ; Cortex::GetCurrentIsrNum()
000006  b908              CBNZ     r0,|L59.12|
000008  2001              MOVS     r0,#1
00000a  e000              B        |L59.14|
                  |L59.12|
00000c  2000              MOVS     r0,#0
                  |L59.14|
00000e  4604              MOV      r4,r0
000010  4620              MOV      r0,r4
000012  bd10              POP      {r4,pc}
;;;285    
                          ENDP


                          AREA ||area_number.60||, COMGROUP=_ZN6Cortex12IsThreadModeEv, LINKORDER=||i._ZN6Cortex12IsThreadModeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.60||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex12IsThreadModeEv||
                          DCD      0x00000001

                          AREA ||i._Z15ARM_RSR_controlv||, COMGROUP=_Z15ARM_RSR_controlv, CODE, READONLY, ALIGN=1

                  _Z15ARM_RSR_controlv PROC ; ARM_RSR_control()
;;;38     
;;;39     DEFINE_ARM_RSR(control)
000000  f3ef8114          MRS      r1,CONTROL
000004  4608              MOV      r0,r1
000006  4770              BX       lr
;;;40     DEFINE_ARM_WSR(control)
                          ENDP


                          AREA ||area_number.67||, COMGROUP=_Z15ARM_RSR_controlv, LINKORDER=||i._Z15ARM_RSR_controlv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.67||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z15ARM_RSR_controlv||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic6ModifyIjLNS_9BinOpTypeE1EEET_RVS2_S2_||, COMGROUP=_ZN6Atomic6ModifyIjLNS_9BinOpTypeE1EEET_RVS2_S2_, CODE, READONLY, ALIGN=1

                  _ZN6Atomic6ModifyIjLNS_9BinOpTypeE1EEET_RVS2_S2_ PROC ; T1 Atomic::Modify<unsigned, (Atomic::BinOpType)1>(volatile T1&, T1)
;;;54       template<typename TYPE, BinOpType OP> 
;;;55       inline TYPE Modify(TYPE volatile & data, TYPE const operand) noexcept
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;56       {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;57         TYPE result;
;;;58         
;;;59         do 
000008  bf00              NOP      
                  |L73.10|
;;;60         {
;;;61           result = Cortex::LoadLinked(data);
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       _ZN6Cortex10LoadLinkedIjEET_RVKS1_ ; T1 Cortex::LoadLinked<unsigned>(const volatile T1&)
000010  4604              MOV      r4,r0
;;;62         } while ( Cortex::SaveConditional(data, BinOp<TYPE, OP>::Calc(result, operand)) );
000012  4639              MOV      r1,r7
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       _ZN6Atomic5BinOpIjLNS_9BinOpTypeE1EE4CalcEjj ; Atomic::BinOp<unsigned, (Atomic::BinOpType)1>::Calc(unsigned, unsigned)
00001a  4680              MOV      r8,r0
00001c  4641              MOV      r1,r8
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       _ZN6Cortex15SaveConditionalIjEEbRVT_S1_ ; bool Cortex::SaveConditional<unsigned>(volatile T1&, T1)
000024  2800              CMP      r0,#0
000026  d1f0              BNE      |L73.10|
;;;63         
;;;64         return result;
000028  4625              MOV      r5,r4
00002a  4628              MOV      r0,r5
;;;65       }
00002c  e8bd81f0          POP      {r4-r8,pc}
;;;66     
                          ENDP


                          AREA ||area_number.74||, COMGROUP=_ZN6Atomic6ModifyIjLNS_9BinOpTypeE1EEET_RVS2_S2_, LINKORDER=||t._ZN6Atomic6ModifyIjLNS_9BinOpTypeE1EEET_RVS2_S2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.74||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic6ModifyIjLNS_9BinOpTypeE1EEET_RVS2_S2_||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex16GetCurrentIsrNumEv||, COMGROUP=_ZN6Cortex16GetCurrentIsrNumEv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex16GetCurrentIsrNumEv PROC ; Cortex::GetCurrentIsrNum()
;;;278      /// \return Nummer der aktiven Exception.
;;;279      FORCE_INLINE WORD GetCurrentIsrNum() noexcept { return GetIPSR(); }
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _ZN6Cortex7GetIPSREv ; Cortex::GetIPSR()
000006  4604              MOV      r4,r0
000008  4620              MOV      r0,r4
00000a  bd10              POP      {r4,pc}
;;;280    
                          ENDP


                          AREA ||area_number.81||, COMGROUP=_ZN6Cortex16GetCurrentIsrNumEv, LINKORDER=||i._ZN6Cortex16GetCurrentIsrNumEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.81||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex16GetCurrentIsrNumEv||
                          DCD      0x00000001

                          AREA ||t._ZN6Cortex10LoadLinkedIjEET_RVKS1_||, COMGROUP=_ZN6Cortex10LoadLinkedIjEET_RVKS1_, CODE, READONLY, ALIGN=1

                  _ZN6Cortex10LoadLinkedIjEET_RVKS1_ PROC ; T1 Cortex::LoadLinked<unsigned>(const volatile T1&)
;;;247      template<typename TYPE>
;;;248      FORCE_INLINE TYPE LoadLinked(TYPE const volatile & data) noexcept { DMB(); return ArmExclusive<sizeof(TYPE)>::LdrEx(data); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  f7fffffe          BL       _ZN6Cortex3DMBEv ; Cortex::DMB()
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj ; Cortex::ArmExclusive<(unsigned)4>::LdrEx(const volatile unsigned&)
00000e  4605              MOV      r5,r0
000010  4628              MOV      r0,r5
000012  bd70              POP      {r4-r6,pc}
;;;249      
                          ENDP


                          AREA ||area_number.88||, COMGROUP=_ZN6Cortex10LoadLinkedIjEET_RVKS1_, LINKORDER=||t._ZN6Cortex10LoadLinkedIjEET_RVKS1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.88||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Cortex10LoadLinkedIjEET_RVKS1_||
                          DCD      0x00000001

                          AREA ||t._ZN6Atomic5BinOpIjLNS_9BinOpTypeE1EE4CalcEjj||, COMGROUP=_ZN6Atomic5BinOpIjLNS_9BinOpTypeE1EE4CalcEjj, CODE, READONLY, ALIGN=1

                  _ZN6Atomic5BinOpIjLNS_9BinOpTypeE1EE4CalcEjj PROC ; Atomic::BinOp<unsigned, (Atomic::BinOpType)1>::Calc(unsigned, unsigned)
;;;37       template<typename TYPE> struct BinOp<TYPE, BinOpType::opSet> { static constexpr TYPE Calc(TYPE        , TYPE const r) noexcept { return     r; } };
;;;38       template<typename TYPE> struct BinOp<TYPE, BinOpType::opAdd> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l + r; } };
000000  4602              MOV      r2,r0
000002  1850              ADDS     r0,r2,r1
000004  4770              BX       lr
;;;39       template<typename TYPE> struct BinOp<TYPE, BinOpType::opSub> { static constexpr TYPE Calc(TYPE const l, TYPE const r) noexcept { return l - r; } };
                          ENDP


                          AREA ||area_number.95||, COMGROUP=_ZN6Atomic5BinOpIjLNS_9BinOpTypeE1EE4CalcEjj, LINKORDER=||t._ZN6Atomic5BinOpIjLNS_9BinOpTypeE1EE4CalcEjj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.95||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Atomic5BinOpIjLNS_9BinOpTypeE1EE4CalcEjj||
                          DCD      0x00000001

                          AREA ||t._ZN6Cortex15SaveConditionalIjEEbRVT_S1_||, COMGROUP=_ZN6Cortex15SaveConditionalIjEEbRVT_S1_, CODE, READONLY, ALIGN=1

                  _ZN6Cortex15SaveConditionalIjEEbRVT_S1_ PROC ; bool Cortex::SaveConditional<unsigned>(volatile T1&, T1)
;;;258      template<typename TYPE>
;;;259      FORCE_INLINE bool SaveConditional(TYPE volatile & data, TYPE const value) noexcept
000000  b570              PUSH     {r4-r6,lr}
;;;260      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;261        if ( ArmExclusive<sizeof(TYPE)>::StrEx(data, value) )
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj ; Cortex::ArmExclusive<(unsigned)4>::StrEx(volatile unsigned&, unsigned)
00000e  b108              CBZ      r0,|L101.20|
;;;262          return true;
000010  2001              MOVS     r0,#1
                  |L101.18|
;;;263    
;;;264        DSB();
;;;265          
;;;266        return false;
;;;267      }
000012  bd70              POP      {r4-r6,pc}
                  |L101.20|
000014  f7fffffe          BL       _ZN6Cortex3DSBEv ; Cortex::DSB()
000018  2000              MOVS     r0,#0                 ;266
00001a  e7fa              B        |L101.18|
;;;268      
                          ENDP


                          AREA ||area_number.102||, COMGROUP=_ZN6Cortex15SaveConditionalIjEEbRVT_S1_, LINKORDER=||t._ZN6Cortex15SaveConditionalIjEEbRVT_S1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.102||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6Cortex15SaveConditionalIjEEbRVT_S1_||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex7GetIPSREv||, COMGROUP=_ZN6Cortex7GetIPSREv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex7GetIPSREv PROC ; Cortex::GetIPSR()
;;;220    
;;;221      FORCE_INLINE WORD GetIPSR() noexcept { return ARM_RSR(ipsr); }
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _Z12ARM_RSR_ipsrv ; ARM_RSR_ipsr()
000006  4604              MOV      r4,r0
000008  4620              MOV      r0,r4
00000a  bd10              POP      {r4,pc}
;;;222      FORCE_INLINE WORD GetAPSR() noexcept { return ARM_RSR(apsr); }
                          ENDP


                          AREA ||area_number.109||, COMGROUP=_ZN6Cortex7GetIPSREv, LINKORDER=||i._ZN6Cortex7GetIPSREv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.109||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex7GetIPSREv||
                          DCD      0x00000001

                          AREA ||i._Z12ARM_RSR_ipsrv||, COMGROUP=_Z12ARM_RSR_ipsrv, CODE, READONLY, ALIGN=1

                  _Z12ARM_RSR_ipsrv PROC ; ARM_RSR_ipsr()
;;;54     DEFINE_ARM_RSR(apsr)
;;;55     DEFINE_ARM_RSR(ipsr)
000000  f3ef8105          MRS      r1,IPSR
000004  4608              MOV      r0,r1
000006  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||area_number.116||, COMGROUP=_Z12ARM_RSR_ipsrv, LINKORDER=||i._Z12ARM_RSR_ipsrv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.116||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z12ARM_RSR_ipsrv||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj, CODE, READONLY, ALIGN=1

                  _ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj PROC ; Cortex::ArmExclusive<(unsigned)4>::LdrEx(const volatile unsigned&)
;;;67         
;;;68         static WORD LdrEx(WORD const volatile & data)                   noexcept { return _LdrExW(&data); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _LdrExW
00000a  4605              MOV      r5,r0
00000c  4628              MOV      r0,r5
00000e  bd70              POP      {r4-r6,pc}
;;;69         static bool StrEx(WORD       volatile & data, WORD const value) noexcept { return _StrExW(&data, value) != 0U; }
                          ENDP


                          AREA ||area_number.123||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj, LINKORDER=||i._ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.123||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj||

                          AREA ||.ARM.extab||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj, DATA, READONLY, ALIGN=2

                          REQUIRE __cxa_call_unexpected
                  ||.extab._ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj||
                          DCD      0x80aab0b0
000004  0002000b          DCW      0x0002,0x000b
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||i._ZN6Cortex3DMBEv||, COMGROUP=_ZN6Cortex3DMBEv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex3DMBEv PROC ; Cortex::DMB()
;;;121    
;;;122      FORCE_INLINE void DMB() noexcept { SCHEDULE_BARRIER(); __dmb(0xF); SCHEDULE_BARRIER(); }  
000000  bf00              NOP      
000002  bf00              NOP      
000004  f3bf8f5f          DMB      
000008  bf00              NOP      
00000a  bf00              NOP      
00000c  4770              BX       lr
;;;123      FORCE_INLINE void DSB() noexcept { SCHEDULE_BARRIER(); __dsb(0xF); SCHEDULE_BARRIER(); }
                          ENDP


                          AREA ||area_number.131||, COMGROUP=_ZN6Cortex3DMBEv, LINKORDER=||i._ZN6Cortex3DMBEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.131||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex3DMBEv||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex3DSBEv||, COMGROUP=_ZN6Cortex3DSBEv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex3DSBEv PROC ; Cortex::DSB()
;;;122      FORCE_INLINE void DMB() noexcept { SCHEDULE_BARRIER(); __dmb(0xF); SCHEDULE_BARRIER(); }  
;;;123      FORCE_INLINE void DSB() noexcept { SCHEDULE_BARRIER(); __dsb(0xF); SCHEDULE_BARRIER(); }
000000  bf00              NOP      
000002  bf00              NOP      
000004  f3bf8f4f          DSB      
000008  bf00              NOP      
00000a  bf00              NOP      
00000c  4770              BX       lr
;;;124      FORCE_INLINE void ISB() noexcept { SCHEDULE_BARRIER(); __isb(0xF); SCHEDULE_BARRIER(); }
                          ENDP


                          AREA ||area_number.138||, COMGROUP=_ZN6Cortex3DSBEv, LINKORDER=||i._ZN6Cortex3DSBEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.138||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex3DSBEv||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj, CODE, READONLY, ALIGN=1

                  _ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj PROC ; Cortex::ArmExclusive<(unsigned)4>::StrEx(volatile unsigned&, unsigned)
;;;68         static WORD LdrEx(WORD const volatile & data)                   noexcept { return _LdrExW(&data); }
;;;69         static bool StrEx(WORD       volatile & data, WORD const value) noexcept { return _StrExW(&data, value) != 0U; }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _StrExW
00000e  b108              CBZ      r0,|L144.20|
000010  2001              MOVS     r0,#1
000012  e000              B        |L144.22|
                  |L144.20|
000014  2000              MOVS     r0,#0
                  |L144.22|
000016  4606              MOV      r6,r0
000018  4630              MOV      r0,r6
00001a  bd70              POP      {r4-r6,pc}
;;;70     
                          ENDP


                          AREA ||area_number.145||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj, LINKORDER=||i._ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.145||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj||

                          AREA ||area_number.146||, COMGROUP=_ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.146||, ||.ARM.extab||
                          REQUIRE __cxa_call_unexpected
                  ||.extab._ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj||
                          DCD      0x80aab0b0
000004  0002000f          DCW      0x0002,0x000f
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||i.__ARM_common_noexcept_landing||, COMGROUP=__ARM_common_noexcept_landing, CODE, READONLY, ALIGN=1

                  __ARM_common_noexcept_landing PROC
000000  f7ffbffe          B.W      __cxa_call_terminate
                          ENDP


                          AREA ||area_number.153||, COMGROUP=__ARM_common_noexcept_landing, LINKORDER=||i.__ARM_common_noexcept_landing||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.153||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__ARM_common_noexcept_landing||
                          DCD      0x00000001
