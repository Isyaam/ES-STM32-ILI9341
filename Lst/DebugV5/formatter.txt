; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--cpp11 --list --debug -c --asm --interleave --exceptions --protect_stack -o.\out\debugv5\formatter.o --asm_dir=.\Lst\DebugV5\ --list_dir=.\Lst\DebugV5\ --depend=.\out\debugv5\formatter.d --cpu=Cortex-M4 --apcs=interwork --no_unaligned_access -O0 --diag_suppress=9931 -I.\Inc -I.\Inc\Debug -I.\Inc\Cortex -I.\Inc\Drivers -I.\Inc\Utilities -D__UVISION_VERSION=527 -DSTM32F429xx -DCORTEX_M=4 -DDEBUG --omf_browse=.\out\debugv5\formatter.crf --no_rtti Src\Utilities\Formatter.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ZN35_INTERNAL_13_Formatter_cpp_8205ebc711WriteValDecERN9Num2Ascii5ISinkERKyiiPKc PROC ; [local to Formatter_cpp]::WriteValDec(Num2Ascii::ISink&, const unsigned long long&, int, int, const char*)
;;;53     static inline unsigned WriteValDec(Num2Ascii::ISink & intrf, UINT64 const & value, int const digits, int const length)                      noexcept { return WriteVal<UINT64, 10U>(intrf, value, digits, length); }
;;;54     static inline unsigned WriteValDec(Num2Ascii::ISink & intrf, UINT64 const & value, int const digits, int const length, char const prefix[]) noexcept { return WriteVal<UINT64, 10U>(intrf, value, digits, length, prefix); }  
000000  e92d4ffe          PUSH     {r1-r11,lr}
000004  4681              MOV      r9,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
00000c  f8dda030          LDR      r10,[sp,#0x30]
000010  e88d0460          STM      sp,{r5,r6,r10}
000014  e9d47300          LDRD     r7,r3,[r4,#0]
000018  463a              MOV      r2,r7
00001a  4648              MOV      r0,r9
00001c  f7fffffe          BL       _ZN35_INTERNAL_13_Formatter_cpp_8205ebc78WriteValIyLj10EEEjRN9Num2Ascii5ISinkET_iiPKc ; unsigned [local to Formatter_cpp]::WriteVal<unsigned long long, (unsigned)10>(Num2Ascii::ISink&, T1, int, int, const char*)
000020  4683              MOV      r11,r0
000022  4658              MOV      r0,r11
000024  e8bd8ffe          POP      {r1-r11,pc}
;;;55       
                          ENDP

                  _ZN9Formatter14PrintUINT32DecEjiib PROC ; Formatter::PrintUINT32Dec(unsigned, int, int, bool)
;;;129    
;;;130    void Formatter::PrintUINT32Dec(UINT32 const value, int const digits, int const length, bool const pm) noexcept
000028  e92d43fe          PUSH     {r1-r9,lr}
;;;131    {
00002c  4604              MOV      r4,r0
00002e  460d              MOV      r5,r1
000030  4617              MOV      r7,r2
000032  461e              MOV      r6,r3
000034  f8dd8028          LDR      r8,[sp,#0x28]
;;;132      SinkConverter converter(sink);
000038  a801              ADD      r0,sp,#4
00003a  6861              LDR      r1,[r4,#4]
00003c  f7fffffe          BL       _ZN13SinkConverterC1ERN9Formatter5ISinkE ; SinkConverter::SinkConverter(Formatter::ISink&)
;;;133    
;;;134      if ( pm )
000040  f1b80f00          CMP      r8,#0
000044  d00b              BEQ      |L1.94|
;;;135        WriteValDec(converter, value, digits, length - 1, (value == 0U) ? " " : "+");
000046  b90d              CBNZ     r5,|L1.76|
000048  a0f7              ADR      r0,|L1.1064|
00004a  e000              B        |L1.78|
                  |L1.76|
00004c  a0f7              ADR      r0,|L1.1068|
                  |L1.78|
00004e  1e73              SUBS     r3,r6,#1
000050  463a              MOV      r2,r7
000052  4629              MOV      r1,r5
000054  9000              STR      r0,[sp,#0]
000056  a801              ADD      r0,sp,#4
000058  f7fffffe          BL       _ZN35_INTERNAL_13_Formatter_cpp_8205ebc711WriteValDecERN9Num2Ascii5ISinkEjiiPKc ; [local to Formatter_cpp]::WriteValDec(Num2Ascii::ISink&, unsigned, int, int, const char*)
00005c  e005              B        |L1.106|
                  |L1.94|
;;;136      else
;;;137        WriteValDec(converter, value, digits, length);
00005e  4633              MOV      r3,r6
000060  463a              MOV      r2,r7
000062  4629              MOV      r1,r5
000064  a801              ADD      r0,sp,#4
000066  f7fffffe          BL       _ZN35_INTERNAL_13_Formatter_cpp_8205ebc711WriteValDecERN9Num2Ascii5ISinkEjii ; [local to Formatter_cpp]::WriteValDec(Num2Ascii::ISink&, unsigned, int, int)
                  |L1.106|
;;;138    
;;;139      ResetWidth();
00006a  4620              MOV      r0,r4
00006c  f7fffffe          BL       _ZN9Formatter10ResetWidthEv ; Formatter::ResetWidth()
;;;140    }
000070  a801              ADD      r0,sp,#4
000072  f7fffffe          BL       _ZN13SinkConverterD1Ev ; SinkConverter::~SinkConverter()
000076  e8bd83fe          POP      {r1-r9,pc}
;;;141      
                          ENDP

                  _ZN9Formatter14PrintUINT64DecERKyiib PROC ; Formatter::PrintUINT64Dec(const unsigned long long&, int, int, bool)
;;;142    void Formatter::PrintUINT64Dec(UINT64 const & value, int const digits, int const length, bool const pm) noexcept
00007a  e92d43fe          PUSH     {r1-r9,lr}
;;;143    {
00007e  4604              MOV      r4,r0
000080  460d              MOV      r5,r1
000082  4617              MOV      r7,r2
000084  461e              MOV      r6,r3
000086  f8dd8028          LDR      r8,[sp,#0x28]
;;;144      SinkConverter converter(sink);
00008a  a801              ADD      r0,sp,#4
00008c  6861              LDR      r1,[r4,#4]
00008e  f7fffffe          BL       _ZN13SinkConverterC1ERN9Formatter5ISinkE ; SinkConverter::SinkConverter(Formatter::ISink&)
;;;145    
;;;146      if ( pm )
000092  f1b80f00          CMP      r8,#0
000096  d011              BEQ      |L1.188|
;;;147        WriteValDec(converter, value, digits, length - 1, (value == 0U) ? " " : "+");
000098  2300              MOVS     r3,#0
00009a  e9d51000          LDRD     r1,r0,[r5,#0]
00009e  4059              EORS     r1,r1,r3
0000a0  4058              EORS     r0,r0,r3
0000a2  4301              ORRS     r1,r1,r0
0000a4  d101              BNE      |L1.170|
0000a6  a0e0              ADR      r0,|L1.1064|
0000a8  e000              B        |L1.172|
                  |L1.170|
0000aa  a0e0              ADR      r0,|L1.1068|
                  |L1.172|
0000ac  1e73              SUBS     r3,r6,#1
0000ae  463a              MOV      r2,r7
0000b0  4629              MOV      r1,r5
0000b2  9000              STR      r0,[sp,#0]
0000b4  a801              ADD      r0,sp,#4
0000b6  f7fffffe          BL       _ZN35_INTERNAL_13_Formatter_cpp_8205ebc711WriteValDecERN9Num2Ascii5ISinkERKyiiPKc ; [local to Formatter_cpp]::WriteValDec(Num2Ascii::ISink&, const unsigned long long&, int, int, const char*)
0000ba  e005              B        |L1.200|
                  |L1.188|
;;;148      else
;;;149        WriteValDec(converter, value, digits, length);
0000bc  4633              MOV      r3,r6
0000be  463a              MOV      r2,r7
0000c0  4629              MOV      r1,r5
0000c2  a801              ADD      r0,sp,#4
0000c4  f7fffffe          BL       _ZN35_INTERNAL_13_Formatter_cpp_8205ebc711WriteValDecERN9Num2Ascii5ISinkERKyii ; [local to Formatter_cpp]::WriteValDec(Num2Ascii::ISink&, const unsigned long long&, int, int)
                  |L1.200|
;;;150    
;;;151      ResetWidth();
0000c8  4620              MOV      r0,r4
0000ca  f7fffffe          BL       _ZN9Formatter10ResetWidthEv ; Formatter::ResetWidth()
;;;152    }
0000ce  a801              ADD      r0,sp,#4
0000d0  f7fffffe          BL       _ZN13SinkConverterD1Ev ; SinkConverter::~SinkConverter()
0000d4  e8bd83fe          POP      {r1-r9,pc}
;;;153      
                          ENDP

                  _ZN9Formatter14PrintSINT32DecEiiib PROC ; Formatter::PrintSINT32Dec(int, int, int, bool)
;;;154    void Formatter::PrintSINT32Dec(SINT32 const value, int const digits, int const length, bool const pm) noexcept
0000d8  e92d41ff          PUSH     {r0-r8,lr}
;;;155    {
0000dc  4605              MOV      r5,r0
0000de  460c              MOV      r4,r1
0000e0  4617              MOV      r7,r2
0000e2  461e              MOV      r6,r3
0000e4  f8dd8028          LDR      r8,[sp,#0x28]
;;;156      /// Bei negativen Werten \b muss immer ein '-' vorangestellt werden. 
;;;157      /// Bei positiven Werten ist das Vorzeichen (hier: '+') optional und kann angegeben werden (muss aber nicht).
;;;158    
;;;159      if ( value < 0L )
0000e8  2c00              CMP      r4,#0
0000ea  da14              BGE      |L1.278|
;;;160      {
;;;161        SinkConverter converter(sink);
0000ec  a802              ADD      r0,sp,#8
0000ee  6869              LDR      r1,[r5,#4]
0000f0  f7fffffe          BL       _ZN13SinkConverterC1ERN9Formatter5ISinkE ; SinkConverter::SinkConverter(Formatter::ISink&)
;;;162        Int32Type const tmp = { -value };
0000f4  4260              RSBS     r0,r4,#0
0000f6  9001              STR      r0,[sp,#4]
;;;163    
;;;164        WriteValDec(converter, tmp.u, digits, length - 1, "-");
0000f8  a0cd              ADR      r0,|L1.1072|
0000fa  1e73              SUBS     r3,r6,#1
0000fc  9000              STR      r0,[sp,#0]
0000fe  463a              MOV      r2,r7
000100  a802              ADD      r0,sp,#8
000102  9901              LDR      r1,[sp,#4]
000104  f7fffffe          BL       _ZN35_INTERNAL_13_Formatter_cpp_8205ebc711WriteValDecERN9Num2Ascii5ISinkEjiiPKc ; [local to Formatter_cpp]::WriteValDec(Num2Ascii::ISink&, unsigned, int, int, const char*)
;;;165        ResetWidth();
000108  4628              MOV      r0,r5
00010a  f7fffffe          BL       _ZN9Formatter10ResetWidthEv ; Formatter::ResetWidth()
;;;166      } else 
00010e  a802              ADD      r0,sp,#8
000110  f7fffffe          BL       _ZN13SinkConverterD1Ev ; SinkConverter::~SinkConverter()
000114  e009              B        |L1.298|
                  |L1.278|
;;;167      {
;;;168        Int32Type const tmp = {  value };
000116  9403              STR      r4,[sp,#0xc]
;;;169        
;;;170        PrintUINT32Dec(tmp.u, digits, length, pm);
000118  f8cd8000          STR      r8,[sp,#0]
00011c  4633              MOV      r3,r6
00011e  463a              MOV      r2,r7
000120  4628              MOV      r0,r5
000122  9903              LDR      r1,[sp,#0xc]
000124  f7fffffe          BL       _ZN9Formatter14PrintUINT32DecEjiib ; Formatter::PrintUINT32Dec(unsigned, int, int, bool)
;;;171      }
000128  bf00              NOP      
                  |L1.298|
;;;172    }
00012a  e8bd81ff          POP      {r0-r8,pc}
;;;173    
                          ENDP

                  _ZN9Formatter14PrintSINT64DecERKxiib PROC ; Formatter::PrintSINT64Dec(const long long&, int, int, bool)
;;;174    void Formatter::PrintSINT64Dec(SINT64 const & value, int const digits, int const length, bool const pm) noexcept
00012e  e92d41f0          PUSH     {r4-r8,lr}
;;;175    {
000132  b086              SUB      sp,sp,#0x18
000134  4605              MOV      r5,r0
000136  460c              MOV      r4,r1
000138  4617              MOV      r7,r2
00013a  461e              MOV      r6,r3
00013c  f8dd8030          LDR      r8,[sp,#0x30]
;;;176      if ( value < 0LL )
000140  2200              MOVS     r2,#0
000142  4611              MOV      r1,r2
000144  e9d43000          LDRD     r3,r0,[r4,#0]
000148  1a9a              SUBS     r2,r3,r2
00014a  4188              SBCS     r0,r0,r1
00014c  da1a              BGE      |L1.388|
;;;177      {
;;;178        SinkConverter converter(sink);
00014e  a804              ADD      r0,sp,#0x10
000150  6869              LDR      r1,[r5,#4]
000152  f7fffffe          BL       _ZN13SinkConverterC1ERN9Formatter5ISinkE ; SinkConverter::SinkConverter(Formatter::ISink&)
;;;179        Int64Type const tmp = { -value };
000156  2200              MOVS     r2,#0
000158  e9d41000          LDRD     r1,r0,[r4,#0]
00015c  4249              RSBS     r1,r1,#0
00015e  eb620000          SBC      r0,r2,r0
000162  e9cd1002          STRD     r1,r0,[sp,#8]
;;;180    
;;;181        WriteValDec(converter, tmp.u, digits, length - 1, "-");
000166  a0b2              ADR      r0,|L1.1072|
000168  1e73              SUBS     r3,r6,#1
00016a  463a              MOV      r2,r7
00016c  a902              ADD      r1,sp,#8
00016e  9000              STR      r0,[sp,#0]
000170  a804              ADD      r0,sp,#0x10
000172  f7fffffe          BL       _ZN35_INTERNAL_13_Formatter_cpp_8205ebc711WriteValDecERN9Num2Ascii5ISinkERKyiiPKc ; [local to Formatter_cpp]::WriteValDec(Num2Ascii::ISink&, const unsigned long long&, int, int, const char*)
;;;182        ResetWidth();
000176  4628              MOV      r0,r5
000178  f7fffffe          BL       _ZN9Formatter10ResetWidthEv ; Formatter::ResetWidth()
;;;183      } else 
00017c  a804              ADD      r0,sp,#0x10
00017e  f7fffffe          BL       _ZN13SinkConverterD1Ev ; SinkConverter::~SinkConverter()
000182  e00c              B        |L1.414|
                  |L1.388|
;;;184      {
;;;185        Int64Type const tmp = {  value };
000184  e9d40100          LDRD     r0,r1,[r4,#0]
000188  e9cd0104          STRD     r0,r1,[sp,#0x10]
;;;186        
;;;187        PrintUINT64Dec(tmp.u, digits, length, pm);
00018c  4633              MOV      r3,r6
00018e  463a              MOV      r2,r7
000190  a904              ADD      r1,sp,#0x10
000192  4628              MOV      r0,r5
000194  f8cd8000          STR      r8,[sp,#0]
000198  f7fffffe          BL       _ZN9Formatter14PrintUINT64DecERKyiib ; Formatter::PrintUINT64Dec(const unsigned long long&, int, int, bool)
;;;188      }
00019c  bf00              NOP      
                  |L1.414|
;;;189    }
00019e  b006              ADD      sp,sp,#0x18
0001a0  e8bd81f0          POP      {r4-r8,pc}
;;;190    
                          ENDP

                  _ZN9Formatter14PrintUINT32HexEjiib PROC ; Formatter::PrintUINT32Hex(unsigned, int, int, bool)
;;;105    
;;;106    void Formatter::PrintUINT32Hex(UINT32 const value, int const digits, int const length, bool const xp) noexcept
0001a4  e92d43fe          PUSH     {r1-r9,lr}
;;;107    {
0001a8  4604              MOV      r4,r0
0001aa  460d              MOV      r5,r1
0001ac  4616              MOV      r6,r2
0001ae  461f              MOV      r7,r3
0001b0  f8dd8028          LDR      r8,[sp,#0x28]
;;;108      SinkConverter converter(sink);
0001b4  a801              ADD      r0,sp,#4
0001b6  6861              LDR      r1,[r4,#4]
0001b8  f7fffffe          BL       _ZN13SinkConverterC1ERN9Formatter5ISinkE ; SinkConverter::SinkConverter(Formatter::ISink&)
;;;109      
;;;110      if ( xp && ! prefixed )
0001bc  f1b80f00          CMP      r8,#0
0001c0  d00a              BEQ      |L1.472|
0001c2  7ce0              LDRB     r0,[r4,#0x13]
0001c4  b940              CBNZ     r0,|L1.472|
;;;111        WriteValHex(converter, value, digits, length, "0x");
0001c6  a09b              ADR      r0,|L1.1076|
0001c8  463b              MOV      r3,r7
0001ca  4632              MOV      r2,r6
0001cc  4629              MOV      r1,r5
0001ce  9000              STR      r0,[sp,#0]
0001d0  a801              ADD      r0,sp,#4
0001d2  f7fffffe          BL       _ZN35_INTERNAL_13_Formatter_cpp_8205ebc711WriteValHexERN9Num2Ascii5ISinkEjiiPKc ; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*)
0001d6  e005              B        |L1.484|
                  |L1.472|
;;;112      else
;;;113        WriteValHex(converter, value, digits, length);
0001d8  463b              MOV      r3,r7
0001da  4632              MOV      r2,r6
0001dc  4629              MOV      r1,r5
0001de  a801              ADD      r0,sp,#4
0001e0  f7fffffe          BL       _ZN35_INTERNAL_13_Formatter_cpp_8205ebc711WriteValHexERN9Num2Ascii5ISinkEjii ; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int)
                  |L1.484|
;;;114    
;;;115      ResetWidth();
0001e4  4620              MOV      r0,r4
0001e6  f7fffffe          BL       _ZN9Formatter10ResetWidthEv ; Formatter::ResetWidth()
;;;116    }
0001ea  a801              ADD      r0,sp,#4
0001ec  f7fffffe          BL       _ZN13SinkConverterD1Ev ; SinkConverter::~SinkConverter()
0001f0  e8bd83fe          POP      {r1-r9,pc}
;;;117    
                          ENDP

                  _ZN9Formatter14PrintUINT64HexERKyiib PROC ; Formatter::PrintUINT64Hex(const unsigned long long&, int, int, bool)
;;;118    void Formatter::PrintUINT64Hex(UINT64 const & value, int const digits, int const length, bool const xp) noexcept
0001f4  e92d43fe          PUSH     {r1-r9,lr}
;;;119    {
0001f8  4604              MOV      r4,r0
0001fa  460d              MOV      r5,r1
0001fc  4616              MOV      r6,r2
0001fe  461f              MOV      r7,r3
000200  f8dd8028          LDR      r8,[sp,#0x28]
;;;120      SinkConverter converter(sink);
000204  a801              ADD      r0,sp,#4
000206  6861              LDR      r1,[r4,#4]
000208  f7fffffe          BL       _ZN13SinkConverterC1ERN9Formatter5ISinkE ; SinkConverter::SinkConverter(Formatter::ISink&)
;;;121      
;;;122      if ( xp && ! prefixed )
00020c  f1b80f00          CMP      r8,#0
000210  d00a              BEQ      |L1.552|
000212  7ce0              LDRB     r0,[r4,#0x13]
000214  b940              CBNZ     r0,|L1.552|
;;;123        WriteValHex(converter, value, digits, length, "0x");
000216  a087              ADR      r0,|L1.1076|
000218  463b              MOV      r3,r7
00021a  4632              MOV      r2,r6
00021c  4629              MOV      r1,r5
00021e  9000              STR      r0,[sp,#0]
000220  a801              ADD      r0,sp,#4
000222  f7fffffe          BL       _ZN35_INTERNAL_13_Formatter_cpp_8205ebc711WriteValHexERN9Num2Ascii5ISinkERKyiiPKc ; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, const unsigned long long&, int, int, const char*)
000226  e005              B        |L1.564|
                  |L1.552|
;;;124      else
;;;125        WriteValHex(converter, value, digits, length);
000228  463b              MOV      r3,r7
00022a  4632              MOV      r2,r6
00022c  4629              MOV      r1,r5
00022e  a801              ADD      r0,sp,#4
000230  f7fffffe          BL       _ZN35_INTERNAL_13_Formatter_cpp_8205ebc711WriteValHexERN9Num2Ascii5ISinkERKyii ; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, const unsigned long long&, int, int)
                  |L1.564|
;;;126    
;;;127      ResetWidth();
000234  4620              MOV      r0,r4
000236  f7fffffe          BL       _ZN9Formatter10ResetWidthEv ; Formatter::ResetWidth()
;;;128    }
00023a  a801              ADD      r0,sp,#4
00023c  f7fffffe          BL       _ZN13SinkConverterD1Ev ; SinkConverter::~SinkConverter()
000240  e8bd83fe          POP      {r1-r9,pc}
;;;129    
                          ENDP

                  _ZN9Formatter8PrintTxtEPKci PROC ; Formatter::PrintTxt(const char*, int)
;;;76     
;;;77     void Formatter::PrintTxt(char const * text, int length) noexcept
000244  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;78     {
000246  4606              MOV      r6,r0
000248  4614              MOV      r4,r2
;;;79       char chr;
;;;80       
;;;81       while ( (chr = *VERPTR(text)) != '\0' )
00024a  e007              B        |L1.604|
                  |L1.588|
;;;82       {
;;;83         WriteByte(chr);
00024c  4629              MOV      r1,r5
00024e  4630              MOV      r0,r6
000250  f7fffffe          BL       _ZN9Formatter9WriteByteEh ; Formatter::WriteByte(unsigned char)
;;;84     
;;;85         length--;
000254  1e64              SUBS     r4,r4,#1
;;;86         text++;
000256  9801              LDR      r0,[sp,#4]
000258  1c40              ADDS     r0,r0,#1
00025a  9001              STR      r0,[sp,#4]
                  |L1.604|
00025c  a801              ADD      r0,sp,#4              ;81
00025e  f7fffffe          BL       _ZN10CheckValueIRPKcE6VerifyIZN9Formatter8PrintTxtES1_iEUlPVKvE_EES2_S2_T_ ; const char*& CheckValue<const char*&>::Verify<Formatter::PrintTxt(const char*, int)::[lambda(const volatile void*) (instance 1)]>(const char*&, T1)
000262  6800              LDR      r0,[r0,#0]            ;81
000264  7805              LDRB     r5,[r0,#0]            ;81
000266  2d00              CMP      r5,#0                 ;81
000268  d1f0              BNE      |L1.588|
;;;87       }
;;;88       
;;;89       WriteByteRepeated(' ', length);
00026a  4622              MOV      r2,r4
00026c  2120              MOVS     r1,#0x20
00026e  4630              MOV      r0,r6
000270  f7fffffe          BL       _ZN9Formatter17WriteByteRepeatedEhi ; Formatter::WriteByteRepeated(unsigned char, int)
;;;90     }
000274  bdfe              POP      {r1-r7,pc}
;;;91     
                          ENDP

                  _ZN9Formatter9WriteByteEh PROC ; Formatter::WriteByte(unsigned char)
;;;203    
;;;204    void Formatter::WriteByte(BYTE const chr) noexcept
000276  b538              PUSH     {r3-r5,lr}
;;;205    {
000278  4604              MOV      r4,r0
00027a  460d              MOV      r5,r1
;;;206      switch(chr)
00027c  2d0e              CMP      r5,#0xe
00027e  d232              BCS      |L1.742|
000280  e8dff005          TBB      [pc,r5]
000284  07313131          DCB      0x07,0x31,0x31,0x31
000288  31313119          DCB      0x31,0x31,0x31,0x19
00028c  1f25132b          DCB      0x1f,0x25,0x13,0x2b
000290  310d              DCB      0x31,0x0d
;;;207      {
;;;208        case '\0': PrintTxt("\\0", 1); break;
000292  2201              MOVS     r2,#1
000294  a168              ADR      r1,|L1.1080|
000296  4620              MOV      r0,r4
000298  f7fffffe          BL       _ZN9Formatter8PrintTxtEPKci ; Formatter::PrintTxt(const char*, int)
00029c  e048              B        |L1.816|
;;;209        case '\r': PrintTxt("\\r", 1); break;
00029e  2201              MOVS     r2,#1
0002a0  a166              ADR      r1,|L1.1084|
0002a2  4620              MOV      r0,r4
0002a4  f7fffffe          BL       _ZN9Formatter8PrintTxtEPKci ; Formatter::PrintTxt(const char*, int)
0002a8  e042              B        |L1.816|
;;;210        case '\n': PrintTxt("\\n", 1); break;
0002aa  2201              MOVS     r2,#1
0002ac  a164              ADR      r1,|L1.1088|
0002ae  4620              MOV      r0,r4
0002b0  f7fffffe          BL       _ZN9Formatter8PrintTxtEPKci ; Formatter::PrintTxt(const char*, int)
0002b4  e03c              B        |L1.816|
;;;211        case '\a': PrintTxt("\\a", 1); break;
0002b6  2201              MOVS     r2,#1
0002b8  a162              ADR      r1,|L1.1092|
0002ba  4620              MOV      r0,r4
0002bc  f7fffffe          BL       _ZN9Formatter8PrintTxtEPKci ; Formatter::PrintTxt(const char*, int)
0002c0  e036              B        |L1.816|
;;;212        case '\b': PrintTxt("\\b", 1); break;
0002c2  2201              MOVS     r2,#1
0002c4  a160              ADR      r1,|L1.1096|
0002c6  4620              MOV      r0,r4
0002c8  f7fffffe          BL       _ZN9Formatter8PrintTxtEPKci ; Formatter::PrintTxt(const char*, int)
0002cc  e030              B        |L1.816|
;;;213        case '\t': PrintTxt("\\t", 1); break;
0002ce  2201              MOVS     r2,#1
0002d0  a15e              ADR      r1,|L1.1100|
0002d2  4620              MOV      r0,r4
0002d4  f7fffffe          BL       _ZN9Formatter8PrintTxtEPKci ; Formatter::PrintTxt(const char*, int)
0002d8  e02a              B        |L1.816|
;;;214        case '\v': PrintTxt("\\v", 1); break;
0002da  2201              MOVS     r2,#1
0002dc  a15c              ADR      r1,|L1.1104|
0002de  4620              MOV      r0,r4
0002e0  f7fffffe          BL       _ZN9Formatter8PrintTxtEPKci ; Formatter::PrintTxt(const char*, int)
0002e4  e024              B        |L1.816|
                  |L1.742|
;;;215        default:
;;;216        history[1] = history[0];
0002e6  7c61              LDRB     r1,[r4,#0x11]
0002e8  74a1              STRB     r1,[r4,#0x12]
;;;217        history[0] = chr;
0002ea  7465              STRB     r5,[r4,#0x11]
;;;218        prefixed = (chr == 'x' || chr == 'X') && history[1] == '0';
0002ec  2d78              CMP      r5,#0x78
0002ee  d001              BEQ      |L1.756|
0002f0  2d58              CMP      r5,#0x58
0002f2  d104              BNE      |L1.766|
                  |L1.756|
0002f4  7ca0              LDRB     r0,[r4,#0x12]
0002f6  2830              CMP      r0,#0x30
0002f8  d101              BNE      |L1.766|
0002fa  2001              MOVS     r0,#1
0002fc  e000              B        |L1.768|
                  |L1.766|
0002fe  2000              MOVS     r0,#0
                  |L1.768|
000300  74e0              STRB     r0,[r4,#0x13]
;;;219    
;;;220        if ( chr < ' ' || chr >= 127 )
000302  2d20              CMP      r5,#0x20
000304  db01              BLT      |L1.778|
000306  2d7f              CMP      r5,#0x7f
000308  db0c              BLT      |L1.804|
                  |L1.778|
;;;221        {
;;;222          PrintTxt("\\x");
00030a  a152              ADR      r1,|L1.1108|
00030c  4620              MOV      r0,r4
00030e  f7fffffe          BL       _ZN9Formatter8PrintTxtEPKc ; Formatter::PrintTxt(const char*)
;;;223          PrintUINT32Hex((UINT32)chr, 2, 2, false);
000312  2000              MOVS     r0,#0
000314  2302              MOVS     r3,#2
000316  461a              MOV      r2,r3
000318  4629              MOV      r1,r5
00031a  9000              STR      r0,[sp,#0]
00031c  4620              MOV      r0,r4
00031e  f7fffffe          BL       _ZN9Formatter14PrintUINT32HexEjiib ; Formatter::PrintUINT32Hex(unsigned, int, int, bool)
000322  e004              B        |L1.814|
                  |L1.804|
;;;224        } else
;;;225          sink.WriteByte(chr);
000324  6860              LDR      r0,[r4,#4]
000326  6801              LDR      r1,[r0,#0]
000328  688a              LDR      r2,[r1,#8]
00032a  4629              MOV      r1,r5
00032c  4790              BLX      r2
                  |L1.814|
;;;226        break;
00032e  bf00              NOP      
                  |L1.816|
000330  bf00              NOP                            ;208
;;;227      }
;;;228    }
000332  bd38              POP      {r3-r5,pc}
;;;229    
                          ENDP

                  _ZN9Formatter14PrintChrQuotedEh PROC ; Formatter::PrintChrQuoted(unsigned char)
;;;98     
;;;99     void Formatter::PrintChrQuoted(BYTE const chr) noexcept
000334  b570              PUSH     {r4-r6,lr}
;;;100    {
000336  4604              MOV      r4,r0
000338  460d              MOV      r5,r1
;;;101      WriteByte('\'');
00033a  2127              MOVS     r1,#0x27
00033c  4620              MOV      r0,r4
00033e  f7fffffe          BL       _ZN9Formatter9WriteByteEh ; Formatter::WriteByte(unsigned char)
;;;102      PrintChr(chr);
000342  4629              MOV      r1,r5
000344  4620              MOV      r0,r4
000346  f7fffffe          BL       _ZN9Formatter8PrintChrEh ; Formatter::PrintChr(unsigned char)
;;;103      WriteByte('\'');
00034a  2127              MOVS     r1,#0x27
00034c  4620              MOV      r0,r4
00034e  f7fffffe          BL       _ZN9Formatter9WriteByteEh ; Formatter::WriteByte(unsigned char)
;;;104    }
000352  bd70              POP      {r4-r6,pc}
;;;105    
                          ENDP

                  _ZN9Formatter14PrintTxtQuotedEPKc PROC ; Formatter::PrintTxtQuoted(const char*)
;;;91     
;;;92     void Formatter::PrintTxtQuoted(char const text[]) noexcept
000354  b573              PUSH     {r0,r1,r4-r6,lr}
;;;93     {
000356  4604              MOV      r4,r0
;;;94       WriteByte('"');
000358  2122              MOVS     r1,#0x22
00035a  4620              MOV      r0,r4
00035c  f7fffffe          BL       _ZN9Formatter9WriteByteEh ; Formatter::WriteByte(unsigned char)
;;;95       PrintTxt(VERPTR(text), 1);
000360  a801              ADD      r0,sp,#4
000362  f7fffffe          BL       _ZN10CheckValueIRPKcE6VerifyIZN9Formatter14PrintTxtQuotedES1_EUlPVKvE_EES2_S2_T_ ; const char*& CheckValue<const char*&>::Verify<Formatter::PrintTxtQuoted(const char*)::[lambda(const volatile void*) (instance 1)]>(const char*&, T1)
000366  2201              MOVS     r2,#1
000368  6805              LDR      r5,[r0,#0]
00036a  4629              MOV      r1,r5
00036c  4620              MOV      r0,r4
00036e  f7fffffe          BL       _ZN9Formatter8PrintTxtEPKci ; Formatter::PrintTxt(const char*, int)
;;;96       WriteByte('"');
000372  2122              MOVS     r1,#0x22
000374  4620              MOV      r0,r4
000376  f7fffffe          BL       _ZN9Formatter9WriteByteEh ; Formatter::WriteByte(unsigned char)
;;;97     }
00037a  bd7c              POP      {r2-r6,pc}
;;;98     
                          ENDP

                  _ZN9Formatter9SetFormatENS_11FmtModeTypeE PROC ; Formatter::SetFormat(Formatter::FmtModeType)
;;;190    
;;;191    void Formatter::SetFormat(FmtModeType const mode) noexcept
00037c  b570              PUSH     {r4-r6,lr}
;;;192    {
00037e  4605              MOV      r5,r0
000380  460c              MOV      r4,r1
;;;193      switch(mode)
000382  2c06              CMP      r4,#6
000384  d22a              BCS      |L1.988|
000386  e8dff004          TBB      [pc,r4]
00038a  0308              DCB      0x03,0x08
00038c  0d161f24          DCB      0x0d,0x16,0x1f,0x24
;;;194      {
;;;195        case FmtModeType::showSign  : SetSign(); break;
000390  2101              MOVS     r1,#1
000392  4628              MOV      r0,r5
000394  f7fffffe          BL       _ZN9Formatter7SetSignEb ; Formatter::SetSign(bool)
000398  e020              B        |L1.988|
;;;196        case FmtModeType::nakedNum  : SetSign(false); break;
00039a  2100              MOVS     r1,#0
00039c  4628              MOV      r0,r5
00039e  f7fffffe          BL       _ZN9Formatter7SetSignEb ; Formatter::SetSign(bool)
0003a2  e01b              B        |L1.988|
;;;197        case FmtModeType::plainHex  : SetRadix(RadixMdType::printHex); SetPrefix(false); break;
0003a4  2101              MOVS     r1,#1
0003a6  4628              MOV      r0,r5
0003a8  f7fffffe          BL       _ZN9Formatter8SetRadixENS_11RadixMdTypeE ; Formatter::SetRadix(Formatter::RadixMdType)
0003ac  2100              MOVS     r1,#0
0003ae  4628              MOV      r0,r5
0003b0  f7fffffe          BL       _ZN9Formatter9SetPrefixEb ; Formatter::SetPrefix(bool)
0003b4  e012              B        |L1.988|
;;;198        case FmtModeType::hexMode   : SetRadix(RadixMdType::printHex); SetPrefix(); break;
0003b6  2101              MOVS     r1,#1
0003b8  4628              MOV      r0,r5
0003ba  f7fffffe          BL       _ZN9Formatter8SetRadixENS_11RadixMdTypeE ; Formatter::SetRadix(Formatter::RadixMdType)
0003be  2101              MOVS     r1,#1
0003c0  4628              MOV      r0,r5
0003c2  f7fffffe          BL       _ZN9Formatter9SetPrefixEb ; Formatter::SetPrefix(bool)
0003c6  e009              B        |L1.988|
;;;199        case FmtModeType::decMode   : SetRadix(RadixMdType::printDec); break;
0003c8  2100              MOVS     r1,#0
0003ca  4628              MOV      r0,r5
0003cc  f7fffffe          BL       _ZN9Formatter8SetRadixENS_11RadixMdTypeE ; Formatter::SetRadix(Formatter::RadixMdType)
0003d0  e004              B        |L1.988|
;;;200        case FmtModeType::autoHex   : SetRadix(RadixMdType::autoMode); break;
0003d2  2102              MOVS     r1,#2
0003d4  4628              MOV      r0,r5
0003d6  f7fffffe          BL       _ZN9Formatter8SetRadixENS_11RadixMdTypeE ; Formatter::SetRadix(Formatter::RadixMdType)
0003da  bf00              NOP      
                  |L1.988|
0003dc  bf00              NOP                            ;195
;;;201      }
;;;202    }
0003de  bd70              POP      {r4-r6,pc}
;;;203    
                          ENDP

                  _ZN35_INTERNAL_13_Formatter_cpp_8205ebc711WriteValHexERN9Num2Ascii5ISinkEjii PROC ; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int)
;;;43     
;;;44     static inline unsigned WriteValHex(Num2Ascii::ISink & intrf, UINT32 const   value, int const digits, int const length)                      noexcept { return WriteVal<UINT32, 16U>(intrf, value, digits, length); }
0003e0  e92d41f0          PUSH     {r4-r8,lr}
0003e4  4604              MOV      r4,r0
0003e6  460d              MOV      r5,r1
0003e8  4616              MOV      r6,r2
0003ea  461f              MOV      r7,r3
0003ec  463b              MOV      r3,r7
0003ee  4632              MOV      r2,r6
0003f0  4629              MOV      r1,r5
0003f2  4620              MOV      r0,r4
0003f4  f7fffffe          BL       _ZN35_INTERNAL_13_Formatter_cpp_8205ebc78WriteValIjLj16EEEjRN9Num2Ascii5ISinkET_ii ; unsigned [local to Formatter_cpp]::WriteVal<unsigned, (unsigned)16>(Num2Ascii::ISink&, T1, int, int)
0003f8  4680              MOV      r8,r0
0003fa  4640              MOV      r0,r8
0003fc  e8bd81f0          POP      {r4-r8,pc}
;;;45     static inline unsigned WriteValHex(Num2Ascii::ISink & intrf, UINT32 const   value, int const digits, int const length, char const prefix[]) noexcept { return WriteVal<UINT32, 16U>(intrf, value, digits, length, prefix); }  
                          ENDP

                  _ZN35_INTERNAL_13_Formatter_cpp_8205ebc711WriteValHexERN9Num2Ascii5ISinkEjiiPKc PROC ; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*)
000400  e92d43f8          PUSH     {r3-r9,lr}
000404  4604              MOV      r4,r0
000406  460d              MOV      r5,r1
000408  4616              MOV      r6,r2
00040a  461f              MOV      r7,r3
00040c  f8dd8020          LDR      r8,[sp,#0x20]
000410  463b              MOV      r3,r7
000412  4632              MOV      r2,r6
000414  4629              MOV      r1,r5
000416  4620              MOV      r0,r4
000418  f8cd8000          STR      r8,[sp,#0]
00041c  f7fffffe          BL       _ZN35_INTERNAL_13_Formatter_cpp_8205ebc78WriteValIjLj16EEEjRN9Num2Ascii5ISinkET_iiPKc ; unsigned [local to Formatter_cpp]::WriteVal<unsigned, (unsigned)16>(Num2Ascii::ISink&, T1, int, int, const char*)
000420  4681              MOV      r9,r0
000422  4648              MOV      r0,r9
000424  e8bd83f8          POP      {r3-r9,pc}
                  |L1.1064|
000428  2000              DCB      " ",0
00042a  00                DCB      0
00042b  00                DCB      0
                  |L1.1068|
00042c  2b00              DCB      "+",0
00042e  00                DCB      0
00042f  00                DCB      0
                  |L1.1072|
000430  2d00              DCB      "-",0
000432  00                DCB      0
000433  00                DCB      0
                  |L1.1076|
000434  307800            DCB      "0x",0
000437  00                DCB      0
                  |L1.1080|
000438  5c3000            DCB      "\\0",0
00043b  00                DCB      0
                  |L1.1084|
00043c  5c7200            DCB      "\\r",0
00043f  00                DCB      0
                  |L1.1088|
000440  5c6e00            DCB      "\\n",0
000443  00                DCB      0
                  |L1.1092|
000444  5c6100            DCB      "\\a",0
000447  00                DCB      0
                  |L1.1096|
000448  5c6200            DCB      "\\b",0
00044b  00                DCB      0
                  |L1.1100|
00044c  5c7400            DCB      "\\t",0
00044f  00                DCB      0
                  |L1.1104|
000450  5c7600            DCB      "\\v",0
000453  00                DCB      0
                  |L1.1108|
000454  5c7800            DCB      "\\x",0
000457  00                DCB      0
                          ENDP

                  _ZN35_INTERNAL_13_Formatter_cpp_8205ebc711WriteValHexERN9Num2Ascii5ISinkERKyii PROC ; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, const unsigned long long&, int, int)
;;;46     
;;;47     static inline unsigned WriteValHex(Num2Ascii::ISink & intrf, UINT64 const & value, int const digits, int const length)                      noexcept { return WriteVal<UINT64, 16U>(intrf, value, digits, length); }
000458  e92d47fc          PUSH     {r2-r10,lr}
00045c  4681              MOV      r9,r0
00045e  460c              MOV      r4,r1
000460  4615              MOV      r5,r2
000462  461e              MOV      r6,r3
000464  e9cd5600          STRD     r5,r6,[sp,#0]
000468  e9d47300          LDRD     r7,r3,[r4,#0]
00046c  463a              MOV      r2,r7
00046e  4648              MOV      r0,r9
000470  f7fffffe          BL       _ZN35_INTERNAL_13_Formatter_cpp_8205ebc78WriteValIyLj16EEEjRN9Num2Ascii5ISinkET_ii ; unsigned [local to Formatter_cpp]::WriteVal<unsigned long long, (unsigned)16>(Num2Ascii::ISink&, T1, int, int)
000474  4682              MOV      r10,r0
000476  4650              MOV      r0,r10
000478  e8bd87fc          POP      {r2-r10,pc}
;;;48     static inline unsigned WriteValHex(Num2Ascii::ISink & intrf, UINT64 const & value, int const digits, int const length, char const prefix[]) noexcept { return WriteVal<UINT64, 16U>(intrf, value, digits, length, prefix); }  
                          ENDP

                  _ZN35_INTERNAL_13_Formatter_cpp_8205ebc711WriteValHexERN9Num2Ascii5ISinkERKyiiPKc PROC ; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, const unsigned long long&, int, int, const char*)
00047c  e92d4ffe          PUSH     {r1-r11,lr}
000480  4681              MOV      r9,r0
000482  460c              MOV      r4,r1
000484  4615              MOV      r5,r2
000486  461e              MOV      r6,r3
000488  f8dda030          LDR      r10,[sp,#0x30]
00048c  e88d0460          STM      sp,{r5,r6,r10}
000490  e9d47300          LDRD     r7,r3,[r4,#0]
000494  463a              MOV      r2,r7
000496  4648              MOV      r0,r9
000498  f7fffffe          BL       _ZN35_INTERNAL_13_Formatter_cpp_8205ebc78WriteValIyLj16EEEjRN9Num2Ascii5ISinkET_iiPKc ; unsigned [local to Formatter_cpp]::WriteVal<unsigned long long, (unsigned)16>(Num2Ascii::ISink&, T1, int, int, const char*)
00049c  4683              MOV      r11,r0
00049e  4658              MOV      r0,r11
0004a0  e8bd8ffe          POP      {r1-r11,pc}
;;;49     
                          ENDP

                  _ZN35_INTERNAL_13_Formatter_cpp_8205ebc711WriteValDecERN9Num2Ascii5ISinkEjii PROC ; [local to Formatter_cpp]::WriteValDec(Num2Ascii::ISink&, unsigned, int, int)
;;;50     static inline unsigned WriteValDec(Num2Ascii::ISink & intrf, UINT32 const   value, int const digits, int const length)                      noexcept { return WriteVal<UINT32, 10U>(intrf, value, digits, length); }
0004a4  e92d41f0          PUSH     {r4-r8,lr}
0004a8  4604              MOV      r4,r0
0004aa  460d              MOV      r5,r1
0004ac  4616              MOV      r6,r2
0004ae  461f              MOV      r7,r3
0004b0  463b              MOV      r3,r7
0004b2  4632              MOV      r2,r6
0004b4  4629              MOV      r1,r5
0004b6  4620              MOV      r0,r4
0004b8  f7fffffe          BL       _ZN35_INTERNAL_13_Formatter_cpp_8205ebc78WriteValIjLj10EEEjRN9Num2Ascii5ISinkET_ii ; unsigned [local to Formatter_cpp]::WriteVal<unsigned, (unsigned)10>(Num2Ascii::ISink&, T1, int, int)
0004bc  4680              MOV      r8,r0
0004be  4640              MOV      r0,r8
0004c0  e8bd81f0          POP      {r4-r8,pc}
;;;51     static inline unsigned WriteValDec(Num2Ascii::ISink & intrf, UINT32 const   value, int const digits, int const length, char const prefix[]) noexcept { return WriteVal<UINT32, 10U>(intrf, value, digits, length, prefix); }  
                          ENDP

                  _ZN35_INTERNAL_13_Formatter_cpp_8205ebc711WriteValDecERN9Num2Ascii5ISinkEjiiPKc PROC ; [local to Formatter_cpp]::WriteValDec(Num2Ascii::ISink&, unsigned, int, int, const char*)
0004c4  e92d43f8          PUSH     {r3-r9,lr}
0004c8  4604              MOV      r4,r0
0004ca  460d              MOV      r5,r1
0004cc  4616              MOV      r6,r2
0004ce  461f              MOV      r7,r3
0004d0  f8dd8020          LDR      r8,[sp,#0x20]
0004d4  463b              MOV      r3,r7
0004d6  4632              MOV      r2,r6
0004d8  4629              MOV      r1,r5
0004da  4620              MOV      r0,r4
0004dc  f8cd8000          STR      r8,[sp,#0]
0004e0  f7fffffe          BL       _ZN35_INTERNAL_13_Formatter_cpp_8205ebc78WriteValIjLj10EEEjRN9Num2Ascii5ISinkET_iiPKc ; unsigned [local to Formatter_cpp]::WriteVal<unsigned, (unsigned)10>(Num2Ascii::ISink&, T1, int, int, const char*)
0004e4  4681              MOV      r9,r0
0004e6  4648              MOV      r0,r9
0004e8  e8bd83f8          POP      {r3-r9,pc}
;;;52     
                          ENDP

                  _ZN35_INTERNAL_13_Formatter_cpp_8205ebc711WriteValDecERN9Num2Ascii5ISinkERKyii PROC ; [local to Formatter_cpp]::WriteValDec(Num2Ascii::ISink&, const unsigned long long&, int, int)
;;;53     static inline unsigned WriteValDec(Num2Ascii::ISink & intrf, UINT64 const & value, int const digits, int const length)                      noexcept { return WriteVal<UINT64, 10U>(intrf, value, digits, length); }
0004ec  e92d47fc          PUSH     {r2-r10,lr}
0004f0  4681              MOV      r9,r0
0004f2  460c              MOV      r4,r1
0004f4  4615              MOV      r5,r2
0004f6  461e              MOV      r6,r3
0004f8  e9cd5600          STRD     r5,r6,[sp,#0]
0004fc  e9d47300          LDRD     r7,r3,[r4,#0]
000500  463a              MOV      r2,r7
000502  4648              MOV      r0,r9
000504  f7fffffe          BL       _ZN35_INTERNAL_13_Formatter_cpp_8205ebc78WriteValIyLj10EEEjRN9Num2Ascii5ISinkET_ii ; unsigned [local to Formatter_cpp]::WriteVal<unsigned long long, (unsigned)10>(Num2Ascii::ISink&, T1, int, int)
000508  4682              MOV      r10,r0
00050a  4650              MOV      r0,r10
00050c  e8bd87fc          POP      {r2-r10,pc}
;;;54     static inline unsigned WriteValDec(Num2Ascii::ISink & intrf, UINT64 const & value, int const digits, int const length, char const prefix[]) noexcept { return WriteVal<UINT64, 10U>(intrf, value, digits, length, prefix); }  
                          ENDP

                  _ZN35_INTERNAL_13_Formatter_cpp_8205ebc78WriteValIyLj10EEEjRN9Num2Ascii5ISinkET_iiPKc PROC ; unsigned [local to Formatter_cpp]::WriteVal<unsigned long long, (unsigned)10>(Num2Ascii::ISink&, T1, int, int, const char*)
;;;36     template<typename TYPE, unsigned RADIX>
;;;37     static inline unsigned WriteVal(Num2Ascii::ISink & intrf, TYPE const value, int const digits, int const length, char const prefix[]) noexcept
000510  e92d47f0          PUSH     {r4-r10,lr}
;;;38     {
000514  b088              SUB      sp,sp,#0x20
000516  4604              MOV      r4,r0
000518  4615              MOV      r5,r2
00051a  461e              MOV      r6,r3
00051c  e9dd8911          LDRD     r8,r9,[sp,#0x44]
000520  9f10              LDR      r7,[sp,#0x40]
;;;39       Num2Ascii writer(intrf, prefix);
000522  464a              MOV      r2,r9
000524  4621              MOV      r1,r4
000526  a803              ADD      r0,sp,#0xc
000528  f7fffffe          BL       _ZN9Num2AsciiC1ERNS_5ISinkEPKc ; Num2Ascii::Num2Ascii(Num2Ascii::ISink&, const char*)
;;;40     
;;;41       return writer.Format<TYPE, RADIX>(value, digits, length);
00052c  462a              MOV      r2,r5
00052e  4633              MOV      r3,r6
000530  a803              ADD      r0,sp,#0xc
000532  e9cd7800          STRD     r7,r8,[sp,#0]
000536  f7fffffe          BL       _ZN9Num2Ascii6FormatIyLj10EEEjT_ii ; unsigned Num2Ascii::Format<unsigned long long, (unsigned)10>(T1, int, int)
00053a  4682              MOV      r10,r0
00053c  a803              ADD      r0,sp,#0xc
00053e  f7fffffe          BL       _ZN9Num2AsciiD1Ev ; Num2Ascii::~Num2Ascii()
000542  4650              MOV      r0,r10
;;;42     }
000544  b008              ADD      sp,sp,#0x20
000546  e8bd87f0          POP      {r4-r10,pc}
;;;43     
                          ENDP

                  _ZN35_INTERNAL_13_Formatter_cpp_8205ebc78WriteValIjLj16EEEjRN9Num2Ascii5ISinkET_ii PROC ; unsigned [local to Formatter_cpp]::WriteVal<unsigned, (unsigned)16>(Num2Ascii::ISink&, T1, int, int)
;;;17     template<typename TYPE, unsigned RADIX>
;;;18     static inline unsigned WriteVal(Num2Ascii::ISink & intrf, TYPE const value, int const digits, int const length) noexcept
00054a  e92d41f0          PUSH     {r4-r8,lr}
;;;19     {
00054e  b086              SUB      sp,sp,#0x18
000550  4604              MOV      r4,r0
000552  460d              MOV      r5,r1
000554  4616              MOV      r6,r2
000556  461f              MOV      r7,r3
;;;20       Num2Ascii writer(intrf);
000558  4621              MOV      r1,r4
00055a  a801              ADD      r0,sp,#4
00055c  f7fffffe          BL       _ZN9Num2AsciiC1ERNS_5ISinkE ; Num2Ascii::Num2Ascii(Num2Ascii::ISink&)
;;;21     
;;;22       return writer.Format<TYPE, RADIX>(value, digits, length);
000560  463b              MOV      r3,r7
000562  4632              MOV      r2,r6
000564  4629              MOV      r1,r5
000566  a801              ADD      r0,sp,#4
000568  f7fffffe          BL       _ZN9Num2Ascii6FormatIjLj16EEEjT_ii ; unsigned Num2Ascii::Format<unsigned, (unsigned)16>(T1, int, int)
00056c  4680              MOV      r8,r0
00056e  a801              ADD      r0,sp,#4
000570  f7fffffe          BL       _ZN9Num2AsciiD1Ev ; Num2Ascii::~Num2Ascii()
000574  4640              MOV      r0,r8
;;;23     }
000576  b006              ADD      sp,sp,#0x18
000578  e8bd81f0          POP      {r4-r8,pc}
;;;24     
                          ENDP

                  _ZN35_INTERNAL_13_Formatter_cpp_8205ebc78WriteValIjLj16EEEjRN9Num2Ascii5ISinkET_iiPKc PROC ; unsigned [local to Formatter_cpp]::WriteVal<unsigned, (unsigned)16>(Num2Ascii::ISink&, T1, int, int, const char*)
;;;36     template<typename TYPE, unsigned RADIX>
;;;37     static inline unsigned WriteVal(Num2Ascii::ISink & intrf, TYPE const value, int const digits, int const length, char const prefix[]) noexcept
00057c  e92d43f0          PUSH     {r4-r9,lr}
;;;38     {
000580  b085              SUB      sp,sp,#0x14
000582  4604              MOV      r4,r0
000584  460d              MOV      r5,r1
000586  4616              MOV      r6,r2
000588  461f              MOV      r7,r3
00058a  f8dd8030          LDR      r8,[sp,#0x30]
;;;39       Num2Ascii writer(intrf, prefix);
00058e  4642              MOV      r2,r8
000590  4621              MOV      r1,r4
000592  4668              MOV      r0,sp
000594  f7fffffe          BL       _ZN9Num2AsciiC1ERNS_5ISinkEPKc ; Num2Ascii::Num2Ascii(Num2Ascii::ISink&, const char*)
;;;40     
;;;41       return writer.Format<TYPE, RADIX>(value, digits, length);
000598  463b              MOV      r3,r7
00059a  4632              MOV      r2,r6
00059c  4629              MOV      r1,r5
00059e  4668              MOV      r0,sp
0005a0  f7fffffe          BL       _ZN9Num2Ascii6FormatIjLj16EEEjT_ii ; unsigned Num2Ascii::Format<unsigned, (unsigned)16>(T1, int, int)
0005a4  4681              MOV      r9,r0
0005a6  4668              MOV      r0,sp
0005a8  f7fffffe          BL       _ZN9Num2AsciiD1Ev ; Num2Ascii::~Num2Ascii()
0005ac  4648              MOV      r0,r9
;;;42     }
0005ae  b005              ADD      sp,sp,#0x14
0005b0  e8bd83f0          POP      {r4-r9,pc}
;;;43     
                          ENDP

                  _ZN35_INTERNAL_13_Formatter_cpp_8205ebc78WriteValIyLj16EEEjRN9Num2Ascii5ISinkET_ii PROC ; unsigned [local to Formatter_cpp]::WriteVal<unsigned long long, (unsigned)16>(Num2Ascii::ISink&, T1, int, int)
;;;17     template<typename TYPE, unsigned RADIX>
;;;18     static inline unsigned WriteVal(Num2Ascii::ISink & intrf, TYPE const value, int const digits, int const length) noexcept
0005b4  e92d43f0          PUSH     {r4-r9,lr}
;;;19     {
0005b8  b087              SUB      sp,sp,#0x1c
0005ba  4604              MOV      r4,r0
0005bc  4615              MOV      r5,r2
0005be  461e              MOV      r6,r3
0005c0  e9dd780e          LDRD     r7,r8,[sp,#0x38]
;;;20       Num2Ascii writer(intrf);
0005c4  4621              MOV      r1,r4
0005c6  a802              ADD      r0,sp,#8
0005c8  f7fffffe          BL       _ZN9Num2AsciiC1ERNS_5ISinkE ; Num2Ascii::Num2Ascii(Num2Ascii::ISink&)
;;;21     
;;;22       return writer.Format<TYPE, RADIX>(value, digits, length);
0005cc  462a              MOV      r2,r5
0005ce  4633              MOV      r3,r6
0005d0  a802              ADD      r0,sp,#8
0005d2  e9cd7800          STRD     r7,r8,[sp,#0]
0005d6  f7fffffe          BL       _ZN9Num2Ascii6FormatIyLj16EEEjT_ii ; unsigned Num2Ascii::Format<unsigned long long, (unsigned)16>(T1, int, int)
0005da  4681              MOV      r9,r0
0005dc  a802              ADD      r0,sp,#8
0005de  f7fffffe          BL       _ZN9Num2AsciiD1Ev ; Num2Ascii::~Num2Ascii()
0005e2  4648              MOV      r0,r9
;;;23     }
0005e4  b007              ADD      sp,sp,#0x1c
0005e6  e8bd83f0          POP      {r4-r9,pc}
;;;24     
                          ENDP

                  _ZN35_INTERNAL_13_Formatter_cpp_8205ebc78WriteValIyLj16EEEjRN9Num2Ascii5ISinkET_iiPKc PROC ; unsigned [local to Formatter_cpp]::WriteVal<unsigned long long, (unsigned)16>(Num2Ascii::ISink&, T1, int, int, const char*)
;;;36     template<typename TYPE, unsigned RADIX>
;;;37     static inline unsigned WriteVal(Num2Ascii::ISink & intrf, TYPE const value, int const digits, int const length, char const prefix[]) noexcept
0005ea  e92d47f0          PUSH     {r4-r10,lr}
;;;38     {
0005ee  b088              SUB      sp,sp,#0x20
0005f0  4604              MOV      r4,r0
0005f2  4615              MOV      r5,r2
0005f4  461e              MOV      r6,r3
0005f6  e9dd8911          LDRD     r8,r9,[sp,#0x44]
0005fa  9f10              LDR      r7,[sp,#0x40]
;;;39       Num2Ascii writer(intrf, prefix);
0005fc  464a              MOV      r2,r9
0005fe  4621              MOV      r1,r4
000600  a803              ADD      r0,sp,#0xc
000602  f7fffffe          BL       _ZN9Num2AsciiC1ERNS_5ISinkEPKc ; Num2Ascii::Num2Ascii(Num2Ascii::ISink&, const char*)
;;;40     
;;;41       return writer.Format<TYPE, RADIX>(value, digits, length);
000606  462a              MOV      r2,r5
000608  4633              MOV      r3,r6
00060a  a803              ADD      r0,sp,#0xc
00060c  e9cd7800          STRD     r7,r8,[sp,#0]
000610  f7fffffe          BL       _ZN9Num2Ascii6FormatIyLj16EEEjT_ii ; unsigned Num2Ascii::Format<unsigned long long, (unsigned)16>(T1, int, int)
000614  4682              MOV      r10,r0
000616  a803              ADD      r0,sp,#0xc
000618  f7fffffe          BL       _ZN9Num2AsciiD1Ev ; Num2Ascii::~Num2Ascii()
00061c  4650              MOV      r0,r10
;;;42     }
00061e  b008              ADD      sp,sp,#0x20
000620  e8bd87f0          POP      {r4-r10,pc}
;;;43     
                          ENDP

                  _ZN35_INTERNAL_13_Formatter_cpp_8205ebc78WriteValIjLj10EEEjRN9Num2Ascii5ISinkET_ii PROC ; unsigned [local to Formatter_cpp]::WriteVal<unsigned, (unsigned)10>(Num2Ascii::ISink&, T1, int, int)
;;;17     template<typename TYPE, unsigned RADIX>
;;;18     static inline unsigned WriteVal(Num2Ascii::ISink & intrf, TYPE const value, int const digits, int const length) noexcept
000624  e92d41f0          PUSH     {r4-r8,lr}
;;;19     {
000628  b086              SUB      sp,sp,#0x18
00062a  4604              MOV      r4,r0
00062c  460d              MOV      r5,r1
00062e  4616              MOV      r6,r2
000630  461f              MOV      r7,r3
;;;20       Num2Ascii writer(intrf);
000632  4621              MOV      r1,r4
000634  a801              ADD      r0,sp,#4
000636  f7fffffe          BL       _ZN9Num2AsciiC1ERNS_5ISinkE ; Num2Ascii::Num2Ascii(Num2Ascii::ISink&)
;;;21     
;;;22       return writer.Format<TYPE, RADIX>(value, digits, length);
00063a  463b              MOV      r3,r7
00063c  4632              MOV      r2,r6
00063e  4629              MOV      r1,r5
000640  a801              ADD      r0,sp,#4
000642  f7fffffe          BL       _ZN9Num2Ascii6FormatIjLj10EEEjT_ii ; unsigned Num2Ascii::Format<unsigned, (unsigned)10>(T1, int, int)
000646  4680              MOV      r8,r0
000648  a801              ADD      r0,sp,#4
00064a  f7fffffe          BL       _ZN9Num2AsciiD1Ev ; Num2Ascii::~Num2Ascii()
00064e  4640              MOV      r0,r8
;;;23     }
000650  b006              ADD      sp,sp,#0x18
000652  e8bd81f0          POP      {r4-r8,pc}
;;;24     
                          ENDP

                  _ZN35_INTERNAL_13_Formatter_cpp_8205ebc78WriteValIjLj10EEEjRN9Num2Ascii5ISinkET_iiPKc PROC ; unsigned [local to Formatter_cpp]::WriteVal<unsigned, (unsigned)10>(Num2Ascii::ISink&, T1, int, int, const char*)
;;;36     template<typename TYPE, unsigned RADIX>
;;;37     static inline unsigned WriteVal(Num2Ascii::ISink & intrf, TYPE const value, int const digits, int const length, char const prefix[]) noexcept
000656  e92d43f0          PUSH     {r4-r9,lr}
;;;38     {
00065a  b085              SUB      sp,sp,#0x14
00065c  4604              MOV      r4,r0
00065e  460d              MOV      r5,r1
000660  4616              MOV      r6,r2
000662  461f              MOV      r7,r3
000664  f8dd8030          LDR      r8,[sp,#0x30]
;;;39       Num2Ascii writer(intrf, prefix);
000668  4642              MOV      r2,r8
00066a  4621              MOV      r1,r4
00066c  4668              MOV      r0,sp
00066e  f7fffffe          BL       _ZN9Num2AsciiC1ERNS_5ISinkEPKc ; Num2Ascii::Num2Ascii(Num2Ascii::ISink&, const char*)
;;;40     
;;;41       return writer.Format<TYPE, RADIX>(value, digits, length);
000672  463b              MOV      r3,r7
000674  4632              MOV      r2,r6
000676  4629              MOV      r1,r5
000678  4668              MOV      r0,sp
00067a  f7fffffe          BL       _ZN9Num2Ascii6FormatIjLj10EEEjT_ii ; unsigned Num2Ascii::Format<unsigned, (unsigned)10>(T1, int, int)
00067e  4681              MOV      r9,r0
000680  4668              MOV      r0,sp
000682  f7fffffe          BL       _ZN9Num2AsciiD1Ev ; Num2Ascii::~Num2Ascii()
000686  4648              MOV      r0,r9
;;;42     }
000688  b005              ADD      sp,sp,#0x14
00068a  e8bd83f0          POP      {r4-r9,pc}
;;;43     
                          ENDP

                  _ZN35_INTERNAL_13_Formatter_cpp_8205ebc78WriteValIyLj10EEEjRN9Num2Ascii5ISinkET_ii PROC ; unsigned [local to Formatter_cpp]::WriteVal<unsigned long long, (unsigned)10>(Num2Ascii::ISink&, T1, int, int)
;;;17     template<typename TYPE, unsigned RADIX>
;;;18     static inline unsigned WriteVal(Num2Ascii::ISink & intrf, TYPE const value, int const digits, int const length) noexcept
00068e  e92d43f0          PUSH     {r4-r9,lr}
;;;19     {
000692  b087              SUB      sp,sp,#0x1c
000694  4604              MOV      r4,r0
000696  4615              MOV      r5,r2
000698  461e              MOV      r6,r3
00069a  e9dd780e          LDRD     r7,r8,[sp,#0x38]
;;;20       Num2Ascii writer(intrf);
00069e  4621              MOV      r1,r4
0006a0  a802              ADD      r0,sp,#8
0006a2  f7fffffe          BL       _ZN9Num2AsciiC1ERNS_5ISinkE ; Num2Ascii::Num2Ascii(Num2Ascii::ISink&)
;;;21     
;;;22       return writer.Format<TYPE, RADIX>(value, digits, length);
0006a6  462a              MOV      r2,r5
0006a8  4633              MOV      r3,r6
0006aa  a802              ADD      r0,sp,#8
0006ac  e9cd7800          STRD     r7,r8,[sp,#0]
0006b0  f7fffffe          BL       _ZN9Num2Ascii6FormatIyLj10EEEjT_ii ; unsigned Num2Ascii::Format<unsigned long long, (unsigned)10>(T1, int, int)
0006b4  4681              MOV      r9,r0
0006b6  a802              ADD      r0,sp,#8
0006b8  f7fffffe          BL       _ZN9Num2AsciiD1Ev ; Num2Ascii::~Num2Ascii()
0006bc  4648              MOV      r0,r9
;;;23     }
0006be  b007              ADD      sp,sp,#0x1c
0006c0  e8bd83f0          POP      {r4-r9,pc}
;;;24     
                          ENDP

                  _ZZN9Num2Ascii11WritePrefixEvENKUlPVKvE_clES1_ PROC ; Num2Ascii::WritePrefix()::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const
;;;129      {
;;;130        auto s = VERPTR(prefix);
0006c4  b570              PUSH     {r4-r6,lr}
0006c6  4605              MOV      r5,r0
0006c8  460c              MOV      r4,r1
0006ca  4620              MOV      r0,r4
0006cc  f7fffffe          BL       _Z14IsValidPointerPVKv ; IsValidPointer(const volatile void*)
0006d0  b928              CBNZ     r0,|L1.1758|
0006d2  4b11              LDR      r3,|L1.1816|
0006d4  2282              MOVS     r2,#0x82
0006d6  4911              LDR      r1,|L1.1820|
0006d8  4811              LDR      r0,|L1.1824|
0006da  f7fffffe          BL       _Z15AssertionFailedPKcS0_jS0_ ; AssertionFailed(const char*, const char*, unsigned, const char*)
                  |L1.1758|
0006de  bd70              POP      {r4-r6,pc}
;;;131        BYTE chr;
                          ENDP

                  _ZZN9Formatter8PrintTxtEPKciENKUlPVKvE_clES3_ PROC ; Formatter::PrintTxt(const char*, int)::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const
;;;80       
;;;81       while ( (chr = *VERPTR(text)) != '\0' )
0006e0  b570              PUSH     {r4-r6,lr}
0006e2  4605              MOV      r5,r0
0006e4  460c              MOV      r4,r1
0006e6  4620              MOV      r0,r4
0006e8  f7fffffe          BL       _Z14IsValidPointerPVKv ; IsValidPointer(const volatile void*)
0006ec  b928              CBNZ     r0,|L1.1786|
0006ee  4b0d              LDR      r3,|L1.1828|
0006f0  2251              MOVS     r2,#0x51
0006f2  a10d              ADR      r1,|L1.1832|
0006f4  a010              ADR      r0,|L1.1848|
0006f6  f7fffffe          BL       _Z15AssertionFailedPKcS0_jS0_ ; AssertionFailed(const char*, const char*, unsigned, const char*)
                  |L1.1786|
0006fa  bd70              POP      {r4-r6,pc}
;;;82       {
                          ENDP

                  _ZZN9Formatter14PrintTxtQuotedEPKcENKUlPVKvE_clES3_ PROC ; Formatter::PrintTxtQuoted(const char*)::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const
;;;94       WriteByte('"');
;;;95       PrintTxt(VERPTR(text), 1);
0006fc  b570              PUSH     {r4-r6,lr}
0006fe  4605              MOV      r5,r0
000700  460c              MOV      r4,r1
000702  4620              MOV      r0,r4
000704  f7fffffe          BL       _Z14IsValidPointerPVKv ; IsValidPointer(const volatile void*)
000708  b928              CBNZ     r0,|L1.1814|
00070a  4b10              LDR      r3,|L1.1868|
00070c  225f              MOVS     r2,#0x5f
00070e  a106              ADR      r1,|L1.1832|
000710  a009              ADR      r0,|L1.1848|
000712  f7fffffe          BL       _Z15AssertionFailedPKcS0_jS0_ ; AssertionFailed(const char*, const char*, unsigned, const char*)
                  |L1.1814|
000716  bd70              POP      {r4-r6,pc}
;;;96       WriteByte('"');
                          ENDP

                  |L1.1816|
                          DCD      _ZZZN9Num2Ascii11WritePrefixEvENKUlPVKvE_clES1_E12__FUNCTION__ ; Num2Ascii::WritePrefix()::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const::__FUNCTION__
                  |L1.1820|
                          DCD      _ZZZN9Num2Ascii11WritePrefixEvENKUlPVKvE_clES1_Es_0 ; Num2Ascii::WritePrefix()::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const::string (instance 2)
                  |L1.1824|
                          DCD      _ZZZN9Num2Ascii11WritePrefixEvENKUlPVKvE_clES1_Es ; Num2Ascii::WritePrefix()::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const::string
                  |L1.1828|
                          DCD      _ZZZN9Formatter8PrintTxtEPKciENKUlPVKvE_clES3_E12__FUNCTION__ ; Formatter::PrintTxt(const char*, int)::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const::__FUNCTION__
                  |L1.1832|
000728  466f726d          DCB      "Formatter.cpp",0
00072c  61747465
000730  722e6370
000734  7000    
000736  00                DCB      0
000737  00                DCB      0
                  |L1.1848|
000738  74657874          DCB      "text is not valid",0
00073c  20697320
000740  6e6f7420
000744  76616c69
000748  6400    
00074a  00                DCB      0
00074b  00                DCB      0
                  |L1.1868|
                          DCD      _ZZZN9Formatter14PrintTxtQuotedEPKcENKUlPVKvE_clES3_E12__FUNCTION__ ; Formatter::PrintTxtQuoted(const char*)::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const::__FUNCTION__

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000276
                          RELOC 42, ||.text||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZN9Formatter9WriteByteEh||

                          AREA ||.ARM.extab||, DATA, READONLY, ALIGN=2

                          REQUIRE __cxa_call_unexpected
                          REQUIRE __cxa_call_terminate
                  ||.extab._ZN9Formatter9WriteByteEh||
                          DCD      0x8000a9b0
000004  000200b9          DCW      0x0002,0x00b9
                          DCD      0x80000000
                          DCD      0x00000001
                          RELOC 42, __ARM_common_noexcept_landing
                          DCD      0x00000000

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  _ZZZN9Formatter8PrintTxtEPKciENKUlPVKvE_clES3_E12__FUNCTION__ ; Formatter::PrintTxt(const char*, int)::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const::__FUNCTION__
000000  6f706572          DCB      0x6f,0x70,0x65,0x72
000004  61746f72          DCB      0x61,0x74,0x6f,0x72
000008  282900            DCB      0x28,0x29,0x00
                  _ZZZN9Formatter14PrintTxtQuotedEPKcENKUlPVKvE_clES3_E12__FUNCTION__ ; Formatter::PrintTxtQuoted(const char*)::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const::__FUNCTION__
00000b  6f                DCB      0x6f
00000c  70657261          DCB      0x70,0x65,0x72,0x61
000010  746f7228          DCB      0x74,0x6f,0x72,0x28
000014  2900              DCB      0x29,0x00

                          AREA ||.constdata__ZZZN9Num2Ascii11WritePrefixEvENKUlPVKvE_clES1_E12__FUNCTION__||, DATA, READONLY, ALIGN=0

                  _ZZZN9Num2Ascii11WritePrefixEvENKUlPVKvE_clES1_E12__FUNCTION__ ; Num2Ascii::WritePrefix()::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const::__FUNCTION__
000000  6f706572          DCB      0x6f,0x70,0x65,0x72
000004  61746f72          DCB      0x61,0x74,0x6f,0x72
000008  282900            DCB      0x28,0x29,0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  00                DCB      0

                          AREA ||.constdata__ZZN9Num2Ascii9ResPrefixEvEs||, COMGROUP=_ZZN9Num2Ascii9ResPrefixEvEs, DATA, READONLY, ALIGN=0

                  _ZZN9Num2Ascii9ResPrefixEvEs ; Num2Ascii::ResPrefix()::string
000000  00                DCB      0x00

                          AREA ||.constdata__ZZZN9Num2Ascii11WritePrefixEvENKUlPVKvE_clES1_Es||, COMGROUP=_ZZZN9Num2Ascii11WritePrefixEvENKUlPVKvE_clES1_Es, DATA, READONLY, ALIGN=0

                  _ZZZN9Num2Ascii11WritePrefixEvENKUlPVKvE_clES1_Es ; Num2Ascii::WritePrefix()::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const::string
000000  70726566          DCB      0x70,0x72,0x65,0x66
000004  69782069          DCB      0x69,0x78,0x20,0x69
000008  73206e6f          DCB      0x73,0x20,0x6e,0x6f
00000c  74207661          DCB      0x74,0x20,0x76,0x61
000010  6c696400          DCB      0x6c,0x69,0x64,0x00

                          AREA ||.constdata__ZZZN9Num2Ascii11WritePrefixEvENKUlPVKvE_clES1_Es_0||, COMGROUP=_ZZZN9Num2Ascii11WritePrefixEvENKUlPVKvE_clES1_Es_0, DATA, READONLY, ALIGN=0

                  _ZZZN9Num2Ascii11WritePrefixEvENKUlPVKvE_clES1_Es_0 ; Num2Ascii::WritePrefix()::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const::string (instance 2)
000000  4e756d32          DCB      0x4e,0x75,0x6d,0x32
000004  41736369          DCB      0x41,0x73,0x63,0x69
000008  692e6800          DCB      0x69,0x2e,0x68,0x00

                          AREA ||.constdata__ZZN9Num2Ascii6FormatIjLj16EEEjT_iiEs_1||, COMGROUP=_ZZN9Num2Ascii6FormatIjLj16EEEjT_iiEs_1, DATA, READONLY, ALIGN=0

                  _ZZN9Num2Ascii6FormatIjLj16EEEjT_iiEs_1 ; unsigned Num2Ascii::Format<unsigned, (unsigned)16>(T1, int, int)::string (instance 3)
000000  76616c75          DCB      0x76,0x61,0x6c,0x75
000004  65203c20          DCB      0x65,0x20,0x3c,0x20
000008  52414449          DCB      0x52,0x41,0x44,0x49
00000c  5800              DCB      0x58,0x00

                          AREA ||.constdata__ZZN9Num2Ascii6FormatIjLj16EEEjT_iiEs_2||, COMGROUP=_ZZN9Num2Ascii6FormatIjLj16EEEjT_iiEs_2, DATA, READONLY, ALIGN=0

                  _ZZN9Num2Ascii6FormatIjLj16EEEjT_iiEs_2 ; unsigned Num2Ascii::Format<unsigned, (unsigned)16>(T1, int, int)::string (instance 4)
000000  4e756d32          DCB      0x4e,0x75,0x6d,0x32
000004  41736369          DCB      0x41,0x73,0x63,0x69
000008  692e6800          DCB      0x69,0x2e,0x68,0x00

                          AREA ||.constdata__ZZN9Num2Ascii6FormatIyLj16EEEjT_iiEs_1||, COMGROUP=_ZZN9Num2Ascii6FormatIyLj16EEEjT_iiEs_1, DATA, READONLY, ALIGN=0

                  _ZZN9Num2Ascii6FormatIyLj16EEEjT_iiEs_1 ; unsigned Num2Ascii::Format<unsigned long long, (unsigned)16>(T1, int, int)::string (instance 3)
000000  76616c75          DCB      0x76,0x61,0x6c,0x75
000004  65203c20          DCB      0x65,0x20,0x3c,0x20
000008  52414449          DCB      0x52,0x41,0x44,0x49
00000c  5800              DCB      0x58,0x00

                          AREA ||.constdata__ZZN9Num2Ascii6FormatIyLj16EEEjT_iiEs_2||, COMGROUP=_ZZN9Num2Ascii6FormatIyLj16EEEjT_iiEs_2, DATA, READONLY, ALIGN=0

                  _ZZN9Num2Ascii6FormatIyLj16EEEjT_iiEs_2 ; unsigned Num2Ascii::Format<unsigned long long, (unsigned)16>(T1, int, int)::string (instance 4)
000000  4e756d32          DCB      0x4e,0x75,0x6d,0x32
000004  41736369          DCB      0x41,0x73,0x63,0x69
000008  692e6800          DCB      0x69,0x2e,0x68,0x00

                          AREA ||.constdata__ZZN9Num2Ascii6FormatIjLj10EEEjT_iiEs_1||, COMGROUP=_ZZN9Num2Ascii6FormatIjLj10EEEjT_iiEs_1, DATA, READONLY, ALIGN=0

                  _ZZN9Num2Ascii6FormatIjLj10EEEjT_iiEs_1 ; unsigned Num2Ascii::Format<unsigned, (unsigned)10>(T1, int, int)::string (instance 3)
000000  76616c75          DCB      0x76,0x61,0x6c,0x75
000004  65203c20          DCB      0x65,0x20,0x3c,0x20
000008  52414449          DCB      0x52,0x41,0x44,0x49
00000c  5800              DCB      0x58,0x00

                          AREA ||.constdata__ZZN9Num2Ascii6FormatIjLj10EEEjT_iiEs_2||, COMGROUP=_ZZN9Num2Ascii6FormatIjLj10EEEjT_iiEs_2, DATA, READONLY, ALIGN=0

                  _ZZN9Num2Ascii6FormatIjLj10EEEjT_iiEs_2 ; unsigned Num2Ascii::Format<unsigned, (unsigned)10>(T1, int, int)::string (instance 4)
000000  4e756d32          DCB      0x4e,0x75,0x6d,0x32
000004  41736369          DCB      0x41,0x73,0x63,0x69
000008  692e6800          DCB      0x69,0x2e,0x68,0x00

                          AREA ||.constdata__ZZN9Num2Ascii6FormatIyLj10EEEjT_iiEs_1||, COMGROUP=_ZZN9Num2Ascii6FormatIyLj10EEEjT_iiEs_1, DATA, READONLY, ALIGN=0

                  _ZZN9Num2Ascii6FormatIyLj10EEEjT_iiEs_1 ; unsigned Num2Ascii::Format<unsigned long long, (unsigned)10>(T1, int, int)::string (instance 3)
000000  76616c75          DCB      0x76,0x61,0x6c,0x75
000004  65203c20          DCB      0x65,0x20,0x3c,0x20
000008  52414449          DCB      0x52,0x41,0x44,0x49
00000c  5800              DCB      0x58,0x00

                          AREA ||.constdata__ZZN9Num2Ascii6FormatIyLj10EEEjT_iiEs_2||, COMGROUP=_ZZN9Num2Ascii6FormatIyLj10EEEjT_iiEs_2, DATA, READONLY, ALIGN=0

                  _ZZN9Num2Ascii6FormatIyLj10EEEjT_iiEs_2 ; unsigned Num2Ascii::Format<unsigned long long, (unsigned)10>(T1, int, int)::string (instance 4)
000000  4e756d32          DCB      0x4e,0x75,0x6d,0x32
000004  41736369          DCB      0x41,0x73,0x63,0x69
000008  692e6800          DCB      0x69,0x2e,0x68,0x00

                          AREA ||i._ZN9Num2Ascii9WriteCharEh||, COMGROUP=_ZN9Num2Ascii9WriteCharEh, CODE, READONLY, ALIGN=1

                  _ZN9Num2Ascii9WriteCharEh PROC ; Num2Ascii::WriteChar(unsigned char)
;;;107    
;;;108      void WriteChar(BYTE const chr) noexcept
000000  b570              PUSH     {r4-r6,lr}
;;;109      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;110        sink.WriteByte(chr);
000006  6860              LDR      r0,[r4,#4]
000008  6801              LDR      r1,[r0,#0]
00000a  688a              LDR      r2,[r1,#8]
00000c  4629              MOV      r1,r5
00000e  4790              BLX      r2
;;;111        length++;
000010  68e0              LDR      r0,[r4,#0xc]
000012  1c40              ADDS     r0,r0,#1
000014  60e0              STR      r0,[r4,#0xc]
;;;112      }
000016  bd70              POP      {r4-r6,pc}
;;;113    
                          ENDP


                          AREA ||area_number.41||, COMGROUP=_ZN9Num2Ascii9WriteCharEh, LINKORDER=||i._ZN9Num2Ascii9WriteCharEh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9Num2Ascii9WriteCharEh||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZN9Num2Ascii9WriteCharEh||

                          AREA ||area_number.42||, COMGROUP=_ZN9Num2Ascii9WriteCharEh, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.42||, ||.ARM.extab||
                          REQUIRE __cxa_call_unexpected
                          REQUIRE __cxa_call_terminate
                  ||.extab._ZN9Num2Ascii9WriteCharEh||
                          DCD      0x80aab0b0
000004  00020011          DCW      0x0002,0x0011
                          DCD      0x80000000
                          DCD      0x00000001
                          RELOC 42, __ARM_common_noexcept_landing
                          DCD      0x00000000

                          AREA ||i._ZN9Num2Ascii11WritePrefixEv||, COMGROUP=_ZN9Num2Ascii11WritePrefixEv, CODE, READONLY, ALIGN=1

                  _ZN9Num2Ascii11WritePrefixEv PROC ; Num2Ascii::WritePrefix()
;;;127    
;;;128      void WritePrefix() noexcept
000000  b570              PUSH     {r4-r6,lr}
;;;129      {
000002  4604              MOV      r4,r0
;;;130        auto s = VERPTR(prefix);
000004  f1040008          ADD      r0,r4,#8
000008  f7fffffe          BL       _ZN10CheckValueIRPKcE6VerifyIZN9Num2Ascii11WritePrefixEvEUlPVKvE_EES2_S2_T_ ; const char*& CheckValue<const char*&>::Verify<Num2Ascii::WritePrefix()::[lambda(const volatile void*) (instance 1)]>(const char*&, T1)
00000c  6806              LDR      r6,[r0,#0]
;;;131        BYTE chr;
;;;132        
;;;133        while ( (chr = *s++) != '\0' )
00000e  e003              B        |L49.24|
                  |L49.16|
;;;134        {
;;;135          WriteChar(chr);
000010  4629              MOV      r1,r5
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       _ZN9Num2Ascii9WriteCharEh ; Num2Ascii::WriteChar(unsigned char)
                  |L49.24|
000018  f8165b01          LDRB     r5,[r6],#1            ;133
00001c  2d00              CMP      r5,#0                 ;133
00001e  d1f7              BNE      |L49.16|
;;;136        }          
;;;137      }
000020  bd70              POP      {r4-r6,pc}
;;;138      
                          ENDP


                          AREA ||area_number.50||, COMGROUP=_ZN9Num2Ascii11WritePrefixEv, LINKORDER=||i._ZN9Num2Ascii11WritePrefixEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.50||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9Num2Ascii11WritePrefixEv||
                          DCD      0x00000001

                          AREA ||t._ZN9Num2Ascii6FormatIjLj16EEEjT_ii||, COMGROUP=_ZN9Num2Ascii6FormatIjLj16EEEjT_ii, CODE, READONLY, ALIGN=2

                  _ZN9Num2Ascii6FormatIjLj16EEEjT_ii PROC ; unsigned Num2Ascii::Format<unsigned, (unsigned)16>(T1, int, int)
;;;57       template<typename TYPE, unsigned RADIX>
;;;58       unsigned Format(TYPE value, int const num, int const width) noexcept
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;59       {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;60         STATIC_ASSERT(RADIX >=  2U);
;;;61         STATIC_ASSERT(RADIX <= 16U);   
;;;62         STACK_CHECK();
00000c  f7fffffe          BL       _Z10StackCheckv ; StackCheck()
;;;63         
;;;64         auto const tn(num - 1);
000010  f1a60801          SUB      r8,r6,#1
;;;65         auto const tw(width - 1);
000014  f1a70901          SUB      r9,r7,#1
;;;66         
;;;67         if ( tn > 0 || value >= RADIX )
000018  f1b80f00          CMP      r8,#0
00001c  dc01              BGT      |L56.34|
00001e  2c10              CMP      r4,#0x10
000020  d30a              BCC      |L56.56|
                  |L56.34|
;;;68         {
;;;69           TYPE const div(value / RADIX);
000022  ea4f1a14          LSR      r10,r4,#4
;;;70           
;;;71           value = value % RADIX;
000026  f004040f          AND      r4,r4,#0xf
;;;72     
;;;73           Format<TYPE, RADIX>(div, tn, tw);
00002a  464b              MOV      r3,r9
00002c  4642              MOV      r2,r8
00002e  4651              MOV      r1,r10
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       _ZN9Num2Ascii6FormatIjLj16EEEjT_ii ; unsigned Num2Ascii::Format<unsigned, (unsigned)16>(T1, int, int)
;;;74         } else
000036  e004              B        |L56.66|
                  |L56.56|
;;;75           WriteChars(tw);
000038  2220              MOVS     r2,#0x20
00003a  4649              MOV      r1,r9
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       _ZN9Num2Ascii10WriteCharsEih ; Num2Ascii::WriteChars(int, unsigned char)
                  |L56.66|
;;;76         
;;;77         if ( digits == 0U )
000042  6928              LDR      r0,[r5,#0x10]
000044  b910              CBNZ     r0,|L56.76|
;;;78           WritePrefix();
000046  4628              MOV      r0,r5
000048  f7fffffe          BL       _ZN9Num2Ascii11WritePrefixEv ; Num2Ascii::WritePrefix()
                  |L56.76|
;;;79     
;;;80         ASSERT(value < RADIX);
00004c  2c10              CMP      r4,#0x10
00004e  d200              BCS      |L56.82|
000050  e005              B        |L56.94|
                  |L56.82|
000052  4b09              LDR      r3,|L56.120|
000054  2250              MOVS     r2,#0x50
000056  4909              LDR      r1,|L56.124|
000058  4809              LDR      r0,|L56.128|
00005a  f7fffffe          BL       _Z15AssertionFailedPKcS0_jS0_ ; AssertionFailed(const char*, const char*, unsigned, const char*)
                  |L56.94|
;;;81         
;;;82         static BYTE const d2c[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',       'A', 'B', 'C', 'D', 'E', 'F' };
;;;83     
;;;84         WriteDigit(d2c[value]);
00005e  4809              LDR      r0,|L56.132|
000060  5d01              LDRB     r1,[r0,r4]
000062  4628              MOV      r0,r5
000064  f7fffffe          BL       _ZN9Num2Ascii10WriteDigitEh ; Num2Ascii::WriteDigit(unsigned char)
;;;85         //---WriteDigit(ACCESS_ARRAY(d2c, value));
;;;86         
;;;87         return GetLength();
000068  4628              MOV      r0,r5
00006a  f7fffffe          BL       _ZNK9Num2Ascii9GetLengthEv ; Num2Ascii::GetLength() const
00006e  4683              MOV      r11,r0
000070  4658              MOV      r0,r11
;;;88       }
000072  e8bd9ff0          POP      {r4-r12,pc}
;;;89     
                          ENDP

000076  0000              DCW      0x0000
                  |L56.120|
                          DCD      _ZZN9Num2Ascii6FormatIjLj16EEEjT_iiE19__PRETTY_FUNCTION__ ; unsigned Num2Ascii::Format<unsigned, (unsigned)16>(T1, int, int)::__PRETTY_FUNCTION__
                  |L56.124|
                          DCD      _ZZN9Num2Ascii6FormatIjLj16EEEjT_iiEs_2 ; unsigned Num2Ascii::Format<unsigned, (unsigned)16>(T1, int, int)::string (instance 4)
                  |L56.128|
                          DCD      _ZZN9Num2Ascii6FormatIjLj16EEEjT_iiEs_1 ; unsigned Num2Ascii::Format<unsigned, (unsigned)16>(T1, int, int)::string (instance 3)
                  |L56.132|
                          DCD      _ZZN9Num2Ascii6FormatIjLj16EEEjT_iiE3d2c ; unsigned Num2Ascii::Format<unsigned, (unsigned)16>(T1, int, int)::d2c

                          AREA ||area_number.57||, COMGROUP=_ZN9Num2Ascii6FormatIjLj16EEEjT_ii, LINKORDER=||t._ZN9Num2Ascii6FormatIjLj16EEEjT_ii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.57||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN9Num2Ascii6FormatIjLj16EEEjT_ii||
                          DCD      0x00000001

                          AREA ||i._ZN9Num2AsciiC1ERNS_5ISinkEPKc||, COMGROUP=_ZN9Num2AsciiC1ERNS_5ISinkEPKc, CODE, READONLY, ALIGN=2

                  _ZN9Num2AsciiC2ERNS_5ISinkEPKc                  ; Alternate entry point ; Num2Ascii::Num2Ascii__sub_object(Num2Ascii::ISink&, const char*)
                  _ZN9Num2AsciiC1ERNS_5ISinkEPKc PROC ; Num2Ascii::Num2Ascii(Num2Ascii::ISink&, const char*)
;;;37       
;;;38       Num2Ascii(ISink & intrf, char const s[]) noexcept : sink(intrf) { SetPrefix(s); }
;;;39       explicit Num2Ascii(ISink & intrf) noexcept : Num2Ascii(intrf, nullptr) { }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  4806              LDR      r0,|L63.36|
00000a  6020              STR      r0,[r4,#0]
00000c  6065              STR      r5,[r4,#4]
00000e  4806              LDR      r0,|L63.40|
000010  60a0              STR      r0,[r4,#8]
000012  2000              MOVS     r0,#0
000014  60e0              STR      r0,[r4,#0xc]
000016  6120              STR      r0,[r4,#0x10]
000018  4631              MOV      r1,r6
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       _ZN9Num2Ascii9SetPrefixEPKc ; Num2Ascii::SetPrefix(const char*)
000020  4620              MOV      r0,r4
000022  bd70              POP      {r4-r6,pc}
                          ENDP

                  |L63.36|
                          DCD      _ZTV9Num2Ascii+0x8 ; vtable for Num2Ascii
                  |L63.40|
                          DCD      ||.conststring||

                          AREA ||area_number.64||, COMGROUP=_ZN9Num2AsciiC1ERNS_5ISinkEPKc, LINKORDER=||i._ZN9Num2AsciiC1ERNS_5ISinkEPKc||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.64||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9Num2AsciiC1ERNS_5ISinkEPKc||
                          DCD      0x00000001

                          AREA ||t._ZN9Num2Ascii6FormatIyLj16EEEjT_ii||, COMGROUP=_ZN9Num2Ascii6FormatIyLj16EEEjT_ii, CODE, READONLY, ALIGN=2

                  _ZN9Num2Ascii6FormatIyLj16EEEjT_ii PROC ; unsigned Num2Ascii::Format<unsigned long long, (unsigned)16>(T1, int, int)
;;;57       template<typename TYPE, unsigned RADIX>
;;;58       unsigned Format(TYPE value, int const num, int const width) noexcept
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;59       {
000004  4606              MOV      r6,r0
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
00000a  f8ddb030          LDR      r11,[sp,#0x30]
;;;60         STATIC_ASSERT(RADIX >=  2U);
;;;61         STATIC_ASSERT(RADIX <= 16U);   
;;;62         STACK_CHECK();
00000e  f7fffffe          BL       _Z10StackCheckv ; StackCheck()
;;;63         
;;;64         auto const tn(num - 1);
000012  f1ab0901          SUB      r9,r11,#1
;;;65         auto const tw(width - 1);
000016  980d              LDR      r0,[sp,#0x34]
000018  f1a00a01          SUB      r10,r0,#1
;;;66         
;;;67         if ( tn > 0 || value >= RADIX )
00001c  f1b90f00          CMP      r9,#0
000020  dc04              BGT      |L70.44|
000022  2110              MOVS     r1,#0x10
000024  1a61              SUBS     r1,r4,r1
000026  f1750000          SBCS     r0,r5,#0
00002a  d317              BCC      |L70.92|
                  |L70.44|
;;;68         {
;;;69           TYPE const div(value / RADIX);
00002c  2210              MOVS     r2,#0x10
00002e  2300              MOVS     r3,#0
000030  4620              MOV      r0,r4
000032  4629              MOV      r1,r5
000034  f7fffffe          BL       __aeabi_uldivmod
000038  4607              MOV      r7,r0
00003a  4688              MOV      r8,r1
;;;70           
;;;71           value = value % RADIX;
00003c  2210              MOVS     r2,#0x10
00003e  2300              MOVS     r3,#0
000040  4620              MOV      r0,r4
000042  4629              MOV      r1,r5
000044  f7fffffe          BL       __aeabi_uldivmod
000048  4614              MOV      r4,r2
00004a  461d              MOV      r5,r3
;;;72     
;;;73           Format<TYPE, RADIX>(div, tn, tw);
00004c  463a              MOV      r2,r7
00004e  4643              MOV      r3,r8
000050  4630              MOV      r0,r6
000052  e9cd9a00          STRD     r9,r10,[sp,#0]
000056  f7fffffe          BL       _ZN9Num2Ascii6FormatIyLj16EEEjT_ii ; unsigned Num2Ascii::Format<unsigned long long, (unsigned)16>(T1, int, int)
;;;74         } else
00005a  e004              B        |L70.102|
                  |L70.92|
;;;75           WriteChars(tw);
00005c  2220              MOVS     r2,#0x20
00005e  4651              MOV      r1,r10
000060  4630              MOV      r0,r6
000062  f7fffffe          BL       _ZN9Num2Ascii10WriteCharsEih ; Num2Ascii::WriteChars(int, unsigned char)
                  |L70.102|
;;;76         
;;;77         if ( digits == 0U )
000066  6930              LDR      r0,[r6,#0x10]
000068  b910              CBNZ     r0,|L70.112|
;;;78           WritePrefix();
00006a  4630              MOV      r0,r6
00006c  f7fffffe          BL       _ZN9Num2Ascii11WritePrefixEv ; Num2Ascii::WritePrefix()
                  |L70.112|
;;;79     
;;;80         ASSERT(value < RADIX);
000070  2110              MOVS     r1,#0x10
000072  1a61              SUBS     r1,r4,r1
000074  f1750000          SBCS     r0,r5,#0
000078  d200              BCS      |L70.124|
00007a  e005              B        |L70.136|
                  |L70.124|
00007c  4b08              LDR      r3,|L70.160|
00007e  2250              MOVS     r2,#0x50
000080  4908              LDR      r1,|L70.164|
000082  4809              LDR      r0,|L70.168|
000084  f7fffffe          BL       _Z15AssertionFailedPKcS0_jS0_ ; AssertionFailed(const char*, const char*, unsigned, const char*)
                  |L70.136|
;;;81         
;;;82         static BYTE const d2c[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',       'A', 'B', 'C', 'D', 'E', 'F' };
;;;83     
;;;84         WriteDigit(d2c[value]);
000088  4808              LDR      r0,|L70.172|
00008a  5d01              LDRB     r1,[r0,r4]
00008c  4630              MOV      r0,r6
00008e  f7fffffe          BL       _ZN9Num2Ascii10WriteDigitEh ; Num2Ascii::WriteDigit(unsigned char)
;;;85         //---WriteDigit(ACCESS_ARRAY(d2c, value));
;;;86         
;;;87         return GetLength();
000092  4630              MOV      r0,r6
000094  f7fffffe          BL       _ZNK9Num2Ascii9GetLengthEv ; Num2Ascii::GetLength() const
000098  9002              STR      r0,[sp,#8]
00009a  9802              LDR      r0,[sp,#8]
;;;88       }
00009c  e8bd8ffe          POP      {r1-r11,pc}
;;;89     
                          ENDP

                  |L70.160|
                          DCD      _ZZN9Num2Ascii6FormatIyLj16EEEjT_iiE19__PRETTY_FUNCTION__ ; unsigned Num2Ascii::Format<unsigned long long, (unsigned)16>(T1, int, int)::__PRETTY_FUNCTION__
                  |L70.164|
                          DCD      _ZZN9Num2Ascii6FormatIyLj16EEEjT_iiEs_2 ; unsigned Num2Ascii::Format<unsigned long long, (unsigned)16>(T1, int, int)::string (instance 4)
                  |L70.168|
                          DCD      _ZZN9Num2Ascii6FormatIyLj16EEEjT_iiEs_1 ; unsigned Num2Ascii::Format<unsigned long long, (unsigned)16>(T1, int, int)::string (instance 3)
                  |L70.172|
                          DCD      _ZZN9Num2Ascii6FormatIyLj16EEEjT_iiE3d2c ; unsigned Num2Ascii::Format<unsigned long long, (unsigned)16>(T1, int, int)::d2c

                          AREA ||area_number.71||, COMGROUP=_ZN9Num2Ascii6FormatIyLj16EEEjT_ii, LINKORDER=||t._ZN9Num2Ascii6FormatIyLj16EEEjT_ii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.71||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN9Num2Ascii6FormatIyLj16EEEjT_ii||
                          DCD      0x00000001

                          AREA ||t._ZN9Num2Ascii6FormatIjLj10EEEjT_ii||, COMGROUP=_ZN9Num2Ascii6FormatIjLj10EEEjT_ii, CODE, READONLY, ALIGN=2

                  _ZN9Num2Ascii6FormatIjLj10EEEjT_ii PROC ; unsigned Num2Ascii::Format<unsigned, (unsigned)10>(T1, int, int)
;;;57       template<typename TYPE, unsigned RADIX>
;;;58       unsigned Format(TYPE value, int const num, int const width) noexcept
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;59       {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;60         STATIC_ASSERT(RADIX >=  2U);
;;;61         STATIC_ASSERT(RADIX <= 16U);   
;;;62         STACK_CHECK();
00000c  f7fffffe          BL       _Z10StackCheckv ; StackCheck()
;;;63         
;;;64         auto const tn(num - 1);
000010  f1a60801          SUB      r8,r6,#1
;;;65         auto const tw(width - 1);
000014  f1a70901          SUB      r9,r7,#1
;;;66         
;;;67         if ( tn > 0 || value >= RADIX )
000018  f1b80f00          CMP      r8,#0
00001c  dc01              BGT      |L77.34|
00001e  2c0a              CMP      r4,#0xa
000020  d30d              BCC      |L77.62|
                  |L77.34|
;;;68         {
;;;69           TYPE const div(value / RADIX);
000022  200a              MOVS     r0,#0xa
000024  fbb4faf0          UDIV     r10,r4,r0
;;;70           
;;;71           value = value % RADIX;
000028  fbb4f1f0          UDIV     r1,r4,r0
00002c  fb004411          MLS      r4,r0,r1,r4
;;;72     
;;;73           Format<TYPE, RADIX>(div, tn, tw);
000030  464b              MOV      r3,r9
000032  4642              MOV      r2,r8
000034  4651              MOV      r1,r10
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       _ZN9Num2Ascii6FormatIjLj10EEEjT_ii ; unsigned Num2Ascii::Format<unsigned, (unsigned)10>(T1, int, int)
;;;74         } else
00003c  e004              B        |L77.72|
                  |L77.62|
;;;75           WriteChars(tw);
00003e  2220              MOVS     r2,#0x20
000040  4649              MOV      r1,r9
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       _ZN9Num2Ascii10WriteCharsEih ; Num2Ascii::WriteChars(int, unsigned char)
                  |L77.72|
;;;76         
;;;77         if ( digits == 0U )
000048  6928              LDR      r0,[r5,#0x10]
00004a  b910              CBNZ     r0,|L77.82|
;;;78           WritePrefix();
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       _ZN9Num2Ascii11WritePrefixEv ; Num2Ascii::WritePrefix()
                  |L77.82|
;;;79     
;;;80         ASSERT(value < RADIX);
000052  2c0a              CMP      r4,#0xa
000054  d200              BCS      |L77.88|
000056  e005              B        |L77.100|
                  |L77.88|
000058  4b08              LDR      r3,|L77.124|
00005a  2250              MOVS     r2,#0x50
00005c  4908              LDR      r1,|L77.128|
00005e  4809              LDR      r0,|L77.132|
000060  f7fffffe          BL       _Z15AssertionFailedPKcS0_jS0_ ; AssertionFailed(const char*, const char*, unsigned, const char*)
                  |L77.100|
;;;81         
;;;82         static BYTE const d2c[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',       'A', 'B', 'C', 'D', 'E', 'F' };
;;;83     
;;;84         WriteDigit(d2c[value]);
000064  4808              LDR      r0,|L77.136|
000066  5d01              LDRB     r1,[r0,r4]
000068  4628              MOV      r0,r5
00006a  f7fffffe          BL       _ZN9Num2Ascii10WriteDigitEh ; Num2Ascii::WriteDigit(unsigned char)
;;;85         //---WriteDigit(ACCESS_ARRAY(d2c, value));
;;;86         
;;;87         return GetLength();
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       _ZNK9Num2Ascii9GetLengthEv ; Num2Ascii::GetLength() const
000074  4683              MOV      r11,r0
000076  4658              MOV      r0,r11
;;;88       }
000078  e8bd9ff0          POP      {r4-r12,pc}
;;;89     
                          ENDP

                  |L77.124|
                          DCD      _ZZN9Num2Ascii6FormatIjLj10EEEjT_iiE19__PRETTY_FUNCTION__ ; unsigned Num2Ascii::Format<unsigned, (unsigned)10>(T1, int, int)::__PRETTY_FUNCTION__
                  |L77.128|
                          DCD      _ZZN9Num2Ascii6FormatIjLj10EEEjT_iiEs_2 ; unsigned Num2Ascii::Format<unsigned, (unsigned)10>(T1, int, int)::string (instance 4)
                  |L77.132|
                          DCD      _ZZN9Num2Ascii6FormatIjLj10EEEjT_iiEs_1 ; unsigned Num2Ascii::Format<unsigned, (unsigned)10>(T1, int, int)::string (instance 3)
                  |L77.136|
                          DCD      _ZZN9Num2Ascii6FormatIjLj10EEEjT_iiE3d2c ; unsigned Num2Ascii::Format<unsigned, (unsigned)10>(T1, int, int)::d2c

                          AREA ||area_number.78||, COMGROUP=_ZN9Num2Ascii6FormatIjLj10EEEjT_ii, LINKORDER=||t._ZN9Num2Ascii6FormatIjLj10EEEjT_ii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.78||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN9Num2Ascii6FormatIjLj10EEEjT_ii||
                          DCD      0x00000001

                          AREA ||t._ZN9Num2Ascii6FormatIyLj10EEEjT_ii||, COMGROUP=_ZN9Num2Ascii6FormatIyLj10EEEjT_ii, CODE, READONLY, ALIGN=2

                  _ZN9Num2Ascii6FormatIyLj10EEEjT_ii PROC ; unsigned Num2Ascii::Format<unsigned long long, (unsigned)10>(T1, int, int)
;;;57       template<typename TYPE, unsigned RADIX>
;;;58       unsigned Format(TYPE value, int const num, int const width) noexcept
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;59       {
000004  4606              MOV      r6,r0
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
00000a  f8ddb030          LDR      r11,[sp,#0x30]
;;;60         STATIC_ASSERT(RADIX >=  2U);
;;;61         STATIC_ASSERT(RADIX <= 16U);   
;;;62         STACK_CHECK();
00000e  f7fffffe          BL       _Z10StackCheckv ; StackCheck()
;;;63         
;;;64         auto const tn(num - 1);
000012  f1ab0901          SUB      r9,r11,#1
;;;65         auto const tw(width - 1);
000016  980d              LDR      r0,[sp,#0x34]
000018  f1a00a01          SUB      r10,r0,#1
;;;66         
;;;67         if ( tn > 0 || value >= RADIX )
00001c  f1b90f00          CMP      r9,#0
000020  dc04              BGT      |L84.44|
000022  210a              MOVS     r1,#0xa
000024  1a61              SUBS     r1,r4,r1
000026  f1750000          SBCS     r0,r5,#0
00002a  d317              BCC      |L84.92|
                  |L84.44|
;;;68         {
;;;69           TYPE const div(value / RADIX);
00002c  220a              MOVS     r2,#0xa
00002e  2300              MOVS     r3,#0
000030  4620              MOV      r0,r4
000032  4629              MOV      r1,r5
000034  f7fffffe          BL       __aeabi_uldivmod
000038  4607              MOV      r7,r0
00003a  4688              MOV      r8,r1
;;;70           
;;;71           value = value % RADIX;
00003c  220a              MOVS     r2,#0xa
00003e  2300              MOVS     r3,#0
000040  4620              MOV      r0,r4
000042  4629              MOV      r1,r5
000044  f7fffffe          BL       __aeabi_uldivmod
000048  4614              MOV      r4,r2
00004a  461d              MOV      r5,r3
;;;72     
;;;73           Format<TYPE, RADIX>(div, tn, tw);
00004c  463a              MOV      r2,r7
00004e  4643              MOV      r3,r8
000050  4630              MOV      r0,r6
000052  e9cd9a00          STRD     r9,r10,[sp,#0]
000056  f7fffffe          BL       _ZN9Num2Ascii6FormatIyLj10EEEjT_ii ; unsigned Num2Ascii::Format<unsigned long long, (unsigned)10>(T1, int, int)
;;;74         } else
00005a  e004              B        |L84.102|
                  |L84.92|
;;;75           WriteChars(tw);
00005c  2220              MOVS     r2,#0x20
00005e  4651              MOV      r1,r10
000060  4630              MOV      r0,r6
000062  f7fffffe          BL       _ZN9Num2Ascii10WriteCharsEih ; Num2Ascii::WriteChars(int, unsigned char)
                  |L84.102|
;;;76         
;;;77         if ( digits == 0U )
000066  6930              LDR      r0,[r6,#0x10]
000068  b910              CBNZ     r0,|L84.112|
;;;78           WritePrefix();
00006a  4630              MOV      r0,r6
00006c  f7fffffe          BL       _ZN9Num2Ascii11WritePrefixEv ; Num2Ascii::WritePrefix()
                  |L84.112|
;;;79     
;;;80         ASSERT(value < RADIX);
000070  210a              MOVS     r1,#0xa
000072  1a61              SUBS     r1,r4,r1
000074  f1750000          SBCS     r0,r5,#0
000078  d200              BCS      |L84.124|
00007a  e005              B        |L84.136|
                  |L84.124|
00007c  4b08              LDR      r3,|L84.160|
00007e  2250              MOVS     r2,#0x50
000080  4908              LDR      r1,|L84.164|
000082  4809              LDR      r0,|L84.168|
000084  f7fffffe          BL       _Z15AssertionFailedPKcS0_jS0_ ; AssertionFailed(const char*, const char*, unsigned, const char*)
                  |L84.136|
;;;81         
;;;82         static BYTE const d2c[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',       'A', 'B', 'C', 'D', 'E', 'F' };
;;;83     
;;;84         WriteDigit(d2c[value]);
000088  4808              LDR      r0,|L84.172|
00008a  5d01              LDRB     r1,[r0,r4]
00008c  4630              MOV      r0,r6
00008e  f7fffffe          BL       _ZN9Num2Ascii10WriteDigitEh ; Num2Ascii::WriteDigit(unsigned char)
;;;85         //---WriteDigit(ACCESS_ARRAY(d2c, value));
;;;86         
;;;87         return GetLength();
000092  4630              MOV      r0,r6
000094  f7fffffe          BL       _ZNK9Num2Ascii9GetLengthEv ; Num2Ascii::GetLength() const
000098  9002              STR      r0,[sp,#8]
00009a  9802              LDR      r0,[sp,#8]
;;;88       }
00009c  e8bd8ffe          POP      {r1-r11,pc}
;;;89     
                          ENDP

                  |L84.160|
                          DCD      _ZZN9Num2Ascii6FormatIyLj10EEEjT_iiE19__PRETTY_FUNCTION__ ; unsigned Num2Ascii::Format<unsigned long long, (unsigned)10>(T1, int, int)::__PRETTY_FUNCTION__
                  |L84.164|
                          DCD      _ZZN9Num2Ascii6FormatIyLj10EEEjT_iiEs_2 ; unsigned Num2Ascii::Format<unsigned long long, (unsigned)10>(T1, int, int)::string (instance 4)
                  |L84.168|
                          DCD      _ZZN9Num2Ascii6FormatIyLj10EEEjT_iiEs_1 ; unsigned Num2Ascii::Format<unsigned long long, (unsigned)10>(T1, int, int)::string (instance 3)
                  |L84.172|
                          DCD      _ZZN9Num2Ascii6FormatIyLj10EEEjT_iiE3d2c ; unsigned Num2Ascii::Format<unsigned long long, (unsigned)10>(T1, int, int)::d2c

                          AREA ||area_number.85||, COMGROUP=_ZN9Num2Ascii6FormatIyLj10EEEjT_ii, LINKORDER=||t._ZN9Num2Ascii6FormatIyLj10EEEjT_ii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.85||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN9Num2Ascii6FormatIyLj10EEEjT_ii||
                          DCD      0x00000001

                          AREA ||i._ZN9Num2AsciiD1Ev||, COMGROUP=_ZN9Num2AsciiD1Ev, CODE, READONLY, ALIGN=1

                  _ZN9Num2AsciiD2Ev                  ; Alternate entry point ; Num2Ascii::~Num2Ascii__sub_object()
                  _ZN9Num2AsciiD1Ev PROC ; Num2Ascii::~Num2Ascii()
000000  4770              BX       lr                    ;1
                          ENDP


                          AREA ||area_number.92||, COMGROUP=_ZN9Num2AsciiD1Ev, LINKORDER=||i._ZN9Num2AsciiD1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.92||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9Num2AsciiD1Ev||
                          DCD      0x00000001

                          AREA ||i._ZNK9Num2Ascii9GetLengthEv||, COMGROUP=_ZNK9Num2Ascii9GetLengthEv, CODE, READONLY, ALIGN=1

                  _ZNK9Num2Ascii9GetLengthEv PROC ; Num2Ascii::GetLength() const
;;;52       
;;;53       unsigned GetLength() const noexcept { return length; }
000000  4601              MOV      r1,r0
000002  68c8              LDR      r0,[r1,#0xc]
000004  4770              BX       lr
;;;54     
                          ENDP


                          AREA ||area_number.99||, COMGROUP=_ZNK9Num2Ascii9GetLengthEv, LINKORDER=||i._ZNK9Num2Ascii9GetLengthEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.99||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK9Num2Ascii9GetLengthEv||
                          DCD      0x00000001

                          AREA ||i._ZN9Num2Ascii10WriteDigitEh||, COMGROUP=_ZN9Num2Ascii10WriteDigitEh, CODE, READONLY, ALIGN=1

                  _ZN9Num2Ascii10WriteDigitEh PROC ; Num2Ascii::WriteDigit(unsigned char)
;;;113    
;;;114      void WriteDigit(BYTE const chr) noexcept
000000  b570              PUSH     {r4-r6,lr}
;;;115      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;116        WriteChar(chr);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN9Num2Ascii9WriteCharEh ; Num2Ascii::WriteChar(unsigned char)
;;;117        digits++;
00000e  6920              LDR      r0,[r4,#0x10]
000010  1c40              ADDS     r0,r0,#1
000012  6120              STR      r0,[r4,#0x10]
;;;118      }
000014  bd70              POP      {r4-r6,pc}
;;;119      
                          ENDP


                          AREA ||area_number.106||, COMGROUP=_ZN9Num2Ascii10WriteDigitEh, LINKORDER=||i._ZN9Num2Ascii10WriteDigitEh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.106||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9Num2Ascii10WriteDigitEh||
                          DCD      0x00000001

                          AREA ||t._ZN10CheckValueIRPKcE6VerifyIZN9Num2Ascii11WritePrefixEvEUlPVKvE_EES2_S2_T_||, COMGROUP=_ZN10CheckValueIRPKcE6VerifyIZN9Num2Ascii11WritePrefixEvEUlPVKvE_EES2_S2_T_, CODE, READONLY, ALIGN=1

                  _ZN10CheckValueIRPKcE6VerifyIZN9Num2Ascii11WritePrefixEvEUlPVKvE_EES2_S2_T_ PROC ; const char*& CheckValue<const char*&>::Verify<Num2Ascii::WritePrefix()::[lambda(const volatile void*) (instance 1)]>(const char*&, T1)
;;;182      template<typename FNC>
;;;183      static TYPE & Verify(TYPE & data, FNC const lambda) noexcept
000000  b573              PUSH     {r0,r1,r4-r6,lr}
;;;184      {
000002  4604              MOV      r4,r0
;;;185        STATIC_ASSERT(noexcept(lambda(data)));
;;;186        
;;;187        lambda(data);
000004  a801              ADD      r0,sp,#4
000006  6821              LDR      r1,[r4,#0]
000008  f7fffffe          BL       _ZZN9Num2Ascii11WritePrefixEvENKUlPVKvE_clES1_ ; Num2Ascii::WritePrefix()::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const
;;;188    
;;;189        return data;
00000c  4625              MOV      r5,r4
00000e  4628              MOV      r0,r5
;;;190      }
000010  bd7c              POP      {r2-r6,pc}
;;;191    };
                          ENDP


                          AREA ||area_number.113||, COMGROUP=_ZN10CheckValueIRPKcE6VerifyIZN9Num2Ascii11WritePrefixEvEUlPVKvE_EES2_S2_T_, LINKORDER=||t._ZN10CheckValueIRPKcE6VerifyIZN9Num2Ascii11WritePrefixEvEUlPVKvE_EES2_S2_T_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.113||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10CheckValueIRPKcE6VerifyIZN9Num2Ascii11WritePrefixEvEUlPVKvE_EES2_S2_T_||
                          DCD      0x00000001

                          AREA ||i._ZN9Num2Ascii10WriteCharsEih||, COMGROUP=_ZN9Num2Ascii10WriteCharsEih, CODE, READONLY, ALIGN=1

                  _ZN9Num2Ascii10WriteCharsEih PROC ; Num2Ascii::WriteChars(int, unsigned char)
;;;119      
;;;120      void WriteChars(int cntr, BYTE const chr = ' ') noexcept
000000  b570              PUSH     {r4-r6,lr}
;;;121      {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;122        while ( cntr-- > 0 )
000008  e003              B        |L119.18|
                  |L119.10|
;;;123        {
;;;124          WriteChar(chr);
00000a  4629              MOV      r1,r5
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       _ZN9Num2Ascii9WriteCharEh ; Num2Ascii::WriteChar(unsigned char)
                  |L119.18|
000012  1e20              SUBS     r0,r4,#0              ;122
000014  f1a40401          SUB      r4,r4,#1              ;122
000018  dcf7              BGT      |L119.10|
;;;125        }
;;;126      }
00001a  bd70              POP      {r4-r6,pc}
;;;127    
                          ENDP


                          AREA ||area_number.120||, COMGROUP=_ZN9Num2Ascii10WriteCharsEih, LINKORDER=||i._ZN9Num2Ascii10WriteCharsEih||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.120||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9Num2Ascii10WriteCharsEih||
                          DCD      0x00000001

                          AREA ||i._ZN9Num2Ascii9SetPrefixEPKc||, COMGROUP=_ZN9Num2Ascii9SetPrefixEPKc, CODE, READONLY, ALIGN=1

                  _ZN9Num2Ascii9SetPrefixEPKc PROC ; Num2Ascii::SetPrefix(const char*)
;;;50     
;;;51       void SetPrefix(char const s[]) noexcept { if ( s == nullptr ) ResPrefix(); else prefix = s; }
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  b91c              CBNZ     r4,|L126.16|
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       _ZN9Num2Ascii9ResPrefixEv ; Num2Ascii::ResPrefix()
00000e  e000              B        |L126.18|
                  |L126.16|
000010  60ac              STR      r4,[r5,#8]
                  |L126.18|
000012  bd70              POP      {r4-r6,pc}
;;;52       
                          ENDP


                          AREA ||area_number.127||, COMGROUP=_ZN9Num2Ascii9SetPrefixEPKc, LINKORDER=||i._ZN9Num2Ascii9SetPrefixEPKc||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.127||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9Num2Ascii9SetPrefixEPKc||
                          DCD      0x00000001

                          AREA ||i._ZN9Num2AsciiC1ERNS_5ISinkE||, COMGROUP=_ZN9Num2AsciiC1ERNS_5ISinkE, CODE, READONLY, ALIGN=1

                  _ZN9Num2AsciiC2ERNS_5ISinkE                  ; Alternate entry point ; Num2Ascii::Num2Ascii__sub_object(Num2Ascii::ISink&)
                  _ZN9Num2AsciiC1ERNS_5ISinkE PROC ; Num2Ascii::Num2Ascii(Num2Ascii::ISink&)
;;;38       Num2Ascii(ISink & intrf, char const s[]) noexcept : sink(intrf) { SetPrefix(s); }
;;;39       explicit Num2Ascii(ISink & intrf) noexcept : Num2Ascii(intrf, nullptr) { }
;;;40     
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  2200              MOVS     r2,#0
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN9Num2AsciiC1ERNS_5ISinkEPKc ; Num2Ascii::Num2Ascii(Num2Ascii::ISink&, const char*)
000010  4604              MOV      r4,r0
000012  4620              MOV      r0,r4
000014  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||area_number.134||, COMGROUP=_ZN9Num2AsciiC1ERNS_5ISinkE, LINKORDER=||i._ZN9Num2AsciiC1ERNS_5ISinkE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.134||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9Num2AsciiC1ERNS_5ISinkE||
                          DCD      0x00000001

                          AREA ||i._ZN13SinkConverterD1Ev||, COMGROUP=_ZN13SinkConverterD1Ev, CODE, READONLY, ALIGN=1

                  _ZN13SinkConverterD2Ev                  ; Alternate entry point ; SinkConverter::~SinkConverter__sub_object()
                  _ZN13SinkConverterD1Ev PROC ; SinkConverter::~SinkConverter()
000000  b510              PUSH     {r4,lr}               ;1
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _ZN9Num2Ascii5ISinkD2Ev ; Num2Ascii::ISink::~ISink__sub_object()
00000a  4604              MOV      r4,r0
00000c  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||area_number.141||, COMGROUP=_ZN13SinkConverterD1Ev, LINKORDER=||i._ZN13SinkConverterD1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.141||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN13SinkConverterD1Ev||
                          DCD      0x00000001

                          AREA ||i._ZN9Formatter10ResetWidthEv||, COMGROUP=_ZN9Formatter10ResetWidthEv, CODE, READONLY, ALIGN=1

                  _ZN9Formatter10ResetWidthEv PROC ; Formatter::ResetWidth()
;;;480      /// Rückstellen der Stellenanzahl und Breite.
;;;481      void ResetWidth() noexcept
000000  2100              MOVS     r1,#0
;;;482      {
;;;483        mindig = 0;
000002  6081              STR      r1,[r0,#8]
;;;484        minlen = 0;
000004  60c1              STR      r1,[r0,#0xc]
;;;485      }
000006  4770              BX       lr
;;;486    
                          ENDP


                          AREA ||area_number.148||, COMGROUP=_ZN9Formatter10ResetWidthEv, LINKORDER=||i._ZN9Formatter10ResetWidthEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.148||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9Formatter10ResetWidthEv||
                          DCD      0x00000001

                          AREA ||i._ZN13SinkConverterC1ERN9Formatter5ISinkE||, COMGROUP=_ZN13SinkConverterC1ERN9Formatter5ISinkE, CODE, READONLY, ALIGN=2

                  _ZN13SinkConverterC2ERN9Formatter5ISinkE                  ; Alternate entry point ; SinkConverter::SinkConverter__sub_object(Formatter::ISink&)
                  _ZN13SinkConverterC1ERN9Formatter5ISinkE PROC ; SinkConverter::SinkConverter(Formatter::ISink&)
;;;59         
;;;60       constexpr SinkConverter(Formatter::ISink & intrf) noexcept : sink(intrf) { }
;;;61       
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       _ZN9Num2Ascii5ISinkC2Ev ; Num2Ascii::ISink::ISink__sub_object()
00000c  4604              MOV      r4,r0
00000e  4802              LDR      r0,|L154.24|
000010  6020              STR      r0,[r4,#0]
000012  6065              STR      r5,[r4,#4]
000014  4620              MOV      r0,r4
000016  bd70              POP      {r4-r6,pc}
                          ENDP

                  |L154.24|
                          DCD      _ZTV13SinkConverter+0x8 ; vtable for SinkConverter

                          AREA ||area_number.155||, COMGROUP=_ZN13SinkConverterC1ERN9Formatter5ISinkE, LINKORDER=||i._ZN13SinkConverterC1ERN9Formatter5ISinkE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.155||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN13SinkConverterC1ERN9Formatter5ISinkE||
                          DCD      0x00000001

                          AREA ||i._ZN9Formatter17WriteByteRepeatedEhi||, COMGROUP=_ZN9Formatter17WriteByteRepeatedEhi, CODE, READONLY, ALIGN=1

                  _ZN9Formatter17WriteByteRepeatedEhi PROC ; Formatter::WriteByteRepeated(unsigned char, int)
;;;488    
;;;489      void WriteByteRepeated(BYTE const chr, int n) noexcept
000000  b570              PUSH     {r4-r6,lr}
;;;490      {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;491        while ( n-- > 0 ) 
000008  e003              B        |L161.18|
                  |L161.10|
;;;492          WriteByte(chr);
00000a  4631              MOV      r1,r6
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       _ZN9Formatter9WriteByteEh ; Formatter::WriteByte(unsigned char)
                  |L161.18|
000012  1e20              SUBS     r0,r4,#0              ;491
000014  f1a40401          SUB      r4,r4,#1              ;491
000018  dcf7              BGT      |L161.10|
;;;493      }
00001a  bd70              POP      {r4-r6,pc}
;;;494      
                          ENDP


                          AREA ||area_number.162||, COMGROUP=_ZN9Formatter17WriteByteRepeatedEhi, LINKORDER=||i._ZN9Formatter17WriteByteRepeatedEhi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.162||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9Formatter17WriteByteRepeatedEhi||
                          DCD      0x00000001

                          AREA ||t._ZN10CheckValueIRPKcE6VerifyIZN9Formatter8PrintTxtES1_iEUlPVKvE_EES2_S2_T_||, COMGROUP=_ZN10CheckValueIRPKcE6VerifyIZN9Formatter8PrintTxtES1_iEUlPVKvE_EES2_S2_T_, CODE, READONLY, ALIGN=1

                  _ZN10CheckValueIRPKcE6VerifyIZN9Formatter8PrintTxtES1_iEUlPVKvE_EES2_S2_T_ PROC ; const char*& CheckValue<const char*&>::Verify<Formatter::PrintTxt(const char*, int)::[lambda(const volatile void*) (instance 1)]>(const char*&, T1)
;;;182      template<typename FNC>
;;;183      static TYPE & Verify(TYPE & data, FNC const lambda) noexcept
000000  b573              PUSH     {r0,r1,r4-r6,lr}
;;;184      {
000002  4604              MOV      r4,r0
;;;185        STATIC_ASSERT(noexcept(lambda(data)));
;;;186        
;;;187        lambda(data);
000004  a801              ADD      r0,sp,#4
000006  6821              LDR      r1,[r4,#0]
000008  f7fffffe          BL       _ZZN9Formatter8PrintTxtEPKciENKUlPVKvE_clES3_ ; Formatter::PrintTxt(const char*, int)::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const
;;;188    
;;;189        return data;
00000c  4625              MOV      r5,r4
00000e  4628              MOV      r0,r5
;;;190      }
000010  bd7c              POP      {r2-r6,pc}
;;;191    };
                          ENDP


                          AREA ||area_number.169||, COMGROUP=_ZN10CheckValueIRPKcE6VerifyIZN9Formatter8PrintTxtES1_iEUlPVKvE_EES2_S2_T_, LINKORDER=||t._ZN10CheckValueIRPKcE6VerifyIZN9Formatter8PrintTxtES1_iEUlPVKvE_EES2_S2_T_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.169||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10CheckValueIRPKcE6VerifyIZN9Formatter8PrintTxtES1_iEUlPVKvE_EES2_S2_T_||
                          DCD      0x00000001

                          AREA ||i._ZN9Formatter8PrintTxtEPKc||, COMGROUP=_ZN9Formatter8PrintTxtEPKc, CODE, READONLY, ALIGN=1

                  _ZN9Formatter8PrintTxtEPKc PROC ; Formatter::PrintTxt(const char*)
;;;380      /// \param[in] text zeigt auf den darzustellenden Text (Steuerzeichen möglich, werden jedoch sinnvoll dargestellt).
;;;381      void PrintTxt(char const * const text) noexcept { PrintTxt(text, minlen); ResetWidth(); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  68e2              LDR      r2,[r4,#0xc]
00000c  f7fffffe          BL       _ZN9Formatter8PrintTxtEPKci ; Formatter::PrintTxt(const char*, int)
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       _ZN9Formatter10ResetWidthEv ; Formatter::ResetWidth()
000016  bd70              POP      {r4-r6,pc}
;;;382    
                          ENDP


                          AREA ||area_number.176||, COMGROUP=_ZN9Formatter8PrintTxtEPKc, LINKORDER=||i._ZN9Formatter8PrintTxtEPKc||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.176||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9Formatter8PrintTxtEPKc||
                          DCD      0x00000001

                          AREA ||i._ZN9Formatter8PrintChrEh||, COMGROUP=_ZN9Formatter8PrintChrEh, CODE, READONLY, ALIGN=1

                  _ZN9Formatter8PrintChrEh PROC ; Formatter::PrintChr(unsigned char)
;;;363      /// \param[in] chr ist der ASCII-Code des darzustellenden Zeichens.
;;;364      void PrintChr(BYTE const chr) noexcept { WriteByte(chr); ResetWidth(); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN9Formatter9WriteByteEh ; Formatter::WriteByte(unsigned char)
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       _ZN9Formatter10ResetWidthEv ; Formatter::ResetWidth()
000014  bd70              POP      {r4-r6,pc}
;;;365    
                          ENDP


                          AREA ||area_number.183||, COMGROUP=_ZN9Formatter8PrintChrEh, LINKORDER=||i._ZN9Formatter8PrintChrEh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.183||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9Formatter8PrintChrEh||
                          DCD      0x00000001

                          AREA ||t._ZN10CheckValueIRPKcE6VerifyIZN9Formatter14PrintTxtQuotedES1_EUlPVKvE_EES2_S2_T_||, COMGROUP=_ZN10CheckValueIRPKcE6VerifyIZN9Formatter14PrintTxtQuotedES1_EUlPVKvE_EES2_S2_T_, CODE, READONLY, ALIGN=1

                  _ZN10CheckValueIRPKcE6VerifyIZN9Formatter14PrintTxtQuotedES1_EUlPVKvE_EES2_S2_T_ PROC ; const char*& CheckValue<const char*&>::Verify<Formatter::PrintTxtQuoted(const char*)::[lambda(const volatile void*) (instance 1)]>(const char*&, T1)
;;;182      template<typename FNC>
;;;183      static TYPE & Verify(TYPE & data, FNC const lambda) noexcept
000000  b573              PUSH     {r0,r1,r4-r6,lr}
;;;184      {
000002  4604              MOV      r4,r0
;;;185        STATIC_ASSERT(noexcept(lambda(data)));
;;;186        
;;;187        lambda(data);
000004  a801              ADD      r0,sp,#4
000006  6821              LDR      r1,[r4,#0]
000008  f7fffffe          BL       _ZZN9Formatter14PrintTxtQuotedEPKcENKUlPVKvE_clES3_ ; Formatter::PrintTxtQuoted(const char*)::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const
;;;188    
;;;189        return data;
00000c  4625              MOV      r5,r4
00000e  4628              MOV      r0,r5
;;;190      }
000010  bd7c              POP      {r2-r6,pc}
;;;191    };
                          ENDP


                          AREA ||area_number.190||, COMGROUP=_ZN10CheckValueIRPKcE6VerifyIZN9Formatter14PrintTxtQuotedES1_EUlPVKvE_EES2_S2_T_, LINKORDER=||t._ZN10CheckValueIRPKcE6VerifyIZN9Formatter14PrintTxtQuotedES1_EUlPVKvE_EES2_S2_T_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.190||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10CheckValueIRPKcE6VerifyIZN9Formatter14PrintTxtQuotedES1_EUlPVKvE_EES2_S2_T_||
                          DCD      0x00000001

                          AREA ||i._ZN9Formatter8SetRadixENS_11RadixMdTypeE||, COMGROUP=_ZN9Formatter8SetRadixENS_11RadixMdTypeE, CODE, READONLY, ALIGN=1

                  _ZN9Formatter8SetRadixENS_11RadixMdTypeE PROC ; Formatter::SetRadix(Formatter::RadixMdType)
;;;447      /// \param[in] mode gibt die Zahlenbasis an.
;;;448      void SetRadix(RadixMdType const mode) noexcept { radix = mode; }
000000  7401              STRB     r1,[r0,#0x10]
000002  4770              BX       lr
;;;449    
                          ENDP


                          AREA ||area_number.197||, COMGROUP=_ZN9Formatter8SetRadixENS_11RadixMdTypeE, LINKORDER=||i._ZN9Formatter8SetRadixENS_11RadixMdTypeE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.197||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9Formatter8SetRadixENS_11RadixMdTypeE||
                          DCD      0x00000001

                          AREA ||i._ZN9Formatter7SetSignEb||, COMGROUP=_ZN9Formatter7SetSignEb, CODE, READONLY, ALIGN=1

                  _ZN9Formatter7SetSignEb PROC ; Formatter::SetSign(bool)
;;;453      /// \param[in] mode ist \c true, wenn alle Dezimalzahlen (auch die positiven oder 0) immer mit Vorzeichen ausgegben werden sollen.
;;;454      void SetSign(bool const mode = true) noexcept { sign = mode; }
000000  7541              STRB     r1,[r0,#0x15]
000002  4770              BX       lr
;;;455    
                          ENDP


                          AREA ||area_number.204||, COMGROUP=_ZN9Formatter7SetSignEb, LINKORDER=||i._ZN9Formatter7SetSignEb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.204||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9Formatter7SetSignEb||
                          DCD      0x00000001

                          AREA ||i._ZN9Formatter9SetPrefixEb||, COMGROUP=_ZN9Formatter9SetPrefixEb, CODE, READONLY, ALIGN=1

                  _ZN9Formatter9SetPrefixEb PROC ; Formatter::SetPrefix(bool)
;;;457      /// \param[in] mode ist \c true, wenn alle hexadezimale Darstellungen mit "0x" beginnen sollen.
;;;458      void SetPrefix(bool const mode = true) noexcept { mark = mode; }
000000  7501              STRB     r1,[r0,#0x14]
000002  4770              BX       lr
;;;459    
                          ENDP


                          AREA ||area_number.211||, COMGROUP=_ZN9Formatter9SetPrefixEb, LINKORDER=||i._ZN9Formatter9SetPrefixEb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.211||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9Formatter9SetPrefixEb||
                          DCD      0x00000001

                          AREA ||i._ZN9Num2Ascii9ResPrefixEv||, COMGROUP=_ZN9Num2Ascii9ResPrefixEv, CODE, READONLY, ALIGN=2

                  _ZN9Num2Ascii9ResPrefixEv PROC ; Num2Ascii::ResPrefix()
;;;48       
;;;49       void ResPrefix() noexcept { prefix = ""; }
000000  4901              LDR      r1,|L217.8|
000002  6081              STR      r1,[r0,#8]
000004  4770              BX       lr
;;;50     
                          ENDP

000006  0000              DCW      0x0000
                  |L217.8|
                          DCD      _ZZN9Num2Ascii9ResPrefixEvEs ; Num2Ascii::ResPrefix()::string

                          AREA ||area_number.218||, COMGROUP=_ZN9Num2Ascii9ResPrefixEv, LINKORDER=||i._ZN9Num2Ascii9ResPrefixEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.218||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9Num2Ascii9ResPrefixEv||
                          DCD      0x00000001

                          AREA ||i._ZN9Num2Ascii5ISinkD2Ev||, COMGROUP=_ZN9Num2Ascii5ISinkD2Ev, CODE, READONLY, ALIGN=1

                  _ZN9Num2Ascii5ISinkD2Ev PROC ; Num2Ascii::ISink::~ISink__sub_object()
;;;29         
;;;30         virtual ~ISink() = default;
000000  4770              BX       lr
                          ENDP


                          AREA ||area_number.225||, COMGROUP=_ZN9Num2Ascii5ISinkD2Ev, LINKORDER=||i._ZN9Num2Ascii5ISinkD2Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.225||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9Num2Ascii5ISinkD2Ev||
                          DCD      0x00000001

                          AREA ||i._ZN9Num2Ascii5ISinkC2Ev||, COMGROUP=_ZN9Num2Ascii5ISinkC2Ev, CODE, READONLY, ALIGN=2

                  _ZN9Num2Ascii5ISinkC2Ev PROC ; Num2Ascii::ISink::ISink__sub_object()
;;;22         
;;;23         constexpr ISink() noexcept { }
000000  4901              LDR      r1,|L231.8|
000002  6001              STR      r1,[r0,#0]
000004  4770              BX       lr
;;;24         
                          ENDP

000006  0000              DCW      0x0000
                  |L231.8|
                          DCD      _ZTVN9Num2Ascii5ISinkE+0x8 ; vtable for Num2Ascii::ISink

                          AREA ||area_number.232||, COMGROUP=_ZN9Num2Ascii5ISinkC2Ev, LINKORDER=||i._ZN9Num2Ascii5ISinkC2Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.232||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9Num2Ascii5ISinkC2Ev||
                          DCD      0x00000001

                          AREA ||.constdata__ZTV9Num2Ascii||, COMGROUP=_ZTV9Num2Ascii, DATA, READONLY, ALIGN=2

                  _ZTV9Num2Ascii ; vtable for Num2Ascii
                          DCD      0x00000000
                          DCD      _ZTI9Num2Ascii ; typeinfo for Num2Ascii
                          DCD      _ZN9Num2AsciiD1Ev ; Num2Ascii::~Num2Ascii()
                          DCD      _ZN9Num2AsciiD0Ev ; Num2Ascii::~Num2Ascii__deallocating()

                          AREA ||.constdata__ZTVN9Num2Ascii5ISinkE||, COMGROUP=_ZTVN9Num2Ascii5ISinkE, DATA, READONLY, ALIGN=2

                  _ZTVN9Num2Ascii5ISinkE ; vtable for Num2Ascii::ISink
                          DCD      0x00000000
                          DCD      _ZTIN9Num2Ascii5ISinkE ; typeinfo for Num2Ascii::ISink
                          DCD      _ZN9Num2Ascii5ISinkD2Ev ; Num2Ascii::ISink::~ISink__sub_object()
                          DCD      _ZN9Num2Ascii5ISinkD0Ev ; Num2Ascii::ISink::~ISink__deallocating()
                          DCD      __cxa_pure_virtual

                          AREA ||.constdata__ZTV13SinkConverter||, COMGROUP=_ZTV13SinkConverter, DATA, READONLY, ALIGN=2

                  _ZTV13SinkConverter ; vtable for SinkConverter
                          DCD      0x00000000
                          DCD      _ZTI13SinkConverter ; typeinfo for SinkConverter
                          DCD      _ZN13SinkConverterD1Ev ; SinkConverter::~SinkConverter()
                          DCD      _ZN13SinkConverterD0Ev ; SinkConverter::~SinkConverter__deallocating()
                          DCD      _ZN13SinkConverter9WriteByteEh ; SinkConverter::WriteByte(unsigned char)

                          AREA ||.constdata__ZZN9Num2Ascii6FormatIjLj16EEEjT_iiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN9Num2Ascii6FormatIjLj16EEEjT_iiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN9Num2Ascii6FormatIjLj16EEEjT_iiE19__PRETTY_FUNCTION__ ; unsigned Num2Ascii::Format<unsigned, (unsigned)16>(T1, int, int)::__PRETTY_FUNCTION__
000000  756e7369          DCB      0x75,0x6e,0x73,0x69
000004  676e6564          DCB      0x67,0x6e,0x65,0x64
000008  20696e74          DCB      0x20,0x69,0x6e,0x74
00000c  204e756d          DCB      0x20,0x4e,0x75,0x6d
000010  32417363          DCB      0x32,0x41,0x73,0x63
000014  69693a3a          DCB      0x69,0x69,0x3a,0x3a
000018  466f726d          DCB      0x46,0x6f,0x72,0x6d
00001c  61742854          DCB      0x61,0x74,0x28,0x54
000020  5950452c          DCB      0x59,0x50,0x45,0x2c
000024  20696e74          DCB      0x20,0x69,0x6e,0x74
000028  2c20696e          DCB      0x2c,0x20,0x69,0x6e
00002c  7429205b          DCB      0x74,0x29,0x20,0x5b
000030  77697468          DCB      0x77,0x69,0x74,0x68
000034  20545950          DCB      0x20,0x54,0x59,0x50
000038  45203d20          DCB      0x45,0x20,0x3d,0x20
00003c  756e7369          DCB      0x75,0x6e,0x73,0x69
000040  676e6564          DCB      0x67,0x6e,0x65,0x64
000044  20696e74          DCB      0x20,0x69,0x6e,0x74
000048  2c205241          DCB      0x2c,0x20,0x52,0x41
00004c  44495820          DCB      0x44,0x49,0x58,0x20
000050  3d203136          DCB      0x3d,0x20,0x31,0x36
000054  555d00            DCB      0x55,0x5d,0x00

                          AREA ||.constdata__ZZN9Num2Ascii6FormatIjLj16EEEjT_iiE3d2c||, COMGROUP=_ZZN9Num2Ascii6FormatIjLj16EEEjT_iiE3d2c, DATA, READONLY, ALIGN=0

                  _ZZN9Num2Ascii6FormatIjLj16EEEjT_iiE3d2c ; unsigned Num2Ascii::Format<unsigned, (unsigned)16>(T1, int, int)::d2c
000000  30313233          DCB      0x30,0x31,0x32,0x33
000004  34353637          DCB      0x34,0x35,0x36,0x37
000008  38394142          DCB      0x38,0x39,0x41,0x42
00000c  43444546          DCB      0x43,0x44,0x45,0x46

                          AREA ||.constdata__ZZN9Num2Ascii6FormatIyLj16EEEjT_iiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN9Num2Ascii6FormatIyLj16EEEjT_iiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN9Num2Ascii6FormatIyLj16EEEjT_iiE19__PRETTY_FUNCTION__ ; unsigned Num2Ascii::Format<unsigned long long, (unsigned)16>(T1, int, int)::__PRETTY_FUNCTION__
000000  756e7369          DCB      0x75,0x6e,0x73,0x69
000004  676e6564          DCB      0x67,0x6e,0x65,0x64
000008  20696e74          DCB      0x20,0x69,0x6e,0x74
00000c  204e756d          DCB      0x20,0x4e,0x75,0x6d
000010  32417363          DCB      0x32,0x41,0x73,0x63
000014  69693a3a          DCB      0x69,0x69,0x3a,0x3a
000018  466f726d          DCB      0x46,0x6f,0x72,0x6d
00001c  61742854          DCB      0x61,0x74,0x28,0x54
000020  5950452c          DCB      0x59,0x50,0x45,0x2c
000024  20696e74          DCB      0x20,0x69,0x6e,0x74
000028  2c20696e          DCB      0x2c,0x20,0x69,0x6e
00002c  7429205b          DCB      0x74,0x29,0x20,0x5b
000030  77697468          DCB      0x77,0x69,0x74,0x68
000034  20545950          DCB      0x20,0x54,0x59,0x50
000038  45203d20          DCB      0x45,0x20,0x3d,0x20
00003c  756e7369          DCB      0x75,0x6e,0x73,0x69
000040  676e6564          DCB      0x67,0x6e,0x65,0x64
000044  206c6f6e          DCB      0x20,0x6c,0x6f,0x6e
000048  67206c6f          DCB      0x67,0x20,0x6c,0x6f
00004c  6e672c20          DCB      0x6e,0x67,0x2c,0x20
000050  52414449          DCB      0x52,0x41,0x44,0x49
000054  58203d20          DCB      0x58,0x20,0x3d,0x20
000058  3136555d          DCB      0x31,0x36,0x55,0x5d
00005c  00                DCB      0x00

                          AREA ||.constdata__ZZN9Num2Ascii6FormatIyLj16EEEjT_iiE3d2c||, COMGROUP=_ZZN9Num2Ascii6FormatIyLj16EEEjT_iiE3d2c, DATA, READONLY, ALIGN=0

                  _ZZN9Num2Ascii6FormatIyLj16EEEjT_iiE3d2c ; unsigned Num2Ascii::Format<unsigned long long, (unsigned)16>(T1, int, int)::d2c
000000  30313233          DCB      0x30,0x31,0x32,0x33
000004  34353637          DCB      0x34,0x35,0x36,0x37
000008  38394142          DCB      0x38,0x39,0x41,0x42
00000c  43444546          DCB      0x43,0x44,0x45,0x46

                          AREA ||.constdata__ZZN9Num2Ascii6FormatIjLj10EEEjT_iiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN9Num2Ascii6FormatIjLj10EEEjT_iiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN9Num2Ascii6FormatIjLj10EEEjT_iiE19__PRETTY_FUNCTION__ ; unsigned Num2Ascii::Format<unsigned, (unsigned)10>(T1, int, int)::__PRETTY_FUNCTION__
000000  756e7369          DCB      0x75,0x6e,0x73,0x69
000004  676e6564          DCB      0x67,0x6e,0x65,0x64
000008  20696e74          DCB      0x20,0x69,0x6e,0x74
00000c  204e756d          DCB      0x20,0x4e,0x75,0x6d
000010  32417363          DCB      0x32,0x41,0x73,0x63
000014  69693a3a          DCB      0x69,0x69,0x3a,0x3a
000018  466f726d          DCB      0x46,0x6f,0x72,0x6d
00001c  61742854          DCB      0x61,0x74,0x28,0x54
000020  5950452c          DCB      0x59,0x50,0x45,0x2c
000024  20696e74          DCB      0x20,0x69,0x6e,0x74
000028  2c20696e          DCB      0x2c,0x20,0x69,0x6e
00002c  7429205b          DCB      0x74,0x29,0x20,0x5b
000030  77697468          DCB      0x77,0x69,0x74,0x68
000034  20545950          DCB      0x20,0x54,0x59,0x50
000038  45203d20          DCB      0x45,0x20,0x3d,0x20
00003c  756e7369          DCB      0x75,0x6e,0x73,0x69
000040  676e6564          DCB      0x67,0x6e,0x65,0x64
000044  20696e74          DCB      0x20,0x69,0x6e,0x74
000048  2c205241          DCB      0x2c,0x20,0x52,0x41
00004c  44495820          DCB      0x44,0x49,0x58,0x20
000050  3d203130          DCB      0x3d,0x20,0x31,0x30
000054  555d00            DCB      0x55,0x5d,0x00

                          AREA ||.constdata__ZZN9Num2Ascii6FormatIjLj10EEEjT_iiE3d2c||, COMGROUP=_ZZN9Num2Ascii6FormatIjLj10EEEjT_iiE3d2c, DATA, READONLY, ALIGN=0

                  _ZZN9Num2Ascii6FormatIjLj10EEEjT_iiE3d2c ; unsigned Num2Ascii::Format<unsigned, (unsigned)10>(T1, int, int)::d2c
000000  30313233          DCB      0x30,0x31,0x32,0x33
000004  34353637          DCB      0x34,0x35,0x36,0x37
000008  38394142          DCB      0x38,0x39,0x41,0x42
00000c  43444546          DCB      0x43,0x44,0x45,0x46

                          AREA ||.constdata__ZZN9Num2Ascii6FormatIyLj10EEEjT_iiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN9Num2Ascii6FormatIyLj10EEEjT_iiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN9Num2Ascii6FormatIyLj10EEEjT_iiE19__PRETTY_FUNCTION__ ; unsigned Num2Ascii::Format<unsigned long long, (unsigned)10>(T1, int, int)::__PRETTY_FUNCTION__
000000  756e7369          DCB      0x75,0x6e,0x73,0x69
000004  676e6564          DCB      0x67,0x6e,0x65,0x64
000008  20696e74          DCB      0x20,0x69,0x6e,0x74
00000c  204e756d          DCB      0x20,0x4e,0x75,0x6d
000010  32417363          DCB      0x32,0x41,0x73,0x63
000014  69693a3a          DCB      0x69,0x69,0x3a,0x3a
000018  466f726d          DCB      0x46,0x6f,0x72,0x6d
00001c  61742854          DCB      0x61,0x74,0x28,0x54
000020  5950452c          DCB      0x59,0x50,0x45,0x2c
000024  20696e74          DCB      0x20,0x69,0x6e,0x74
000028  2c20696e          DCB      0x2c,0x20,0x69,0x6e
00002c  7429205b          DCB      0x74,0x29,0x20,0x5b
000030  77697468          DCB      0x77,0x69,0x74,0x68
000034  20545950          DCB      0x20,0x54,0x59,0x50
000038  45203d20          DCB      0x45,0x20,0x3d,0x20
00003c  756e7369          DCB      0x75,0x6e,0x73,0x69
000040  676e6564          DCB      0x67,0x6e,0x65,0x64
000044  206c6f6e          DCB      0x20,0x6c,0x6f,0x6e
000048  67206c6f          DCB      0x67,0x20,0x6c,0x6f
00004c  6e672c20          DCB      0x6e,0x67,0x2c,0x20
000050  52414449          DCB      0x52,0x41,0x44,0x49
000054  58203d20          DCB      0x58,0x20,0x3d,0x20
000058  3130555d          DCB      0x31,0x30,0x55,0x5d
00005c  00                DCB      0x00

                          AREA ||.constdata__ZZN9Num2Ascii6FormatIyLj10EEEjT_iiE3d2c||, COMGROUP=_ZZN9Num2Ascii6FormatIyLj10EEEjT_iiE3d2c, DATA, READONLY, ALIGN=0

                  _ZZN9Num2Ascii6FormatIyLj10EEEjT_iiE3d2c ; unsigned Num2Ascii::Format<unsigned long long, (unsigned)10>(T1, int, int)::d2c
000000  30313233          DCB      0x30,0x31,0x32,0x33
000004  34353637          DCB      0x34,0x35,0x36,0x37
000008  38394142          DCB      0x38,0x39,0x41,0x42
00000c  43444546          DCB      0x43,0x44,0x45,0x46

                          AREA ||.constdata__ZTIN9Num2Ascii5ISinkE||, COMGROUP=_ZTIN9Num2Ascii5ISinkE, DATA, READONLY, ALIGN=2

                  _ZTIN9Num2Ascii5ISinkE ; typeinfo for Num2Ascii::ISink
                          DCD      _ZTVN10__cxxabiv117__class_type_infoE+0x8 ; vtable for __cxxabiv1::__class_type_info
                          DCD      _ZTSN9Num2Ascii5ISinkE ; typeinfo name for Num2Ascii::ISink

                          AREA ||.constdata__ZTI9Num2Ascii||, COMGROUP=_ZTI9Num2Ascii, DATA, READONLY, ALIGN=2

                  _ZTI9Num2Ascii ; typeinfo for Num2Ascii
                          DCD      _ZTVN10__cxxabiv117__class_type_infoE+0x8 ; vtable for __cxxabiv1::__class_type_info
                          DCD      _ZTS9Num2Ascii ; typeinfo name for Num2Ascii

                          AREA ||.constdata__ZTI13SinkConverter||, COMGROUP=_ZTI13SinkConverter, DATA, READONLY, ALIGN=2

                  _ZTI13SinkConverter ; typeinfo for SinkConverter
                          DCD      _ZTVN10__cxxabiv120__si_class_type_infoE+0x8 ; vtable for __cxxabiv1::__si_class_type_info
                          DCD      _ZTS13SinkConverter ; typeinfo name for SinkConverter
                          DCD      _ZTIN9Num2Ascii5ISinkE ; typeinfo for Num2Ascii::ISink

                          AREA ||.constdata__ZTS9Num2Ascii||, COMGROUP=_ZTS9Num2Ascii, DATA, READONLY, ALIGN=0

                  _ZTS9Num2Ascii ; typeinfo name for Num2Ascii
000000  394e756d          DCB      0x39,0x4e,0x75,0x6d
000004  32417363          DCB      0x32,0x41,0x73,0x63
000008  696900            DCB      0x69,0x69,0x00

                          AREA ||.constdata__ZTSN9Num2Ascii5ISinkE||, COMGROUP=_ZTSN9Num2Ascii5ISinkE, DATA, READONLY, ALIGN=0

                  _ZTSN9Num2Ascii5ISinkE ; typeinfo name for Num2Ascii::ISink
000000  4e394e75          DCB      0x4e,0x39,0x4e,0x75
000004  6d324173          DCB      0x6d,0x32,0x41,0x73
000008  63696935          DCB      0x63,0x69,0x69,0x35
00000c  4953696e          DCB      0x49,0x53,0x69,0x6e
000010  6b4500            DCB      0x6b,0x45,0x00

                          AREA ||.constdata__ZTS13SinkConverter||, COMGROUP=_ZTS13SinkConverter, DATA, READONLY, ALIGN=0

                  _ZTS13SinkConverter ; typeinfo name for SinkConverter
000000  31335369          DCB      0x31,0x33,0x53,0x69
000004  6e6b436f          DCB      0x6e,0x6b,0x43,0x6f
000008  6e766572          DCB      0x6e,0x76,0x65,0x72
00000c  74657200          DCB      0x74,0x65,0x72,0x00

                          AREA ||i._ZN9Num2AsciiD0Ev||, COMGROUP=_ZN9Num2AsciiD0Ev, CODE, READONLY, ALIGN=1

                  _ZN9Num2AsciiD0Ev PROC ; Num2Ascii::~Num2Ascii__deallocating()
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _ZN9Num2AsciiD1Ev ; Num2Ascii::~Num2Ascii()
00000a  4605              MOV      r5,r0
00000c  f7fffffe          BL       _ZdlPv ; operator delete (void*)
000010  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||area_number.276||, COMGROUP=_ZN9Num2AsciiD0Ev, LINKORDER=||i._ZN9Num2AsciiD0Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.276||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9Num2AsciiD0Ev||
                          DCD      0x00000001

                          AREA ||i._ZN9Num2Ascii5ISinkD0Ev||, COMGROUP=_ZN9Num2Ascii5ISinkD0Ev, CODE, READONLY, ALIGN=1

                  _ZN9Num2Ascii5ISinkD0Ev PROC ; Num2Ascii::ISink::~ISink__deallocating()
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _ZN9Num2Ascii5ISinkD2Ev ; Num2Ascii::ISink::~ISink__sub_object()
00000a  4605              MOV      r5,r0
00000c  f7fffffe          BL       _ZdlPv ; operator delete (void*)
000010  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||area_number.280||, COMGROUP=_ZN9Num2Ascii5ISinkD0Ev, LINKORDER=||i._ZN9Num2Ascii5ISinkD0Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.280||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9Num2Ascii5ISinkD0Ev||
                          DCD      0x00000001

                          AREA ||i._ZN13SinkConverterD0Ev||, COMGROUP=_ZN13SinkConverterD0Ev, CODE, READONLY, ALIGN=1

                  _ZN13SinkConverterD0Ev PROC ; SinkConverter::~SinkConverter__deallocating()
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _ZN13SinkConverterD1Ev ; SinkConverter::~SinkConverter()
00000a  4605              MOV      r5,r0
00000c  f7fffffe          BL       _ZdlPv ; operator delete (void*)
000010  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||area_number.284||, COMGROUP=_ZN13SinkConverterD0Ev, LINKORDER=||i._ZN13SinkConverterD0Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.284||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN13SinkConverterD0Ev||
                          DCD      0x00000001

                          AREA ||i._ZN13SinkConverter9WriteByteEh||, COMGROUP=_ZN13SinkConverter9WriteByteEh, CODE, READONLY, ALIGN=1

                  _ZN13SinkConverter9WriteByteEh PROC ; SinkConverter::WriteByte(unsigned char)
;;;69     
;;;70       virtual void WriteByte(BYTE const chr) noexcept { sink.WriteByte(chr); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  6860              LDR      r0,[r4,#4]
000008  6801              LDR      r1,[r0,#0]
00000a  688a              LDR      r2,[r1,#8]
00000c  4629              MOV      r1,r5
00000e  4790              BLX      r2
000010  bd70              POP      {r4-r6,pc}
;;;71       
                          ENDP


                          AREA ||area_number.288||, COMGROUP=_ZN13SinkConverter9WriteByteEh, LINKORDER=||i._ZN13SinkConverter9WriteByteEh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.288||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN13SinkConverter9WriteByteEh||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZN13SinkConverter9WriteByteEh||

                          AREA ||area_number.289||, COMGROUP=_ZN13SinkConverter9WriteByteEh, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.289||, ||.ARM.extab||
                          REQUIRE __cxa_call_unexpected
                          REQUIRE __cxa_call_terminate
                  ||.extab._ZN13SinkConverter9WriteByteEh||
                          DCD      0x80aab0b0
000004  00020011          DCW      0x0002,0x0011
                          DCD      0x80000000
                          DCD      0x00000001
                          RELOC 42, __ARM_common_noexcept_landing
                          DCD      0x00000000

                          AREA ||i.__ARM_common_noexcept_landing||, COMGROUP=__ARM_common_noexcept_landing, CODE, READONLY, ALIGN=1

                  __ARM_common_noexcept_landing PROC
000000  f7ffbffe          B.W      __cxa_call_terminate
                          ENDP


                          AREA ||area_number.297||, COMGROUP=__ARM_common_noexcept_landing, LINKORDER=||i.__ARM_common_noexcept_landing||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.297||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__ARM_common_noexcept_landing||
                          DCD      0x00000001
