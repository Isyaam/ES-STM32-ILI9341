; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--cpp11 --list --debug -c --asm --interleave --exceptions --protect_stack -o.\out\debugv5\stm32f429_disco_start.o --asm_dir=.\Lst\DebugV5\ --list_dir=.\Lst\DebugV5\ --depend=.\out\debugv5\stm32f429_disco_start.d --cpu=Cortex-M4 --apcs=interwork --no_unaligned_access -O0 --diag_suppress=9931 -I.\Inc -I.\Inc\Debug -I.\Inc\Cortex -I.\Inc\Drivers -I.\Inc\Utilities -D__UVISION_VERSION=527 -DSTM32F429xx -DCORTEX_M=4 -DDEBUG --omf_browse=.\out\debugv5\stm32f429_disco_start.crf --no_rtti STM32F429_DISCO_Start.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ZN47_INTERNAL_25_STM32F429_DISCO_Start_cpp_32fbddf910InitializeEv PROC ; [local to STM32F429_DISCO_Start_cpp]::Initialize()
;;;21     
;;;22     static void Initialize() noexcept
000000  b510              PUSH     {r4,lr}
;;;23     {
;;;24       ITM_PUTS("Initializing system ...");
000002  a02f              ADR      r0,|L1.192|
000004  f7fffffe          BL       _Z7ItmPutSPKc ; ItmPutS(const char*)
;;;25       
;;;26       FpuDisable();
000008  f7fffffe          BL       _ZN6Cortex10FpuDisableEv ; Cortex::FpuDisable()
;;;27     
;;;28       STACK_CHECK();
00000c  f7fffffe          BL       _Z10StackCheckv ; StackCheck()
;;;29       ITM_PUTS("System has been initialized");
000010  a031              ADR      r0,|L1.216|
000012  f7fffffe          BL       _Z7ItmPutSPKc ; ItmPutS(const char*)
;;;30     }
000016  bd10              POP      {r4,pc}
;;;31     
                          ENDP

                  _Z15buttonOnPressedv PROC ; buttonOnPressed()
;;;33     
;;;34     uint8_t buttonOnPressed() {
000018  4836              LDR      r0,|L1.244|
;;;35     	if(rbGPIOA.IDR & 1) {
00001a  8a00              LDRH     r0,[r0,#0x10]  ; rbGPIOA
00001c  f0000001          AND      r0,r0,#1
000020  b130              CBZ      r0,|L1.48|
;;;36     		if(!buttonIsPressed){
000022  4835              LDR      r0,|L1.248|
000024  7800              LDRB     r0,[r0,#0]  ; buttonIsPressed
000026  b930              CBNZ     r0,|L1.54|
;;;37     			buttonIsPressed = 1;
000028  2001              MOVS     r0,#1
00002a  4933              LDR      r1,|L1.248|
00002c  7008              STRB     r0,[r1,#0]
                  |L1.46|
;;;38     			return 1;
;;;39     		} 
;;;40     	} else {
;;;41     		buttonIsPressed = 0;
;;;42     	}
;;;43     	
;;;44     	return 0;
;;;45     }
00002e  4770              BX       lr
                  |L1.48|
000030  2000              MOVS     r0,#0                 ;41
000032  4931              LDR      r1,|L1.248|
000034  7008              STRB     r0,[r1,#0]            ;41
                  |L1.54|
000036  2000              MOVS     r0,#0                 ;44
000038  e7f9              B        |L1.46|
;;;46     
                          ENDP

                  main PROC
;;;47     /// Program entry.
;;;48     [[noreturn]] int main()
00003a  b510              PUSH     {r4,lr}
;;;49     {
00003c  b086              SUB      sp,sp,#0x18
;;;50       Initialize();
00003e  f7fffffe          BL       _ZN47_INTERNAL_25_STM32F429_DISCO_Start_cpp_32fbddf910InitializeEv ; [local to STM32F429_DISCO_Start_cpp]::Initialize()
;;;51       
;;;52       ASSERT(HClk() == 180000000U);
000042  f7fffffe          BL       _Z4HClkv ; HClk()
000046  492d              LDR      r1,|L1.252|
000048  4288              CMP      r0,r1
00004a  d100              BNE      |L1.78|
00004c  e005              B        |L1.90|
                  |L1.78|
00004e  4b2c              LDR      r3,|L1.256|
000050  2234              MOVS     r2,#0x34
000052  a12c              ADR      r1,|L1.260|
000054  a032              ADR      r0,|L1.288|
000056  f7fffffe          BL       _Z15AssertionFailedPKcS0_jS0_ ; AssertionFailed(const char*, const char*, unsigned, const char*)
                  |L1.90|
;;;53       ASSERT(IsPrivileged());
00005a  f7fffffe          BL       _ZN6Cortex12IsPrivilegedEv ; Cortex::IsPrivileged()
00005e  b100              CBZ      r0,|L1.98|
000060  e005              B        |L1.110|
                  |L1.98|
000062  4b27              LDR      r3,|L1.256|
000064  2235              MOVS     r2,#0x35
000066  a127              ADR      r1,|L1.260|
000068  a033              ADR      r0,|L1.312|
00006a  f7fffffe          BL       _Z15AssertionFailedPKcS0_jS0_ ; AssertionFailed(const char*, const char*, unsigned, const char*)
                  |L1.110|
;;;54       ASSERT(IsThreadMode());
00006e  f7fffffe          BL       _ZN6Cortex12IsThreadModeEv ; Cortex::IsThreadMode()
000072  b100              CBZ      r0,|L1.118|
000074  e005              B        |L1.130|
                  |L1.118|
000076  4b22              LDR      r3,|L1.256|
000078  2236              MOVS     r2,#0x36
00007a  a122              ADR      r1,|L1.260|
00007c  a032              ADR      r0,|L1.328|
00007e  f7fffffe          BL       _Z15AssertionFailedPKcS0_jS0_ ; AssertionFailed(const char*, const char*, unsigned, const char*)
                  |L1.130|
;;;55       
;;;56       /// Das BASEPRI-Register ist im Start-up-Code auf 0x20 eingestellt worden. Damit kann kein IRQ mit niedrigerer oder gleicher Prio
;;;57       /// aktiv werden. Erst mit dem Auruf der nachfolgenden Funktion können alle IRQs aktiv werden.
;;;58     
;;;59       SetBASEPRI_privileged(0U);
000082  2000              MOVS     r0,#0
000084  f7fffffe          BL       _ZN6Cortex21SetBASEPRI_privilegedEj ; Cortex::SetBASEPRI_privileged(unsigned)
;;;60     
;;;61       /// Indem Bit #0 im CONTROL-Register des Cortex-M4 gesetzt wird, wird der Prozessor in den non-priviliegierten Modus gesetzt.
;;;62       /// Damit können diverse, wichtige Einstellungen nicht mehr versehentlich überschrieben werden.
;;;63       /// Aber Achtung: Der Exception-Modus ist immer privilegiert, unabhängig von CONTROL[0].
;;;64       
;;;65       SetCONTROL_privileged(GetCONTROL() | CONTROL_usermode);
000088  f7fffffe          BL       _ZN6Cortex10GetCONTROLEv ; Cortex::GetCONTROL()
00008c  f0400401          ORR      r4,r0,#1
000090  4620              MOV      r0,r4
000092  f7fffffe          BL       _ZN6Cortex21SetCONTROL_privilegedEj ; Cortex::SetCONTROL_privileged(unsigned)
;;;66     
;;;67       ASSERT(! IsPrivileged());
000096  f7fffffe          BL       _ZN6Cortex12IsPrivilegedEv ; Cortex::IsPrivileged()
00009a  b900              CBNZ     r0,|L1.158|
00009c  e005              B        |L1.170|
                  |L1.158|
00009e  4b18              LDR      r3,|L1.256|
0000a0  2243              MOVS     r2,#0x43
0000a2  a118              ADR      r1,|L1.260|
0000a4  a02c              ADR      r0,|L1.344|
0000a6  f7fffffe          BL       _Z15AssertionFailedPKcS0_jS0_ ; AssertionFailed(const char*, const char*, unsigned, const char*)
                  |L1.170|
;;;68     	
;;;69     	Ili9341 init;
0000aa  a801              ADD      r0,sp,#4
0000ac  f7fffffe          BL       _ZN7Ili9341C1Ev ; Ili9341::Ili9341()
;;;70     	init.Start();
0000b0  a801              ADD      r0,sp,#4
0000b2  f7fffffe          BL       _ZN7Ili93415StartEv ; Ili9341::Start()
;;;71     
;;;72     	
;;;73       endless:
0000b6  bf00              NOP      
                  |L1.184|
;;;74       WFI();
0000b8  f7fffffe          BL       _ZN6Cortex3WFIEv ; Cortex::WFI()
;;;75       
;;;76     	
;;;77       goto endless;
0000bc  e7fc              B        |L1.184|
;;;78     }
;;;79     
                          ENDP

0000be  0000              DCW      0x0000
                  |L1.192|
0000c0  496e6974          DCB      "Initializing system ...",0
0000c4  69616c69
0000c8  7a696e67
0000cc  20737973
0000d0  74656d20
0000d4  2e2e2e00
                  |L1.216|
0000d8  53797374          DCB      "System has been initialized",0
0000dc  656d2068
0000e0  61732062
0000e4  65656e20
0000e8  696e6974
0000ec  69616c69
0000f0  7a656400
                  |L1.244|
                          DCD      rbGPIOA
                  |L1.248|
                          DCD      buttonIsPressed
                  |L1.252|
                          DCD      0x0aba9500
                  |L1.256|
                          DCD      _ZZ4mainE19__PRETTY_FUNCTION__ ; main::__PRETTY_FUNCTION__
                  |L1.260|
000104  53544d33          DCB      "STM32F429_DISCO_Start.cpp",0
000108  32463432
00010c  395f4449
000110  53434f5f
000114  53746172
000118  742e6370
00011c  7000    
00011e  00                DCB      0
00011f  00                DCB      0
                  |L1.288|
000120  48436c6b          DCB      "HClk() == 180000000U",0
000124  2829203d
000128  3d203138
00012c  30303030
000130  30303055
000134  00      
000135  00                DCB      0
000136  00                DCB      0
000137  00                DCB      0
                  |L1.312|
000138  49735072          DCB      "IsPrivileged()",0
00013c  6976696c
000140  65676564
000144  282900  
000147  00                DCB      0
                  |L1.328|
000148  49735468          DCB      "IsThreadMode()",0
00014c  72656164
000150  4d6f6465
000154  282900  
000157  00                DCB      0
                  |L1.344|
000158  21204973          DCB      "! IsPrivileged()",0
00015c  50726976
000160  696c6567
000164  65642829
000168  00      
000169  00                DCB      0
00016a  00                DCB      0
00016b  00                DCB      0

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  _ZZ4mainE19__PRETTY_FUNCTION__ ; main::__PRETTY_FUNCTION__
000000  696e7420          DCB      0x69,0x6e,0x74,0x20
000004  6d61696e          DCB      0x6d,0x61,0x69,0x6e
000008  282900            DCB      0x28,0x29,0x00

                          AREA ||.data||, DATA, ALIGN=0

                  buttonIsPressed
000000  00                DCB      0x00

                          AREA ||i._ZN6Cortex3WFIEv||, COMGROUP=_ZN6Cortex3WFIEv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex3WFIEv PROC ; Cortex::WFI()
;;;129      
;;;130      FORCE_INLINE void WFI() noexcept { __wfi(); }
000000  bf30              WFI      
000002  4770              BX       lr
;;;131      FORCE_INLINE void WFE() noexcept { __wfe(); }
                          ENDP


                          AREA ||area_number.18||, COMGROUP=_ZN6Cortex3WFIEv, LINKORDER=||i._ZN6Cortex3WFIEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex3WFIEv||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex12IsThreadModeEv||, COMGROUP=_ZN6Cortex12IsThreadModeEv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex12IsThreadModeEv PROC ; Cortex::IsThreadMode()
;;;283      /// \note Die Bestimmung, ob sich der Prozessor im Thread-Modus befindet, erfolgt anhand der aktuellen ISR-Nummer.
;;;284      FORCE_INLINE bool IsThreadMode() noexcept { return GetCurrentIsrNum() == isrNum_THREAD_MODE; }
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _ZN6Cortex16GetCurrentIsrNumEv ; Cortex::GetCurrentIsrNum()
000006  b908              CBNZ     r0,|L24.12|
000008  2001              MOVS     r0,#1
00000a  e000              B        |L24.14|
                  |L24.12|
00000c  2000              MOVS     r0,#0
                  |L24.14|
00000e  4604              MOV      r4,r0
000010  4620              MOV      r0,r4
000012  bd10              POP      {r4,pc}
;;;285    
                          ENDP


                          AREA ||area_number.25||, COMGROUP=_ZN6Cortex12IsThreadModeEv, LINKORDER=||i._ZN6Cortex12IsThreadModeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex12IsThreadModeEv||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex10GetCONTROLEv||, COMGROUP=_ZN6Cortex10GetCONTROLEv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex10GetCONTROLEv PROC ; Cortex::GetCONTROL()
;;;153      /// \return Wert des CONTROL-Registers
;;;154      FORCE_INLINE WORD GetCONTROL() noexcept { return ARM_RSR(control); }
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _Z15ARM_RSR_controlv ; ARM_RSR_control()
000006  4604              MOV      r4,r0
000008  4620              MOV      r0,r4
00000a  bd10              POP      {r4,pc}
;;;155    
                          ENDP


                          AREA ||area_number.32||, COMGROUP=_ZN6Cortex10GetCONTROLEv, LINKORDER=||i._ZN6Cortex10GetCONTROLEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.32||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex10GetCONTROLEv||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex12IsPrivilegedEv||, COMGROUP=_ZN6Cortex12IsPrivilegedEv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex12IsPrivilegedEv PROC ; Cortex::IsPrivileged()
;;;288      /// \note Exception mode ist immer privilegiert, unabhängig von CONTROL[0]!
;;;289      FORCE_INLINE bool IsPrivileged() noexcept { return (GetCONTROL() & CONTROL_usermode) == 0U || ! IsThreadMode(); }
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _ZN6Cortex10GetCONTROLEv ; Cortex::GetCONTROL()
000006  f0000001          AND      r0,r0,#1
00000a  b110              CBZ      r0,|L38.18|
00000c  f7fffffe          BL       _ZN6Cortex12IsThreadModeEv ; Cortex::IsThreadMode()
000010  b908              CBNZ     r0,|L38.22|
                  |L38.18|
000012  2001              MOVS     r0,#1
000014  e000              B        |L38.24|
                  |L38.22|
000016  2000              MOVS     r0,#0
                  |L38.24|
000018  4604              MOV      r4,r0
00001a  4620              MOV      r0,r4
00001c  bd10              POP      {r4,pc}
;;;290      
                          ENDP


                          AREA ||area_number.39||, COMGROUP=_ZN6Cortex12IsPrivilegedEv, LINKORDER=||i._ZN6Cortex12IsPrivilegedEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.39||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex12IsPrivilegedEv||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex21SetCONTROL_privilegedEj||, COMGROUP=_ZN6Cortex21SetCONTROL_privilegedEj, CODE, READONLY, ALIGN=1

                  _ZN6Cortex21SetCONTROL_privilegedEj PROC ; Cortex::SetCONTROL_privileged(unsigned)
;;;158      /// \note Der Prozessor muss sich im privilegierten Modus befinden. Es findet keine Prüfung statt, ob diese Voraussetzung zutrifft.
;;;159      FORCE_INLINE void SetCONTROL_privileged(WORD const value) noexcept { ARM_WSR(control, value); }
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _Z15ARM_WSR_controlj ; ARM_WSR_control(unsigned)
00000a  bd10              POP      {r4,pc}
;;;160    
                          ENDP


                          AREA ||area_number.46||, COMGROUP=_ZN6Cortex21SetCONTROL_privilegedEj, LINKORDER=||i._ZN6Cortex21SetCONTROL_privilegedEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.46||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex21SetCONTROL_privilegedEj||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex21SetBASEPRI_privilegedEj||, COMGROUP=_ZN6Cortex21SetBASEPRI_privilegedEj, CODE, READONLY, ALIGN=1

                  _ZN6Cortex21SetBASEPRI_privilegedEj PROC ; Cortex::SetBASEPRI_privileged(unsigned)
;;;174    
;;;175      FORCE_INLINE void SetBASEPRI_privileged(WORD const value) noexcept { ARM_WSR(basepri, value); }
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _Z15ARM_WSR_baseprij ; ARM_WSR_basepri(unsigned)
00000a  bd10              POP      {r4,pc}
;;;176    
                          ENDP


                          AREA ||area_number.53||, COMGROUP=_ZN6Cortex21SetBASEPRI_privilegedEj, LINKORDER=||i._ZN6Cortex21SetBASEPRI_privilegedEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.53||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex21SetBASEPRI_privilegedEj||
                          DCD      0x00000001

                          AREA ||i._Z15ARM_RSR_controlv||, COMGROUP=_Z15ARM_RSR_controlv, CODE, READONLY, ALIGN=1

                  _Z15ARM_RSR_controlv PROC ; ARM_RSR_control()
;;;38     
;;;39     DEFINE_ARM_RSR(control)
000000  f3ef8114          MRS      r1,CONTROL
000004  4608              MOV      r0,r1
000006  4770              BX       lr
;;;40     DEFINE_ARM_WSR(control)
                          ENDP


                          AREA ||area_number.60||, COMGROUP=_Z15ARM_RSR_controlv, LINKORDER=||i._Z15ARM_RSR_controlv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.60||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z15ARM_RSR_controlv||
                          DCD      0x00000001

                          AREA ||i._Z15ARM_WSR_controlj||, COMGROUP=_Z15ARM_WSR_controlj, CODE, READONLY, ALIGN=1

                  _Z15ARM_WSR_controlj PROC ; ARM_WSR_control(unsigned)
;;;39     DEFINE_ARM_RSR(control)
;;;40     DEFINE_ARM_WSR(control)
000000  f3808814          MSR      CONTROL,r0
000004  4770              BX       lr
;;;41     DEFINE_ARM_RSR(basepri)
                          ENDP


                          AREA ||area_number.67||, COMGROUP=_Z15ARM_WSR_controlj, LINKORDER=||i._Z15ARM_WSR_controlj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.67||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z15ARM_WSR_controlj||
                          DCD      0x00000001

                          AREA ||i._Z15ARM_WSR_baseprij||, COMGROUP=_Z15ARM_WSR_baseprij, CODE, READONLY, ALIGN=1

                  _Z15ARM_WSR_baseprij PROC ; ARM_WSR_basepri(unsigned)
;;;41     DEFINE_ARM_RSR(basepri)
;;;42     DEFINE_ARM_WSR(basepri)
000000  f3808811          MSR      BASEPRI,r0
000004  4770              BX       lr
;;;43     DEFINE_ARM_RSR(primask)
                          ENDP


                          AREA ||area_number.74||, COMGROUP=_Z15ARM_WSR_baseprij, LINKORDER=||i._Z15ARM_WSR_baseprij||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.74||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z15ARM_WSR_baseprij||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex16GetCurrentIsrNumEv||, COMGROUP=_ZN6Cortex16GetCurrentIsrNumEv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex16GetCurrentIsrNumEv PROC ; Cortex::GetCurrentIsrNum()
;;;278      /// \return Nummer der aktiven Exception.
;;;279      FORCE_INLINE WORD GetCurrentIsrNum() noexcept { return GetIPSR(); }
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _ZN6Cortex7GetIPSREv ; Cortex::GetIPSR()
000006  4604              MOV      r4,r0
000008  4620              MOV      r0,r4
00000a  bd10              POP      {r4,pc}
;;;280    
                          ENDP


                          AREA ||area_number.81||, COMGROUP=_ZN6Cortex16GetCurrentIsrNumEv, LINKORDER=||i._ZN6Cortex16GetCurrentIsrNumEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.81||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex16GetCurrentIsrNumEv||
                          DCD      0x00000001

                          AREA ||i._ZN6Cortex7GetIPSREv||, COMGROUP=_ZN6Cortex7GetIPSREv, CODE, READONLY, ALIGN=1

                  _ZN6Cortex7GetIPSREv PROC ; Cortex::GetIPSR()
;;;220    
;;;221      FORCE_INLINE WORD GetIPSR() noexcept { return ARM_RSR(ipsr); }
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _Z12ARM_RSR_ipsrv ; ARM_RSR_ipsr()
000006  4604              MOV      r4,r0
000008  4620              MOV      r0,r4
00000a  bd10              POP      {r4,pc}
;;;222      FORCE_INLINE WORD GetAPSR() noexcept { return ARM_RSR(apsr); }
                          ENDP


                          AREA ||area_number.88||, COMGROUP=_ZN6Cortex7GetIPSREv, LINKORDER=||i._ZN6Cortex7GetIPSREv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.88||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Cortex7GetIPSREv||
                          DCD      0x00000001

                          AREA ||i._Z12ARM_RSR_ipsrv||, COMGROUP=_Z12ARM_RSR_ipsrv, CODE, READONLY, ALIGN=1

                  _Z12ARM_RSR_ipsrv PROC ; ARM_RSR_ipsr()
;;;54     DEFINE_ARM_RSR(apsr)
;;;55     DEFINE_ARM_RSR(ipsr)
000000  f3ef8105          MRS      r1,IPSR
000004  4608              MOV      r0,r1
000006  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||area_number.95||, COMGROUP=_Z12ARM_RSR_ipsrv, LINKORDER=||i._Z12ARM_RSR_ipsrv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.95||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z12ARM_RSR_ipsrv||
                          DCD      0x00000001

                          AREA ||i.__ARM_common_noexcept_landing||, COMGROUP=__ARM_common_noexcept_landing, CODE, READONLY, ALIGN=1

                  __ARM_common_noexcept_landing PROC
000000  f7ffbffe          B.W      __cxa_call_terminate
                          ENDP


                          AREA ||area_number.102||, COMGROUP=__ARM_common_noexcept_landing, LINKORDER=||i.__ARM_common_noexcept_landing||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.102||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__ARM_common_noexcept_landing||
                          DCD      0x00000001

                  __ARM_use_no_argv EQU 0
