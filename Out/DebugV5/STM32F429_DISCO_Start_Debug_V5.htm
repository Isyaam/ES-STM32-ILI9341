<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Out\DebugV5\STM32F429_DISCO_Start_Debug_V5.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Out\DebugV5\STM32F429_DISCO_Start_Debug_V5.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Feb 26 13:14:40 2020
<BR><P>
<H3>Maximum Stack Usage =        984 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Ili9341::Ili9341() &rArr; ILtdc::setPins() const &rArr; void EnableAF&lang;(unsigned)3&rang;(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char(&)[T1]) &rArr; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char*, unsigned) &rArr; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned) &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[ba]">__user_setup_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[17]">IRQ_DebMon</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">IRQ_DebMon</a><BR>
 <LI><a href="#[148]">Cortex::Reset_privileged()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[148]">Cortex::Reset_privileged()</a><BR>
 <LI><a href="#[123]">Formatter::PrintTxtQuoted(const char*)::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c5]">AssertionFailed(const char*, const char*, unsigned, const char*)</a><BR>
 <LI><a href="#[122]">Formatter::PrintTxt(const char*, int)::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c5]">AssertionFailed(const char*, const char*, unsigned, const char*)</a><BR>
 <LI><a href="#[109]">Formatter::WriteByteRepeated(unsigned char, int)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[107]">Formatter::WriteByte(unsigned char)</a><BR>
 <LI><a href="#[106]">Formatter::PrintTxt(const char*, int)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[107]">Formatter::WriteByte(unsigned char)</a><BR>
 <LI><a href="#[11d]">unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c5]">AssertionFailed(const char*, const char*, unsigned, const char*)</a><BR>
 <LI><a href="#[120]">Num2Ascii::WritePrefix()::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c5]">AssertionFailed(const char*, const char*, unsigned, const char*)</a><BR>
 <LI><a href="#[11f]">unsigned Num2Ascii::Format&lang;unsigned, (unsigned)10&rang;(T1, int, int)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c5]">AssertionFailed(const char*, const char*, unsigned, const char*)</a><BR>
 <LI><a href="#[aa]">__cxa_guard_acquire</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c5]">AssertionFailed(const char*, const char*, unsigned, const char*)</a><BR>
 <LI><a href="#[12e]">Cortex::SetPRIMASK_privileged()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12e]">Cortex::SetPRIMASK_privileged()</a><BR>
 <LI><a href="#[155]">PsvTrigger_privileged()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[155]">PsvTrigger_privileged()</a><BR>
 <LI><a href="#[14c]">Cortex::GetPRIMASK_privileged()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14c]">Cortex::GetPRIMASK_privileged()</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2c]">IRQ_ADC</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[14]">IRQ_BusFlt</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[2e]">IRQ_CAN1_RX0</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[2f]">IRQ_CAN1_RX1</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[30]">IRQ_CAN1_SCE</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[2d]">IRQ_CAN1_TX</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[5a]">IRQ_CAN2_RX0</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[5b]">IRQ_CAN2_RX1</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[5c]">IRQ_CAN2_SCE</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[59]">IRQ_CAN2_TX</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[69]">IRQ_CRYP</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[68]">IRQ_DCMI</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[25]">IRQ_DMA1_STREAM0</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[26]">IRQ_DMA1_STREAM1</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[27]">IRQ_DMA1_STREAM2</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[28]">IRQ_DMA1_STREAM3</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[29]">IRQ_DMA1_STREAM4</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[2a]">IRQ_DMA1_STREAM5</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[2b]">IRQ_DMA1_STREAM6</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[49]">IRQ_DMA1_STREAM7</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[74]">IRQ_DMA2D</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[52]">IRQ_DMA2_STREAM0</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[53]">IRQ_DMA2_STREAM1</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[54]">IRQ_DMA2_STREAM2</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[55]">IRQ_DMA2_STREAM3</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[56]">IRQ_DMA2_STREAM4</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[5e]">IRQ_DMA2_STREAM5</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[5f]">IRQ_DMA2_STREAM6</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[60]">IRQ_DMA2_STREAM7</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[17]">IRQ_DebMon</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[57]">IRQ_ETH</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[58]">IRQ_ETH_WKUP</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[20]">IRQ_EXTI00</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[21]">IRQ_EXTI01</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[22]">IRQ_EXTI02</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[23]">IRQ_EXTI03</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[24]">IRQ_EXTI04</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[31]">IRQ_EXTI05TO09</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[42]">IRQ_EXTI10TO15</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[1e]">IRQ_FLASH</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[4a]">IRQ_FMC</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[6b]">IRQ_FPU</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[6a]">IRQ_HASH_RNG</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[12]">IRQ_HrdFlt</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[3a]">IRQ_I2C1_ER</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[39]">IRQ_I2C1_EV</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[3c]">IRQ_I2C2_ER</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[3b]">IRQ_I2C2_EV</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[63]">IRQ_I2C3_ER</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[62]">IRQ_I2C3_EV</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[72]">IRQ_LTDC</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[73]">IRQ_LTDC_ERR</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[13]">IRQ_MemFlt</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[11]">IRQ_NMI</a> from faults.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[5d]">IRQ_OTG_FS</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[44]">IRQ_OTG_FS_WKUP</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[67]">IRQ_OTG_HS</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[65]">IRQ_OTG_HS_EP1_IN</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[64]">IRQ_OTG_HS_EP1_OUT</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[66]">IRQ_OTG_WKUP</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[18]">IRQ_PSV</a> from psv.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[1b]">IRQ_PVD</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[1f]">IRQ_RCC</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[43]">IRQ_RTC_ALARM</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[1d]">IRQ_RTC_WKUP</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[10]">IRQ_Reset</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[71]">IRQ_SAI1</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[4b]">IRQ_SDIO</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[3d]">IRQ_SPI1</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[3e]">IRQ_SPI2</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[4d]">IRQ_SPI3</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[6e]">IRQ_SPI4</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[6f]">IRQ_SPI5</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[70]">IRQ_SPI6</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[19]">IRQ_STK</a> from stk.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[16]">IRQ_SVC</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[1c]">IRQ_TAMP</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[32]">IRQ_TIM01_BK_TIM09</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[35]">IRQ_TIM01_CC</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[34]">IRQ_TIM01_TR_TIM11</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[33]">IRQ_TIM01_UE_TIM10</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[36]">IRQ_TIM02</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[37]">IRQ_TIM03</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[38]">IRQ_TIM04</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[4c]">IRQ_TIM05</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[50]">IRQ_TIM06_DAC</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[51]">IRQ_TIM07</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[45]">IRQ_TIM08_BK_TIM12</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[48]">IRQ_TIM08_CC</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[47]">IRQ_TIM08_TR_TIM14</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[46]">IRQ_TIM08_UE_TIM13</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[4e]">IRQ_UART4</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[4f]">IRQ_UART5</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[6c]">IRQ_UART7</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[6d]">IRQ_UART8</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[3f]">IRQ_USART1</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[40]">IRQ_USART2</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[41]">IRQ_USART3</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[61]">IRQ_USART6</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[15]">IRQ_UsgFlt</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[1a]">IRQ_WWDG</a> from stm32f429_startup.o(.text) referenced from stm32f429_startup.o(RESET)
 <LI><a href="#[77]">UndefinedIRQ</a> from stm32f429_init.o(.text) referenced from stm32f429_startup.o(.text)
 <LI><a href="#[75]">VeryFirstInit</a> from stm32f429_init.o(.text) referenced from stm32f429_startup.o(.text)
 <LI><a href="#[7a]">MyTerminate()</a> from mystuff.o(.text) referenced from initialize.o(.text)
 <LI><a href="#[7b]">MyNewHandler()</a> from mystuff.o(.text) referenced from initialize.o(.text)
 <LI><a href="#[83]">SinkForItm::WriteByte(unsigned char)</a> from debug.o(i._ZN10SinkForItm9WriteByteEh) referenced from debug.o(.constdata__ZTV10SinkForItm)
 <LI><a href="#[78]">SinkForItm::~SinkForItm()</a> from debug.o(i._ZN10SinkForItmD1Ev) referenced from debug.o(.constdata__ZTV10SinkForItm)
 <LI><a href="#[78]">SinkForItm::~SinkForItm()</a> from debug.o(i._ZN10SinkForItmD1Ev) referenced from debug.o(.text)
 <LI><a href="#[85]">SinkConverter::WriteByte(unsigned char)</a> from formatter.o(i._ZN13SinkConverter9WriteByteEh) referenced from formatter.o(.constdata__ZTV13SinkConverter)
 <LI><a href="#[84]">SinkConverter::~SinkConverter()</a> from formatter.o(i._ZN13SinkConverterD1Ev) referenced from formatter.o(.constdata__ZTV13SinkConverter)
 <LI><a href="#[7d]">InstanceWrapper&lang;Port&lang;rbGPIOA&rang;&rang;::~InstanceWrapper()</a> from drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIOAEEED1Ev) referenced from drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIOAEEE6CreateEv)
 <LI><a href="#[7e]">InstanceWrapper&lang;Port&lang;rbGPIOB&rang;&rang;::~InstanceWrapper()</a> from drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIOBEEED1Ev) referenced from drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIOBEEE6CreateEv)
 <LI><a href="#[7f]">InstanceWrapper&lang;Port&lang;rbGPIOC&rang;&rang;::~InstanceWrapper()</a> from drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIOCEEED1Ev) referenced from drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIOCEEE6CreateEv)
 <LI><a href="#[80]">InstanceWrapper&lang;Port&lang;rbGPIOD&rang;&rang;::~InstanceWrapper()</a> from drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIODEEED1Ev) referenced from drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIODEEE6CreateEv)
 <LI><a href="#[81]">InstanceWrapper&lang;Port&lang;rbGPIOF&rang;&rang;::~InstanceWrapper()</a> from drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIOFEEED1Ev) referenced from drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIOFEEE6CreateEv)
 <LI><a href="#[82]">InstanceWrapper&lang;Port&lang;rbGPIOG&rang;&rang;::~InstanceWrapper()</a> from drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIOGEEED1Ev) referenced from drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIOGEEE6CreateEv)
 <LI><a href="#[9e]">[local to Initialize_cpp]::LocalInit()</a> from initialize.o(.text) referenced from initialize.o(.init_array.00110)
 <LI><a href="#[9c]">[local to Debug_cpp]::LocalInit()</a> from debug.o(.text) referenced from debug.o(.init_array.00101)
 <LI><a href="#[7c]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[9d]">[local to STM32F429_init_cpp]::LocalInit()</a> from stm32f429_init.o(.text) referenced from stm32f429_init.o(.init_array.00102)
 <LI><a href="#[87]">IDio::~IDio__deallocating()</a> from drvdio.o(.text) referenced from drvdio.o(.constdata__ZTV4IDio)
 <LI><a href="#[86]">IDio::~IDio__sub_object()</a> from drvdio.o(.text) referenced from drvdio.o(.constdata__ZTV4IDio)
 <LI><a href="#[89]">Port&lang;rbGPIOA&rang;::~Port()</a> from drvdiog.o(t._ZN4PortIL_Z7rbGPIOAEED1Ev) referenced from drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOAEE)
 <LI><a href="#[8c]">Port&lang;rbGPIOB&rang;::~Port()</a> from drvdiog.o(t._ZN4PortIL_Z7rbGPIOBEED1Ev) referenced from drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOBEE)
 <LI><a href="#[8d]">Port&lang;rbGPIOC&rang;::~Port()</a> from drvdiog.o(t._ZN4PortIL_Z7rbGPIOCEED1Ev) referenced from drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOCEE)
 <LI><a href="#[8e]">Port&lang;rbGPIOD&rang;::~Port()</a> from drvdiog.o(t._ZN4PortIL_Z7rbGPIODEED1Ev) referenced from drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIODEE)
 <LI><a href="#[8f]">Port&lang;rbGPIOF&rang;::~Port()</a> from drvdiog.o(t._ZN4PortIL_Z7rbGPIOFEED1Ev) referenced from drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOFEE)
 <LI><a href="#[90]">Port&lang;rbGPIOG&rang;::~Port()</a> from drvdiog.o(t._ZN4PortIL_Z7rbGPIOGEED1Ev) referenced from drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOGEE)
 <LI><a href="#[93]">WrPin::Set(bool)</a> from drvdio.o(.text) referenced from drvdio.o(.constdata__ZTV5WrPin)
 <LI><a href="#[95]">IRdPin::~IRdPin__deallocating()</a> from drvdio.o(.text) referenced from drvdio.o(.constdata__ZTV6IRdPin)
 <LI><a href="#[94]">IRdPin::~IRdPin__sub_object()</a> from drvdio.o(.text) referenced from drvdio.o(.constdata__ZTV6IRdPin)
 <LI><a href="#[97]">IWrPin::~IWrPin__deallocating()</a> from drvdio.o(.text) referenced from drvdio.o(.constdata__ZTV6IWrPin)
 <LI><a href="#[96]">IWrPin::~IWrPin__sub_object()</a> from drvdio.o(.text) referenced from drvdio.o(.constdata__ZTV6IWrPin)
 <LI><a href="#[8a]">PortBase::CreateRdPin(unsigned)</a> from drvdio.o(.text) referenced from drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOAEE)
 <LI><a href="#[8a]">PortBase::CreateRdPin(unsigned)</a> from drvdio.o(.text) referenced from drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOBEE)
 <LI><a href="#[8a]">PortBase::CreateRdPin(unsigned)</a> from drvdio.o(.text) referenced from drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOCEE)
 <LI><a href="#[8a]">PortBase::CreateRdPin(unsigned)</a> from drvdio.o(.text) referenced from drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIODEE)
 <LI><a href="#[8a]">PortBase::CreateRdPin(unsigned)</a> from drvdio.o(.text) referenced from drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOFEE)
 <LI><a href="#[8a]">PortBase::CreateRdPin(unsigned)</a> from drvdio.o(.text) referenced from drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOGEE)
 <LI><a href="#[8a]">PortBase::CreateRdPin(unsigned)</a> from drvdio.o(.text) referenced from drvdio.o(.constdata__ZTV8PortBase)
 <LI><a href="#[8b]">PortBase::CreateWrPin(unsigned)</a> from drvdio.o(.text) referenced from drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOAEE)
 <LI><a href="#[8b]">PortBase::CreateWrPin(unsigned)</a> from drvdio.o(.text) referenced from drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOBEE)
 <LI><a href="#[8b]">PortBase::CreateWrPin(unsigned)</a> from drvdio.o(.text) referenced from drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOCEE)
 <LI><a href="#[8b]">PortBase::CreateWrPin(unsigned)</a> from drvdio.o(.text) referenced from drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIODEE)
 <LI><a href="#[8b]">PortBase::CreateWrPin(unsigned)</a> from drvdio.o(.text) referenced from drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOFEE)
 <LI><a href="#[8b]">PortBase::CreateWrPin(unsigned)</a> from drvdio.o(.text) referenced from drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOGEE)
 <LI><a href="#[8b]">PortBase::CreateWrPin(unsigned)</a> from drvdio.o(.text) referenced from drvdio.o(.constdata__ZTV8PortBase)
 <LI><a href="#[98]">PortBase::~PortBase()</a> from drvdio.o(i._ZN8PortBaseD1Ev) referenced from drvdio.o(.constdata__ZTV8PortBase)
 <LI><a href="#[9a]">Formatter::ISink::~ISink__sub_object()</a> from debug.o(i._ZN9Formatter5ISinkD2Ev) referenced from debug.o(.constdata__ZTVN9Formatter5ISinkE)
 <LI><a href="#[79]">Formatter::~Formatter()</a> from debug.o(i._ZN9FormatterD1Ev) referenced from debug.o(.constdata__ZTV9Formatter)
 <LI><a href="#[79]">Formatter::~Formatter()</a> from debug.o(i._ZN9FormatterD1Ev) referenced from debug.o(.text)
 <LI><a href="#[9b]">Num2Ascii::ISink::~ISink__sub_object()</a> from formatter.o(i._ZN9Num2Ascii5ISinkD2Ev) referenced from formatter.o(.constdata__ZTVN9Num2Ascii5ISinkE)
 <LI><a href="#[99]">Num2Ascii::~Num2Ascii()</a> from formatter.o(i._ZN9Num2AsciiD1Ev) referenced from formatter.o(.constdata__ZTV9Num2Ascii)
 <LI><a href="#[9f]">Singleton&lang;Port&lang;rbGPIOA&rang;&rang;::GetInstance()</a> from drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIOAEEE11GetInstanceEv) referenced from drvdiog.o(.init_array)
 <LI><a href="#[a0]">Singleton&lang;Port&lang;rbGPIOB&rang;&rang;::GetInstance()</a> from drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIOBEEE11GetInstanceEv) referenced from drvdiog.o(.init_array)
 <LI><a href="#[a1]">Singleton&lang;Port&lang;rbGPIOC&rang;&rang;::GetInstance()</a> from drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIOCEEE11GetInstanceEv) referenced from drvdiog.o(.init_array)
 <LI><a href="#[a2]">Singleton&lang;Port&lang;rbGPIOD&rang;&rang;::GetInstance()</a> from drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIODEEE11GetInstanceEv) referenced from drvdiog.o(.init_array)
 <LI><a href="#[a3]">Singleton&lang;Port&lang;rbGPIOF&rang;&rang;::GetInstance()</a> from drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIOFEEE11GetInstanceEv) referenced from drvdiog.o(.init_array)
 <LI><a href="#[a4]">Singleton&lang;Port&lang;rbGPIOG&rang;&rang;::GetInstance()</a> from drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIOGEEE11GetInstanceEv) referenced from drvdiog.o(.init_array)
 <LI><a href="#[91]">RdPin::Get() const</a> from drvdio.o(.text) referenced from drvdio.o(.constdata__ZTV5RdPin)
 <LI><a href="#[92]">WrPin::Get() const</a> from drvdio.o(.text) referenced from drvdio.o(.constdata__ZTV5WrPin)
 <LI><a href="#[88]">__cxa_pure_virtual</a> from premain.o(.text) referenced 2 times from drvdio.o(.constdata__ZTV4IDio)
 <LI><a href="#[88]">__cxa_pure_virtual</a> from premain.o(.text) referenced from drvdio.o(.constdata__ZTV6IRdPin)
 <LI><a href="#[88]">__cxa_pure_virtual</a> from premain.o(.text) referenced 2 times from drvdio.o(.constdata__ZTV6IWrPin)
 <LI><a href="#[88]">__cxa_pure_virtual</a> from premain.o(.text) referenced from debug.o(.constdata__ZTVN9Formatter5ISinkE)
 <LI><a href="#[88]">__cxa_pure_virtual</a> from premain.o(.text) referenced from formatter.o(.constdata__ZTVN9Num2Ascii5ISinkE)
 <LI><a href="#[a5]">__main</a> from __main.o(!!!main) referenced from stm32f429_startup.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[a5]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b1]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[b3]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1e7]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1e8]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1e9]"></a>__decompress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[1ea]"></a>__decompress0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[b4]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[1eb]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[bc]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1ec]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __Heap_Initialize &rArr; _mutex_initialize &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1ed]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1ee]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1ef]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1f0]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1f1]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_exceptions_1 &rArr; __ARM_exceptions_init &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; _mutex_release &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_init
</UL>

<P><STRONG><a name="[1f2]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1f3]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1f4]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1f5]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1f6]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1f7]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1f8]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1f9]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1fa]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1fb]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1fc]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1fd]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[1fe]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1ff]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[b2]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[200]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[b9]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[bb]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[201]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[bd]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Ili9341::Ili9341() &rArr; ILtdc::setPins() const &rArr; void EnableAF&lang;(unsigned)3&rang;(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char(&)[T1]) &rArr; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char*, unsigned) &rArr; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned) &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[202]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[203]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[204]"></a>buttonOnPressed()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f429_disco_start.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>main</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, stm32f429_disco_start.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = main &rArr; Ili9341::Ili9341() &rArr; ILtdc::setPins() const &rArr; void EnableAF&lang;(unsigned)3&rang;(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char(&)[T1]) &rArr; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char*, unsigned) &rArr; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned) &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::Ili9341()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::Start()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HClk()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssertionFailed(const char*, const char*, unsigned, const char*)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::WFI()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SetCONTROL_privileged(unsigned)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SetBASEPRI_privileged(unsigned)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::IsThreadMode()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::IsPrivileged()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetCONTROL()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to STM32F429_DISCO_Start_cpp]::Initialize()
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ce]"></a>InitSDRAM()</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, initsdram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = InitSDRAM() &rArr; void EnableAF&lang;(unsigned)11&rang;(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char(&)[T1]) &rArr; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char*, unsigned) &rArr; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned) &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void EnableAF&lang;(unsigned)11&rang;(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char(&)[T1])
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::DSB()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char*, unsigned)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHB1ClockEnableByMask(unsigned)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDSR_IsBusy()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHBClockEnable(unsigned)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Command(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VeryFirstInit
</UL>

<P><STRONG><a name="[db]"></a>ISpi::ISpi()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drvspi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::Ili9341()
</UL>

<P><STRONG><a name="[205]"></a>ISpi::ISpi__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, drvspi.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>ISpi::initSPI() const</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, drvspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = ISpi::initSPI() const &rArr; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned) &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APBClockEnable(unsigned)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHBClockEnable(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::Ili9341()
</UL>

<P><STRONG><a name="[e3]"></a>ISpi::SPI_Send(unsigned char) const</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, drvspi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::SendCommand(unsigned char) const
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::SendData(unsigned char) const
</UL>

<P><STRONG><a name="[cb]"></a>Ili9341::Ili9341()</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, ili9341.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = Ili9341::Ili9341() &rArr; ILtdc::setPins() const &rArr; void EnableAF&lang;(unsigned)3&rang;(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char(&)[T1]) &rArr; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char*, unsigned) &rArr; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned) &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILtdc::setPins() const
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILtdc::ILtdc()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDio::CreateInstanceD()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDio::CreateInstanceC()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrGpioSP(volatile __regbank_GPIO&, unsigned, unsigned)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrGpioMD(volatile __regbank_GPIO&, unsigned, unsigned)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISpi::initSPI() const
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISpi::ISpi()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Bfld&lang;unsigned&rang;(volatile T1&, T1, T1)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHBClockEnable(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[206]"></a>Ili9341::Ili9341__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, ili9341.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>Ili9341::SendData(unsigned char) const</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ili9341.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Ili9341::SendData(unsigned char) const &rArr; IWrPin::Clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWrPin::Clr()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISpi::SPI_Send(unsigned char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::SendCmd(unsigned char, const unsigned char*, unsigned) const
</UL>

<P><STRONG><a name="[e4]"></a>Ili9341::SendCommand(unsigned char) const</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ili9341.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Ili9341::SendCommand(unsigned char) const &rArr; IWrPin::Clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWrPin::Clr()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISpi::SPI_Send(unsigned char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::SendCmd(unsigned char, const unsigned char*, unsigned) const
</UL>

<P><STRONG><a name="[e5]"></a>Ili9341::SendCmd(unsigned char, const unsigned char*, unsigned) const</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ili9341.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ili9341::SendCmd(unsigned char, const unsigned char*, unsigned) const &rArr; Ili9341::SendCommand(unsigned char) const &rArr; IWrPin::Clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::SendCommand(unsigned char) const
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::SendData(unsigned char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Ili9341::Command&lang;(unsigned)5&rang;(unsigned char, const unsigned char(&)[T1]) const
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Ili9341::Command&lang;(unsigned)4&rang;(unsigned char, const unsigned char(&)[T1]) const
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Ili9341::Command&lang;(unsigned)3&rang;(unsigned char, const unsigned char(&)[T1]) const
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Ili9341::Command&lang;(unsigned)15&rang;(unsigned char, const unsigned char(&)[T1]) const
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::Command(unsigned char) const
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::Command(unsigned char, unsigned char, unsigned char)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::Command(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[207]"></a>Ili9341::CmdPrefix(unsigned char) const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ili9341.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>Ili9341::Start()</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, ili9341.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Ili9341::Start() &rArr; ILtdc::initLTDC() const &rArr; Dma2d::drawCircle(unsigned, unsigned, unsigned, unsigned) &rArr; Dma2d::drawRectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned) &rArr; Dma2d::SetMemory(unsigned, unsigned, unsigned, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILtdc::initLTDC() const
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Ili9341::Command&lang;(unsigned)5&rang;(unsigned char, const unsigned char(&)[T1]) const
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Ili9341::Command&lang;(unsigned)4&rang;(unsigned char, const unsigned char(&)[T1]) const
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Ili9341::Command&lang;(unsigned)3&rang;(unsigned char, const unsigned char(&)[T1]) const
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Ili9341::Command&lang;(unsigned)15&rang;(unsigned char, const unsigned char(&)[T1]) const
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::Command(unsigned char) const
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::Command(unsigned char, unsigned char, unsigned char)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::Command(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>ILtdc::ILtdc()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drvltdc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::Ili9341()
</UL>

<P><STRONG><a name="[208]"></a>ILtdc::ILtdc__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, drvltdc.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>ILtdc::initLTDC() const</STRONG> (Thumb, 510 bytes, Stack size 56 bytes, drvltdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ILtdc::initLTDC() const &rArr; Dma2d::drawCircle(unsigned, unsigned, unsigned, unsigned) &rArr; Dma2d::drawRectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned) &rArr; Dma2d::SetMemory(unsigned, unsigned, unsigned, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHBClockEnable(unsigned)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma2d::Dma2d()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma2d::drawRectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma2d::drawCircle(unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::Start()
</UL>

<P><STRONG><a name="[e0]"></a>ILtdc::setPins() const</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, drvltdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = ILtdc::setPins() const &rArr; void EnableAF&lang;(unsigned)3&rang;(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char(&)[T1]) &rArr; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char*, unsigned) &rArr; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned) &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APBClockEnable(unsigned)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char*, unsigned)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHBClockEnable(unsigned)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void EnableAF&lang;(unsigned)3&rang;(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char(&)[T1])
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void EnableAF&lang;(unsigned)2&rang;(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char(&)[T1])
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::Ili9341()
</UL>

<P><STRONG><a name="[ee]"></a>Dma2d::Dma2d()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILtdc::initLTDC() const
</UL>

<P><STRONG><a name="[209]"></a>Dma2d::Dma2d__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dma2d.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>Dma2d::waitToInit()</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, dma2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma2d::drawRectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[f3]"></a>Dma2d::SetMemory(unsigned, unsigned, unsigned, unsigned short)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dma2d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Dma2d::SetMemory(unsigned, unsigned, unsigned, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma2d::drawRectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[ef]"></a>Dma2d::drawRectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned)</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, dma2d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Dma2d::drawRectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned) &rArr; Dma2d::SetMemory(unsigned, unsigned, unsigned, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma2d::SetMemory(unsigned, unsigned, unsigned, unsigned short)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma2d::waitToInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILtdc::initLTDC() const
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma2d::drawCircle(unsigned, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[f0]"></a>Dma2d::drawCircle(unsigned, unsigned, unsigned, unsigned)</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, dma2d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Dma2d::drawCircle(unsigned, unsigned, unsigned, unsigned) &rArr; Dma2d::drawRectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned) &rArr; Dma2d::SetMemory(unsigned, unsigned, unsigned, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma2d::drawRectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILtdc::initLTDC() const
</UL>

<P><STRONG><a name="[f7]"></a>Formatter::PrintUINT32Dec(unsigned, int, int, bool)</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, formatter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Formatter::PrintUINT32Dec(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValDec(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)10&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)10&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::ResetWidth()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinkConverter::~SinkConverter()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinkConverter::SinkConverter(Formatter::ISink&)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Formatter_cpp]::WriteValDec(Num2Ascii::ISink&, unsigned, int, int, const char*)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Formatter_cpp]::WriteValDec(Num2Ascii::ISink&, unsigned, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintSINT32Dec(int, int, int, bool)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT32Dec(unsigned, int)
</UL>

<P><STRONG><a name="[fc]"></a>Formatter::PrintUINT64Dec(const unsigned long long&, int, int, bool)</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, formatter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::ResetWidth()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinkConverter::~SinkConverter()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinkConverter::SinkConverter(Formatter::ISink&)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Formatter_cpp]::WriteValDec(Num2Ascii::ISink&, const unsigned long long&, int, int)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Formatter_cpp]::WriteValDec(Num2Ascii::ISink&, const unsigned long long&, int, int, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintSINT64Dec(const long long&, int, int, bool)
</UL>

<P><STRONG><a name="[fe]"></a>Formatter::PrintSINT32Dec(int, int, int, bool)</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, formatter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::ResetWidth()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinkConverter::~SinkConverter()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinkConverter::SinkConverter(Formatter::ISink&)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT32Dec(unsigned, int, int, bool)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Formatter_cpp]::WriteValDec(Num2Ascii::ISink&, unsigned, int, int, const char*)
</UL>

<P><STRONG><a name="[ff]"></a>Formatter::PrintSINT64Dec(const long long&, int, int, bool)</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, formatter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::ResetWidth()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinkConverter::~SinkConverter()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinkConverter::SinkConverter(Formatter::ISink&)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT64Dec(const unsigned long long&, int, int, bool)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Formatter_cpp]::WriteValDec(Num2Ascii::ISink&, const unsigned long long&, int, int, const char*)
</UL>

<P><STRONG><a name="[100]"></a>Formatter::PrintUINT32Hex(unsigned, int, int, bool)</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, formatter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::ResetWidth()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinkConverter::~SinkConverter()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinkConverter::SinkConverter(Formatter::ISink&)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::WriteByte(unsigned char)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT32Hex(unsigned, int)
</UL>

<P><STRONG><a name="[103]"></a>Formatter::PrintUINT64Hex(const unsigned long long&, int, int, bool)</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, formatter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::ResetWidth()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinkConverter::~SinkConverter()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinkConverter::SinkConverter(Formatter::ISink&)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, const unsigned long long&, int, int, const char*)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, const unsigned long long&, int, int)
</UL>

<P><STRONG><a name="[106]"></a>Formatter::PrintTxt(const char*, int)</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, formatter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = Formatter::PrintTxt(const char*, int) &rArr;  Formatter::WriteByte(unsigned char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const char*& CheckValue&lang;const char*&&rang;::Verify&lang;Formatter::PrintTxt(const char*, int)::[lambda(const volatile void*) (instance 1)]&rang;(const char*&, T1)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::WriteByteRepeated(unsigned char, int)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::WriteByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintTxt(const char*)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintTxtQuoted(const char*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::WriteByte(unsigned char)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::AsTxt::ToString(Formatter&) const
</UL>

<P><STRONG><a name="[107]"></a>Formatter::WriteByte(unsigned char)</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, formatter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintTxt(const char*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintTxt(const char*, int)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT32Hex(unsigned, int, int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintChr(unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::WriteByteRepeated(unsigned char, int)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintTxtQuoted(const char*)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintChrQuoted(unsigned char)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintTxt(const char*, int)
</UL>

<P><STRONG><a name="[10b]"></a>Formatter::PrintChrQuoted(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, formatter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintChr(unsigned char)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::WriteByte(unsigned char)
</UL>

<P><STRONG><a name="[10d]"></a>Formatter::PrintTxtQuoted(const char*)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, formatter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const char*& CheckValue&lang;const char*&&rang;::Verify&lang;Formatter::PrintTxtQuoted(const char*)::[lambda(const volatile void*) (instance 1)]&rang;(const char*&, T1)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::WriteByte(unsigned char)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintTxt(const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::AsTxt::ToString(Formatter&) const
</UL>

<P><STRONG><a name="[10f]"></a>Formatter::SetFormat(Formatter::FmtModeType)</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, formatter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::SetPrefix(bool)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::SetRadix(Formatter::RadixMdType)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::SetSign(bool)
</UL>

<P><STRONG><a name="[10]"></a>IRQ_Reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>IRQ_DebMon</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_DebMon
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_DebMon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>IRQ_ADC</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>IRQ_CAN1_RX0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>IRQ_CAN1_RX1</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>IRQ_CAN1_SCE</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>IRQ_CAN1_TX</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>IRQ_CAN2_RX0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>IRQ_CAN2_RX1</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>IRQ_CAN2_SCE</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>IRQ_CAN2_TX</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>IRQ_CRYP</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>IRQ_DCMI</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ_DMA1_STREAM0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ_DMA1_STREAM1</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>IRQ_DMA1_STREAM2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>IRQ_DMA1_STREAM3</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>IRQ_DMA1_STREAM4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IRQ_DMA1_STREAM5</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>IRQ_DMA1_STREAM6</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>IRQ_DMA1_STREAM7</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>IRQ_DMA2D</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>IRQ_DMA2_STREAM0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>IRQ_DMA2_STREAM1</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>IRQ_DMA2_STREAM2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>IRQ_DMA2_STREAM3</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>IRQ_DMA2_STREAM4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>IRQ_DMA2_STREAM5</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>IRQ_DMA2_STREAM6</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>IRQ_DMA2_STREAM7</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>IRQ_ETH</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>IRQ_ETH_WKUP</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ_EXTI00</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ_EXTI01</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ_EXTI02</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ_EXTI03</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ_EXTI04</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>IRQ_EXTI05TO09</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>IRQ_EXTI10TO15</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ_FLASH</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>IRQ_FMC</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>IRQ_FPU</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>IRQ_HASH_RNG</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>IRQ_I2C1_ER</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>IRQ_I2C1_EV</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>IRQ_I2C2_ER</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>IRQ_I2C2_EV</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>IRQ_I2C3_ER</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>IRQ_I2C3_EV</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>IRQ_LTDC</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>IRQ_LTDC_ERR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>IRQ_OTG_FS</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>IRQ_OTG_FS_WKUP</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>IRQ_OTG_HS</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>IRQ_OTG_HS_EP1_IN</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>IRQ_OTG_HS_EP1_OUT</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>IRQ_OTG_WKUP</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ_PVD</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ_RCC</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>IRQ_RTC_ALARM</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ_RTC_WKUP</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>IRQ_SAI1</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>IRQ_SDIO</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>IRQ_SPI1</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>IRQ_SPI2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>IRQ_SPI3</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>IRQ_SPI4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>IRQ_SPI5</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>IRQ_SPI6</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ_TAMP</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>IRQ_TIM01_BK_TIM09</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>IRQ_TIM01_CC</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>IRQ_TIM01_TR_TIM11</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>IRQ_TIM01_UE_TIM10</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>IRQ_TIM02</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>IRQ_TIM03</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>IRQ_TIM04</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>IRQ_TIM05</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>IRQ_TIM06_DAC</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>IRQ_TIM07</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>IRQ_TIM08_BK_TIM12</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>IRQ_TIM08_CC</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>IRQ_TIM08_TR_TIM14</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>IRQ_TIM08_UE_TIM13</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>IRQ_UART4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>IRQ_UART5</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>IRQ_UART7</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>IRQ_UART8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>IRQ_USART1</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>IRQ_USART2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>IRQ_USART3</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>IRQ_USART6</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>IRQ_WWDG</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>__user_setup_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, stm32f429_startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[75]"></a>VeryFirstInit</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, stm32f429_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = VeryFirstInit &rArr; InitSDRAM() &rArr; void EnableAF&lang;(unsigned)11&rang;(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char(&)[T1]) &rArr; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char*, unsigned) &rArr; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned) &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHBClockEnable(unsigned)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSDRAM()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SetBASEPRI_privileged(unsigned)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::FpuEnable()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to STM32F429_init_cpp]::EnableOverdrive()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to STM32F429_init_cpp]::EnableClock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>HClk()</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f429_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PClk2()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PClk1()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to STM32F429_init_cpp]::Init_STK()
</UL>

<P><STRONG><a name="[12c]"></a>PClk1()</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f429_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HClk()
</UL>

<P><STRONG><a name="[12d]"></a>PClk2()</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f429_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HClk()
</UL>

<P><STRONG><a name="[77]"></a>UndefinedIRQ</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f429_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UndefinedIRQ &rArr; Cortex::Reset() &rArr; Cortex::IsPrivileged() &rArr; Cortex::IsThreadMode() &rArr; Cortex::GetCurrentIsrNum() &rArr; Cortex::GetIPSR()
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::Reset()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>IRdPin::~IRdPin__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drvdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWrPin::~IWrPin__sub_object()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRdPin::~IRdPin__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvdio.o(.constdata__ZTV6IRdPin)
</UL>
<P><STRONG><a name="[95]"></a>IRdPin::~IRdPin__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, drvdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = IRdPin::~IRdPin__deallocating() &rArr; operator delete (void*) &rArr; free &rArr; _mutex_release &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRdPin::~IRdPin__sub_object()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvdio.o(.constdata__ZTV6IRdPin)
</UL>
<P><STRONG><a name="[96]"></a>IWrPin::~IWrPin__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, drvdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IWrPin::~IWrPin__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRdPin::~IRdPin__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWrPin::~IWrPin__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvdio.o(.constdata__ZTV6IWrPin)
</UL>
<P><STRONG><a name="[97]"></a>IWrPin::~IWrPin__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, drvdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = IWrPin::~IWrPin__deallocating() &rArr; operator delete (void*) &rArr; free &rArr; _mutex_release &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWrPin::~IWrPin__sub_object()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvdio.o(.constdata__ZTV6IWrPin)
</UL>
<P><STRONG><a name="[86]"></a>IDio::~IDio__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drvdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortBase::~PortBase()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDio::~IDio__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvdio.o(.constdata__ZTV4IDio)
</UL>
<P><STRONG><a name="[87]"></a>IDio::~IDio__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, drvdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = IDio::~IDio__deallocating() &rArr; operator delete (void*) &rArr; free &rArr; _mutex_release &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDio::~IDio__sub_object()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvdio.o(.constdata__ZTV4IDio)
</UL>
<P><STRONG><a name="[8a]"></a>PortBase::CreateRdPin(unsigned)</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, drvdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = PortBase::CreateRdPin(unsigned) &rArr; MemPool&lang;(unsigned)12, (unsigned)16&rang;::Alloc() &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemPool&lang;(unsigned)12, (unsigned)16&rang;::MemPool()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemPool&lang;(unsigned)12, (unsigned)16&rang;::Alloc()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, void*)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdPin::RdPin(volatile __regbank_GPIO&, unsigned)
</UL>
<BR>[Address Reference Count : 7]<UL><LI> drvdio.o(.constdata__ZTV8PortBase)
<LI> drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOAEE)
<LI> drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOBEE)
<LI> drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOCEE)
<LI> drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIODEE)
<LI> drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOFEE)
<LI> drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOGEE)
</UL>
<P><STRONG><a name="[8b]"></a>PortBase::CreateWrPin(unsigned)</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, drvdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = PortBase::CreateWrPin(unsigned) &rArr; MemPool&lang;(unsigned)12, (unsigned)16&rang;::Alloc() &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemPool&lang;(unsigned)12, (unsigned)16&rang;::MemPool()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemPool&lang;(unsigned)12, (unsigned)16&rang;::Alloc()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, void*)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrPin::WrPin(volatile __regbank_GPIO&, unsigned)
</UL>
<BR>[Address Reference Count : 7]<UL><LI> drvdio.o(.constdata__ZTV8PortBase)
<LI> drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOAEE)
<LI> drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOBEE)
<LI> drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOCEE)
<LI> drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIODEE)
<LI> drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOFEE)
<LI> drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOGEE)
</UL>
<P><STRONG><a name="[91]"></a>RdPin::Get() const</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, drvdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RdPin::Get() const &rArr; PinHelper::RdIdr() const
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinHelper::RdIdr() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvdio.o(.constdata__ZTV5RdPin)
</UL>
<P><STRONG><a name="[92]"></a>WrPin::Get() const</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, drvdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WrPin::Get() const &rArr; PinHelper::RdOdr() const
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinHelper::RdOdr() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvdio.o(.constdata__ZTV5WrPin)
</UL>
<P><STRONG><a name="[93]"></a>WrPin::Set(bool)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, drvdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WrPin::Set(bool) &rArr; PinHelper::WrBit(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinHelper::WrBit(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvdio.o(.constdata__ZTV5WrPin)
</UL>
<P><STRONG><a name="[140]"></a>IDio::CreateInstanceA()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drvdiog.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOA&rang;&rang;::GetInstance()
</UL>

<P><STRONG><a name="[141]"></a>IDio::CreateInstanceB()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drvdiog.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOB&rang;&rang;::GetInstance()
</UL>

<P><STRONG><a name="[d9]"></a>IDio::CreateInstanceC()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drvdiog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IDio::CreateInstanceC() &rArr; Singleton&lang;Port&lang;rbGPIOC&rang;&rang;::GetInstance() &rArr; Singleton&lang;Port&lang;rbGPIOC&rang;&rang;::Create() &rArr; InstanceWrapper&lang;Port&lang;rbGPIOC&rang;&rang;::InstanceWrapper() &rArr; Port&lang;rbGPIOC&rang;::Port() &rArr; AHBClockEnable(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOC&rang;&rang;::GetInstance()
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::Ili9341()
</UL>

<P><STRONG><a name="[da]"></a>IDio::CreateInstanceD()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drvdiog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IDio::CreateInstanceD() &rArr; Singleton&lang;Port&lang;rbGPIOD&rang;&rang;::GetInstance() &rArr; Singleton&lang;Port&lang;rbGPIOD&rang;&rang;::Create() &rArr; InstanceWrapper&lang;Port&lang;rbGPIOD&rang;&rang;::InstanceWrapper() &rArr; Port&lang;rbGPIOD&rang;::Port() &rArr; AHBClockEnable(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOD&rang;&rang;::GetInstance()
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::Ili9341()
</UL>

<P><STRONG><a name="[142]"></a>IDio::CreateInstanceF()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drvdiog.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOF&rang;&rang;::GetInstance()
</UL>

<P><STRONG><a name="[143]"></a>IDio::CreateInstanceG()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drvdiog.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOG&rang;&rang;::GetInstance()
</UL>

<P><STRONG><a name="[11]"></a>IRQ_NMI</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, faults.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ_NMI &rArr; [local to Faults_cpp]::ResetOnFault() &rArr; Cortex::SetPRIMASK_privileged() &rArr;  Cortex::SetPRIMASK_privileged() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Faults_cpp]::ResetOnFault()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[124]"></a>HandleHrdFlt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, faults.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HandleHrdFlt &rArr; [local to Faults_cpp]::ResetOnFault() &rArr; Cortex::SetPRIMASK_privileged() &rArr;  Cortex::SetPRIMASK_privileged() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Faults_cpp]::ResetOnFault()
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_HrdFlt
</UL>

<P><STRONG><a name="[127]"></a>HandleUsgFlt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, faults.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HandleUsgFlt &rArr; [local to Faults_cpp]::ResetOnFault() &rArr; Cortex::SetPRIMASK_privileged() &rArr;  Cortex::SetPRIMASK_privileged() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Faults_cpp]::ResetOnFault()
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_UsgFlt
</UL>

<P><STRONG><a name="[126]"></a>HandleBusFlt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, faults.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HandleBusFlt &rArr; [local to Faults_cpp]::ResetOnFault() &rArr; Cortex::SetPRIMASK_privileged() &rArr;  Cortex::SetPRIMASK_privileged() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Faults_cpp]::ResetOnFault()
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_BusFlt
</UL>

<P><STRONG><a name="[125]"></a>HandleMemFlt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, faults.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HandleMemFlt &rArr; [local to Faults_cpp]::ResetOnFault() &rArr; Cortex::SetPRIMASK_privileged() &rArr;  Cortex::SetPRIMASK_privileged() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Faults_cpp]::ResetOnFault()
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_MemFlt
</UL>

<P><STRONG><a name="[129]"></a>Cortex::FpuEnable()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cortex::FpuEnable()
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::DSB()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::ISB()
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VeryFirstInit
</UL>

<P><STRONG><a name="[c2]"></a>Cortex::FpuDisable()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cortex::FpuDisable()
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::DSB()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_WSR_control(unsigned)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_RSR_control()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::ISB()
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to STM32F429_DISCO_Start_cpp]::Initialize()
</UL>

<P><STRONG><a name="[148]"></a>Cortex::Reset_privileged()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cortex.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::Reset_privileged()
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::Reset()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSVC
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::Reset_privileged()
</UL>

<P><STRONG><a name="[20a]"></a>Cortex::AltStackIsOk()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cortex.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>Cortex::GetPSVPrio()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cortex.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>Cortex::GetSVCPrio()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cortex.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>Cortex::GetSTKPrio()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetMinPrio()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::IsInterruptableBySTK()
</UL>

<P><STRONG><a name="[133]"></a>Cortex::GetMinPrio()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cortex::GetMinPrio() &rArr; Cortex::SetCONTROL_privileged(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SetCONTROL_privileged(unsigned)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SetBASEPRI_privileged(unsigned)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetSTKPrio()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetBASEPRI_privileged()
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to STM32F429_init_cpp]::LocalInit()
</UL>

<P><STRONG><a name="[12e]"></a>Cortex::SetPRIMASK_privileged()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = Cortex::SetPRIMASK_privileged() &rArr;  Cortex::SetPRIMASK_privileged() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_WSR_control(unsigned)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_RSR_control()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SetPRIMASK_privileged()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::ISB()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_WSR_primask(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SetPRIMASK_privileged()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to STM32F429_init_cpp]::LocalInit()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Faults_cpp]::ResetOnFault()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SetPRIMASK()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSVC
</UL>

<P><STRONG><a name="[14c]"></a>Cortex::GetPRIMASK_privileged()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = Cortex::GetPRIMASK_privileged() &rArr;  Cortex::GetPRIMASK_privileged() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::ISB()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_RSR_primask()
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetPRIMASK_privileged()
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetPRIMASK()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSVC
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetPRIMASK_privileged()
</UL>

<P><STRONG><a name="[134]"></a>Cortex::ClrPRIMASK_privileged()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cortex::ClrPRIMASK_privileged()
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::ISB()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_WSR_primask(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to STM32F429_init_cpp]::LocalInit()
</UL>

<P><STRONG><a name="[14e]"></a>Cortex::SwitchStack(unsigned*, unsigned)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Cortex::SwitchStack(unsigned*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_WSR_control(unsigned)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_RSR_control()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::ISB()
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_WSR_psp(unsigned)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_WSR_msp(unsigned)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_RSR_msp()
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Cortex::SwitchStack&lang;(unsigned)4096&rang;(unsigned(&)[T1])
</UL>

<P><STRONG><a name="[152]"></a>Cortex::IsInterruptable(unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cortex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetPRIMASK()
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetBASEPRI()
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::IsInterruptableBySTK()
</UL>

<P><STRONG><a name="[193]"></a>_LdrExW</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, armexclusive.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::ArmExclusive&lang;(unsigned)4&rang;::LdrEx(const volatile unsigned&)
</UL>

<P><STRONG><a name="[18f]"></a>_LdrExH</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, armexclusive.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::ArmExclusive&lang;(unsigned)2&rang;::LdrEx(const volatile unsigned short&)
</UL>

<P><STRONG><a name="[20d]"></a>_LdrExB</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, armexclusive.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>_StrExW</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, armexclusive.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>

<P><STRONG><a name="[191]"></a>_StrExH</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, armexclusive.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::ArmExclusive&lang;(unsigned)2&rang;::StrEx(volatile unsigned short&, unsigned short)
</UL>

<P><STRONG><a name="[20e]"></a>_StrExB</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, armexclusive.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>PsvTrigger_privileged()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, psv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + In Cycle
<LI>Call Chain = PsvTrigger_privileged() &rArr;  PsvTrigger_privileged() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssertionFailed(const char*, const char*, unsigned, const char*)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::IsPrivileged()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsvTrigger_privileged()
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsvTrigger()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSVC
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsvTrigger_privileged()
</UL>

<P><STRONG><a name="[18]"></a>IRQ_PSV</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, psv.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>IRQ_STK</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IRQ_STK &rArr; T1 Atomic::Incr&lang;unsigned&rang;(volatile T1&) &rArr; T1 Atomic::Add&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)1&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackCheck()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Incr&lang;unsigned&rang;(volatile T1&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[157]"></a>Cortex::GetFineTime(unsigned)</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, stk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssertionFailed(const char*, const char*, unsigned, const char*)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::IsPrivileged()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::IsInterruptableBySTK()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to STK_cpp]::STK_FineTime(unsigned, unsigned)
</UL>

<P><STRONG><a name="[20f]"></a>Cortex::GetWideTicks()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stk.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>Cortex::GetTicks()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stk.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>HandleSVC</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, svc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = HandleSVC &rArr; PsvTrigger_privileged() &rArr;  PsvTrigger_privileged() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SetCONTROL_privileged(unsigned)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SetBASEPRI_privileged(unsigned)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SetPRIMASK_privileged()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to SVC_cpp]::Word2WordPtr(unsigned)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsvTrigger_privileged()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetBASEPRI_privileged()
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetPRIMASK_privileged()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::Reset_privileged()
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_SVC
</UL>

<P><STRONG><a name="[15d]"></a>PsvTrigger()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, svc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::IsPrivileged()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::ISB()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsvTrigger_privileged()
</UL>

<P><STRONG><a name="[15e]"></a>Cortex::SetCONTROL(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, svc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SetCONTROL_privileged(unsigned)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::IsPrivileged()
</UL>

<P><STRONG><a name="[15f]"></a>Cortex::SetBASEPRI(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, svc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SetBASEPRI_privileged(unsigned)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::IsPrivileged()
</UL>

<P><STRONG><a name="[154]"></a>Cortex::GetBASEPRI()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, svc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::IsPrivileged()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_GetBASEPRI()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetBASEPRI_privileged()
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::IsInterruptable(unsigned char)
</UL>

<P><STRONG><a name="[161]"></a>Cortex::SetPRIMASK()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, svc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::IsPrivileged()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SetPRIMASK_privileged()
</UL>

<P><STRONG><a name="[153]"></a>Cortex::GetPRIMASK()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, svc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::IsPrivileged()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_GetPRIMASK()
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetPRIMASK_privileged()
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::IsInterruptable(unsigned char)
</UL>

<P><STRONG><a name="[135]"></a>Cortex::Reset()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, svc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Cortex::Reset() &rArr; Cortex::IsPrivileged() &rArr; Cortex::IsThreadMode() &rArr; Cortex::GetCurrentIsrNum() &rArr; Cortex::GetIPSR()
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItmPutS(const char*)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::IsPrivileged()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::Reset_privileged()
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssertionFailed(const char*, const char*, unsigned, const char*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackCheck()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UndefinedIRQ
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_abort
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyNewHandler()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTerminate()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_handler
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_raise
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramAbortion(const char*, const char*, unsigned, const char*)
</UL>

<P><STRONG><a name="[16d]"></a>StackCheckInit()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, debug.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Debug_cpp]::LocalInit()
</UL>

<P><STRONG><a name="[164]"></a>SaveItmChan0(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, debug.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItmPutS(const char*)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinkForItm::WriteByte(unsigned char)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar(int)
</UL>

<P><STRONG><a name="[c1]"></a>ItmPutS(const char*)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ItmPutS(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestItmChan0()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveItmChan0(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackCheck()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to STM32F429_DISCO_Start_cpp]::Initialize()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_abort
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOG&rang;&rang;::InstanceWrapper()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOF&rang;&rang;::InstanceWrapper()
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOD&rang;&rang;::InstanceWrapper()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOC&rang;&rang;::InstanceWrapper()
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOB&rang;&rang;::InstanceWrapper()
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOA&rang;&rang;::InstanceWrapper()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_handler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv0
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItmFmt()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Debug_cpp]::LocalInit()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::Reset()
</UL>

<P><STRONG><a name="[c3]"></a>StackCheck()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = StackCheck() &rArr; Cortex::Reset() &rArr; Cortex::IsPrivileged() &rArr; Cortex::IsThreadMode() &rArr; Cortex::GetCurrentIsrNum() &rArr; Cortex::GetIPSR()
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItmPutS(const char*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to STM32F429_DISCO_Start_cpp]::Initialize()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned long long, (unsigned)16&rang;(T1, int, int)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned long long, (unsigned)10&rang;(T1, int, int)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned, (unsigned)10&rang;(T1, int, int)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOG&rang;&rang;::InstanceWrapper()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOF&rang;&rang;::InstanceWrapper()
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOD&rang;&rang;::InstanceWrapper()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOC&rang;&rang;::InstanceWrapper()
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOB&rang;&rang;::InstanceWrapper()
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOA&rang;&rang;::InstanceWrapper()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...)
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_STK
</UL>

<P><STRONG><a name="[121]"></a>IsValidPointer(const volatile void*)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsValidPointer(const volatile void*) &rArr; [local to Debug_cpp]::CheckRange(unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Debug_cpp]::CheckRange(unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintTxtQuoted(const char*)::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintTxt(const char*, int)::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::WritePrefix()::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const
</UL>

<P><STRONG><a name="[166]"></a>ItmFmt()</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ItmFmt() &rArr; __cxa_guard_acquire &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItmPutS(const char*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::Formatter(Formatter::ISink&)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinkForItm::SinkForItm()
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...)
</UL>

<P><STRONG><a name="[c5]"></a>AssertionFailed(const char*, const char*, unsigned, const char*)</STRONG> (Thumb, 72 bytes, Stack size 64 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::AsTxt::AsTxt(const char*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned long long, (unsigned)16&rang;(T1, int, int)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned long long, (unsigned)10&rang;(T1, int, int)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned, (unsigned)10&rang;(T1, int, int)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintTxtQuoted(const char*)::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintTxt(const char*, int)::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::WritePrefix()::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemPool&lang;(unsigned)12, (unsigned)16&rang;::Alloc()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetFineTime(unsigned)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsvTrigger_privileged()
</UL>

<P><STRONG><a name="[16b]"></a>ProgramAbortion(const char*, const char*, unsigned, const char*)</STRONG> (Thumb, 74 bytes, Stack size 64 bytes, debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::AsTxt::AsTxt(const char*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::Reset()
</UL>

<P><STRONG><a name="[16c]"></a>sendchar(int)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestItmChan0()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveItmChan0(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[16e]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar(int)
</UL>

<P><STRONG><a name="[170]"></a>getkey()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[16f]"></a>fgetc</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey()
</UL>

<P><STRONG><a name="[211]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>abort</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = abort &rArr; Cortex::Reset() &rArr; Cortex::IsPrivileged() &rArr; Cortex::IsThreadMode() &rArr; Cortex::GetCurrentIsrNum() &rArr; Cortex::GetIPSR()
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::__default_terminate_handler()
</UL>

<P><STRONG><a name="[bf]"></a>exit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = exit &rArr; Cortex::Reset() &rArr; Cortex::IsPrivileged() &rArr; Cortex::IsThreadMode() &rArr; Cortex::GetCurrentIsrNum() &rArr; Cortex::GetIPSR()
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[172]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::Reset()
</UL>

<P><STRONG><a name="[173]"></a>__rt_exit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::Reset()
</UL>

<P><STRONG><a name="[174]"></a>__rt_raise</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_raise &rArr; Cortex::Reset() &rArr; Cortex::IsPrivileged() &rArr; Cortex::IsThreadMode() &rArr; Cortex::GetCurrentIsrNum() &rArr; Cortex::GetIPSR()
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGFPE
</UL>

<P><STRONG><a name="[175]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar(int)
</UL>

<P><STRONG><a name="[212]"></a>__stack_chk_fail</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__cxa_pure_virtual</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, premain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_pure_virtual &rArr; Cortex::Reset() &rArr; Cortex::IsPrivileged() &rArr; Cortex::IsThreadMode() &rArr; Cortex::GetCurrentIsrNum() &rArr; Cortex::GetIPSR()
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItmPutS(const char*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::Reset()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> drvdio.o(.constdata__ZTV6IRdPin)
<LI> drvdio.o(.constdata__ZTV6IWrPin)
<LI> drvdio.o(.constdata__ZTV4IDio)
<LI> formatter.o(.constdata__ZTVN9Num2Ascii5ISinkE)
<LI> debug.o(.constdata__ZTVN9Formatter5ISinkE)
</UL>
<P><STRONG><a name="[a6]"></a>__aeabi_atexit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, premain.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOG&rang;&rang;::Create()
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOF&rang;&rang;::Create()
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOD&rang;&rang;::Create()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOC&rang;&rang;::Create()
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOB&rang;&rang;::Create()
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOA&rang;&rang;::Create()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItmFmt()
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_idiv0</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, premain.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_idiv0 &rArr; ItmPutS(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItmPutS(const char*)
</UL>

<P><STRONG><a name="[a8]"></a>__ARM_exceptions_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, premain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = __ARM_exceptions_init &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; _mutex_release &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_exceptions_1
</UL>

<P><STRONG><a name="[a9]"></a>__default_signal_handler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, premain.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __default_signal_handler &rArr; Cortex::Reset() &rArr; Cortex::IsPrivileged() &rArr; Cortex::IsThreadMode() &rArr; Cortex::GetCurrentIsrNum() &rArr; Cortex::GetIPSR()
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItmPutS(const char*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::Reset()
</UL>

<P><STRONG><a name="[aa]"></a>__cxa_guard_acquire</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, premain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + In Cycle
<LI>Call Chain = __cxa_guard_acquire &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssertionFailed(const char*, const char*, unsigned, const char*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::IsThreadMode()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOG&rang;&rang;::Create()
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOF&rang;&rang;::Create()
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOD&rang;&rang;::Create()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOC&rang;&rang;::Create()
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOB&rang;&rang;::Create()
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOA&rang;&rang;::Create()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortBase::CreateWrPin(unsigned)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortBase::CreateRdPin(unsigned)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItmFmt()
</UL>

<P><STRONG><a name="[ab]"></a>__cxa_guard_release</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, premain.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOG&rang;&rang;::Create()
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOF&rang;&rang;::Create()
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOD&rang;&rang;::Create()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOC&rang;&rang;::Create()
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOB&rang;&rang;::Create()
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOA&rang;&rang;::Create()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortBase::CreateWrPin(unsigned)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortBase::CreateRdPin(unsigned)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItmFmt()
</UL>

<P><STRONG><a name="[ac]"></a>__cxa_guard_abort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, premain.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_guard_abort &rArr; Cortex::Reset() &rArr; Cortex::IsPrivileged() &rArr; Cortex::IsThreadMode() &rArr; Cortex::GetCurrentIsrNum() &rArr; Cortex::GetIPSR()
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItmPutS(const char*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::Reset()
</UL>

<P><STRONG><a name="[ad]"></a>_mutex_acquire</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, premain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = _mutex_acquire &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssertionFailed(const char*, const char*, unsigned, const char*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::IsThreadMode()
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[ae]"></a>_mutex_release</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, premain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = _mutex_release &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssertionFailed(const char*, const char*, unsigned, const char*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::IsThreadMode()
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[af]"></a>_mutex_initialize</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, premain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = _mutex_initialize &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssertionFailed(const char*, const char*, unsigned, const char*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::IsThreadMode()
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>

<P><STRONG><a name="[7a]"></a>MyTerminate()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mystuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MyTerminate() &rArr; Cortex::Reset() &rArr; Cortex::IsPrivileged() &rArr; Cortex::IsThreadMode() &rArr; Cortex::GetCurrentIsrNum() &rArr; Cortex::GetIPSR()
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::Reset()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> initialize.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>MyNewHandler()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mystuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MyNewHandler() &rArr; Cortex::Reset() &rArr; Cortex::IsPrivileged() &rArr; Cortex::IsThreadMode() &rArr; Cortex::GetCurrentIsrNum() &rArr; Cortex::GetIPSR()
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::Reset()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> initialize.o(.text)
</UL>
<P><STRONG><a name="[213]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned long long, (unsigned)16&rang;(T1, int, int)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned long long, (unsigned)10&rang;(T1, int, int)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to STK_cpp]::STK_FineTime(unsigned, unsigned)
</UL>

<P><STRONG><a name="[179]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldiv0
</UL>

<P><STRONG><a name="[19d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortBase::PortBase(volatile __regbank_GPIO&)
</UL>

<P><STRONG><a name="[216]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[177]"></a>std::set_terminate(void(*)())</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, arm_exceptions_setterminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = std::set_terminate(void(*)()) &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; _mutex_release &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Initialize_cpp]::LocalInit()
</UL>

<P><STRONG><a name="[176]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; _mutex_release &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::set_terminate(void(*)())
</UL>

<P><STRONG><a name="[17a]"></a>__aeabi_ldiv0</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, aeabi_ldiv0_sigfpe.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_div0
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv
</UL>

<P><STRONG><a name="[1b3]"></a>__rt_new_handler_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_new_handler_addr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::set_new_handler(void(*)())
</UL>

<P><STRONG><a name="[17b]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_eh_globals_addr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[17d]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; _mutex_release &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[21a]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>__rt_div0</STRONG> (Thumb, 10 bytes, Stack size 16 bytes, rt_div0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGFPE
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldiv0
</UL>

<P><STRONG><a name="[184]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[21c]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _FDTree_Insert
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[182]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[b6]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = _init_alloc &rArr; __Heap_Initialize &rArr; _mutex_initialize &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[17f]"></a>__rt_SIGFPE</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, defsig_fpe_formal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_raise
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_div0
</UL>

<P><STRONG><a name="[183]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, defsig_rtmem_formal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_raise &rArr; Cortex::Reset() &rArr; Cortex::IsPrivileged() &rArr; Cortex::IsThreadMode() &rArr; Cortex::GetCurrentIsrNum() &rArr; Cortex::GetIPSR()
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_raise
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[1b5]"></a>_FDTree_Delete</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, fdtree.o(i._FDTree_Delete))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[1b7]"></a>_FDTree_FindFirst</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, fdtree.o(i._FDTree_FindFirst))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _FDTree_FindFirst
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1b6]"></a>_FDTree_Insert</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, fdtree.o(i._FDTree_Insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _FDTree_Insert
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[1b8]"></a>_FDTree_RemoveNode</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, fdtree.o(i._FDTree_RemoveNode))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[14f]"></a>ARM_RSR_msp()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cortex.o(i._Z11ARM_RSR_mspv))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SwitchStack(unsigned*, unsigned)
</UL>

<P><STRONG><a name="[151]"></a>ARM_WSR_msp(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cortex.o(i._Z11ARM_WSR_mspj))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SwitchStack(unsigned*, unsigned)
</UL>

<P><STRONG><a name="[150]"></a>ARM_WSR_psp(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cortex.o(i._Z11ARM_WSR_pspj))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SwitchStack(unsigned*, unsigned)
</UL>

<P><STRONG><a name="[19a]"></a>ARM_RSR_ipsr()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f429_disco_start.o(i._Z12ARM_RSR_ipsrv))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetIPSR()
</UL>

<P><STRONG><a name="[163]"></a>TestItmChan0()</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, debug.o(i._Z12TestItmChan0v))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItmPutS(const char*)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinkForItm::WriteByte(unsigned char)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar(int)
</UL>

<P><STRONG><a name="[d5]"></a>SDRAM_Command(unsigned)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, initsdram.o(i._Z13SDRAM_Commandj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDRAM_Command(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDSR_IsBusy()
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSDRAM()
</UL>

<P><STRONG><a name="[d3]"></a>AHBClockEnable(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, initsdram.o(i._Z14AHBClockEnablej))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AHBClockEnable(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILtdc::initLTDC() const
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILtdc::setPins() const
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISpi::initSPI() const
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSDRAM()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::Ili9341()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VeryFirstInit
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOG&rang;::Port()
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOF&rang;::Port()
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOD&rang;::Port()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOC&rang;::Port()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOB&rang;::Port()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOA&rang;::Port()
</UL>

<P><STRONG><a name="[d8]"></a>APBClockEnable(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drvspi.o(i._Z14APBClockEnablej))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = APBClockEnable(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILtdc::setPins() const
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISpi::initSPI() const
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to STM32F429_init_cpp]::EnableOverdrive()
</UL>

<P><STRONG><a name="[160]"></a>SVC_GetBASEPRI()</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, svc.o(i._Z14SVC_GetBASEPRIv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetBASEPRI()
</UL>

<P><STRONG><a name="[162]"></a>SVC_GetPRIMASK()</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, svc.o(i._Z14SVC_GetPRIMASKv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetPRIMASK()
</UL>

<P><STRONG><a name="[198]"></a>ARM_RSR_basepri()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cortex.o(i._Z15ARM_RSR_basepriv))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetBASEPRI_privileged()
</UL>

<P><STRONG><a name="[146]"></a>ARM_RSR_control()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f429_disco_start.o(i._Z15ARM_RSR_controlv))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::FpuDisable()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetCONTROL()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SetPRIMASK_privileged()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SwitchStack(unsigned*, unsigned)
</UL>

<P><STRONG><a name="[14d]"></a>ARM_RSR_primask()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cortex.o(i._Z15ARM_RSR_primaskv))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetPRIMASK_privileged()
</UL>

<P><STRONG><a name="[199]"></a>ARM_WSR_basepri(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f429_disco_start.o(i._Z15ARM_WSR_baseprij))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SetBASEPRI_privileged(unsigned)
</UL>

<P><STRONG><a name="[147]"></a>ARM_WSR_control(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f429_disco_start.o(i._Z15ARM_WSR_controlj))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::FpuDisable()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SetCONTROL_privileged(unsigned)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SetPRIMASK_privileged()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SwitchStack(unsigned*, unsigned)
</UL>

<P><STRONG><a name="[14b]"></a>ARM_WSR_primask(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cortex.o(i._Z15ARM_WSR_primaskj))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SetPRIMASK_privileged()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::ClrPRIMASK_privileged()
</UL>

<P><STRONG><a name="[d6]"></a>FMC_SDSR_IsBusy()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, initsdram.o(i._Z15FMC_SDSR_IsBusyv))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Command(unsigned)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSDRAM()
</UL>

<P><STRONG><a name="[145]"></a>ARM_WSR_faultmask(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, faults.o(i._Z17ARM_WSR_faultmaskj))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Faults_cpp]::ResetOnFault()
</UL>

<P><STRONG><a name="[cf]"></a>AHB1ClockEnableByMask(unsigned)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, initsdram.o(i._Z21AHB1ClockEnableByMaskj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AHB1ClockEnableByMask(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSDRAM()
</UL>

<P><STRONG><a name="[15a]"></a>UMULL(unsigned, unsigned)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, stk.o(i._Z5UMULLjj), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to STK_cpp]::STK_FineTime(unsigned, unsigned)
</UL>

<P><STRONG><a name="[d0]"></a>EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char*, unsigned)</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, initsdram.o(i._Z8EnableAFRV14__regbank_GPIOjjbPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char*, unsigned) &rArr; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned) &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILtdc::setPins() const
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void EnableAF&lang;(unsigned)11&rang;(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char(&)[T1])
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSDRAM()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void EnableAF&lang;(unsigned)3&rang;(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char(&)[T1])
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void EnableAF&lang;(unsigned)2&rang;(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char(&)[T1])
</UL>

<P><STRONG><a name="[d1]"></a>EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, initsdram.o(i._Z8EnableAFRV14__regbank_GPIOjjbj))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned) &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Bfld&lang;unsigned&rang;(volatile T1&, T1, T1)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Orr&lang;unsigned short&rang;(volatile T1&, T1)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Bic&lang;unsigned short&rang;(volatile T1&, T1)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssertionFailed(const char*, const char*, unsigned, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISpi::initSPI() const
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char*, unsigned)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSDRAM()
</UL>

<P><STRONG><a name="[dd]"></a>WrGpioMD(volatile __regbank_GPIO&, unsigned, unsigned)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ili9341.o(i._Z8WrGpioMDRV14__regbank_GPIOjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WrGpioMD(volatile __regbank_GPIO&, unsigned, unsigned) &rArr; T1 Atomic::Bfld&lang;unsigned&rang;(volatile T1&, T1, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Bfld&lang;unsigned&rang;(volatile T1&, T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::Ili9341()
</UL>

<P><STRONG><a name="[de]"></a>WrGpioSP(volatile __regbank_GPIO&, unsigned, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ili9341.o(i._Z8WrGpioSPRV14__regbank_GPIOjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WrGpioSP(volatile __regbank_GPIO&, unsigned, unsigned) &rArr; T1 Atomic::Bfld&lang;unsigned&rang;(volatile T1&, T1, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Bfld&lang;unsigned&rang;(volatile T1&, T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::Ili9341()
</UL>

<P><STRONG><a name="[83]"></a>SinkForItm::WriteByte(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, debug.o(i._ZN10SinkForItm9WriteByteEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SinkForItm::WriteByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestItmChan0()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveItmChan0(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug.o(.constdata__ZTV10SinkForItm)
</UL>
<P><STRONG><a name="[167]"></a>SinkForItm::SinkForItm()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, debug.o(i._ZN10SinkForItmC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SinkForItm::SinkForItm()
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::ISink::ISink__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItmFmt()
</UL>

<P><STRONG><a name="[21e]"></a>SinkForItm::SinkForItm__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, debug.o(i._ZN10SinkForItmC1Ev), UNUSED)

<P><STRONG><a name="[78]"></a>SinkForItm::~SinkForItm()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, debug.o(i._ZN10SinkForItmD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SinkForItm::~SinkForItm()
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::ISink::~ISink__sub_object()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> debug.o(.text)
<LI> debug.o(.constdata__ZTV10SinkForItm)
</UL>
<P><STRONG><a name="[21f]"></a>SinkForItm::~SinkForItm__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, debug.o(i._ZN10SinkForItmD1Ev), UNUSED)

<P><STRONG><a name="[85]"></a>SinkConverter::WriteByte(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, formatter.o(i._ZN13SinkConverter9WriteByteEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SinkConverter::WriteByte(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formatter.o(.constdata__ZTV13SinkConverter)
</UL>
<P><STRONG><a name="[f8]"></a>SinkConverter::SinkConverter(Formatter::ISink&)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, formatter.o(i._ZN13SinkConverterC1ERN9Formatter5ISinkE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SinkConverter::SinkConverter(Formatter::ISink&)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::ISink::ISink__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT64Hex(const unsigned long long&, int, int, bool)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT32Hex(unsigned, int, int, bool)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintSINT64Dec(const long long&, int, int, bool)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintSINT32Dec(int, int, int, bool)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT64Dec(const unsigned long long&, int, int, bool)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT32Dec(unsigned, int, int, bool)
</UL>

<P><STRONG><a name="[220]"></a>SinkConverter::SinkConverter__sub_object(Formatter::ISink&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, formatter.o(i._ZN13SinkConverterC1ERN9Formatter5ISinkE), UNUSED)

<P><STRONG><a name="[84]"></a>SinkConverter::~SinkConverter()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, formatter.o(i._ZN13SinkConverterD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SinkConverter::~SinkConverter()
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::ISink::~ISink__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT64Hex(const unsigned long long&, int, int, bool)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT32Hex(unsigned, int, int, bool)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintSINT64Dec(const long long&, int, int, bool)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintSINT32Dec(int, int, int, bool)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT64Dec(const unsigned long long&, int, int, bool)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT32Dec(unsigned, int, int, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formatter.o(.constdata__ZTV13SinkConverter)
</UL>
<P><STRONG><a name="[221]"></a>SinkConverter::~SinkConverter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, formatter.o(i._ZN13SinkConverterD1Ev), UNUSED)

<P><STRONG><a name="[19c]"></a>IDio::IDio__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drvdiog.o(i._ZN4IDioC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortBase::PortBase(volatile __regbank_GPIO&)
</UL>

<P><STRONG><a name="[13a]"></a>RdPin::RdPin(volatile __regbank_GPIO&, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, drvdio.o(i._ZN5RdPinC1ERV14__regbank_GPIOj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = RdPin::RdPin(volatile __regbank_GPIO&, unsigned) &rArr; PinHelper::PinHelper(volatile __regbank_GPIO&, unsigned, unsigned) &rArr; [local to DrvDio_cpp]::WrGpioMDExt(volatile __regbank_GPIO&, unsigned, unsigned, bool, bool) &rArr; T1 Atomic::Bfld&lang;unsigned&rang;(volatile T1&, T1, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinHelper::PinHelper(volatile __regbank_GPIO&, unsigned, unsigned)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRdPin::IRdPin__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortBase::CreateRdPin(unsigned)
</UL>

<P><STRONG><a name="[222]"></a>RdPin::RdPin__sub_object(volatile __regbank_GPIO&, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drvdio.o(i._ZN5RdPinC1ERV14__regbank_GPIOj), UNUSED)

<P><STRONG><a name="[13b]"></a>WrPin::WrPin(volatile __regbank_GPIO&, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, drvdio.o(i._ZN5WrPinC1ERV14__regbank_GPIOj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WrPin::WrPin(volatile __regbank_GPIO&, unsigned) &rArr; PinHelper::PinHelper(volatile __regbank_GPIO&, unsigned, unsigned) &rArr; [local to DrvDio_cpp]::WrGpioMDExt(volatile __regbank_GPIO&, unsigned, unsigned, bool, bool) &rArr; T1 Atomic::Bfld&lang;unsigned&rang;(volatile T1&, T1, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinHelper::PinHelper(volatile __regbank_GPIO&, unsigned, unsigned)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWrPin::IWrPin__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortBase::CreateWrPin(unsigned)
</UL>

<P><STRONG><a name="[223]"></a>WrPin::WrPin__sub_object(volatile __regbank_GPIO&, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drvdio.o(i._ZN5WrPinC1ERV14__regbank_GPIOj), UNUSED)

<P><STRONG><a name="[c9]"></a>Cortex::GetCONTROL()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f429_disco_start.o(i._ZN6Cortex10GetCONTROLEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cortex::GetCONTROL()
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_RSR_control()
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::IsPrivileged()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18e]"></a>Cortex::ArmExclusive&lang;(unsigned)2&rang;::LdrEx(const volatile unsigned short&)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, initsdram.o(i._ZN6Cortex12ArmExclusiveILj2EE5LdrExERVKt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cortex::ArmExclusive&lang;(unsigned)2&rang;::LdrEx(const volatile unsigned short&)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LdrExH
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Cortex::LoadLinked&lang;unsigned short&rang;(const volatile T1&)
</UL>

<P><STRONG><a name="[190]"></a>Cortex::ArmExclusive&lang;(unsigned)2&rang;::StrEx(volatile unsigned short&, unsigned short)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, initsdram.o(i._ZN6Cortex12ArmExclusiveILj2EE5StrExERVtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cortex::ArmExclusive&lang;(unsigned)2&rang;::StrEx(volatile unsigned short&, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StrExH
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool Cortex::SaveConditional&lang;unsigned short&rang;(volatile T1&, T1)
</UL>

<P><STRONG><a name="[192]"></a>Cortex::ArmExclusive&lang;(unsigned)4&rang;::LdrEx(const volatile unsigned&)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, initsdram.o(i._ZN6Cortex12ArmExclusiveILj4EE5LdrExERVKj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cortex::ArmExclusive&lang;(unsigned)4&rang;::LdrEx(const volatile unsigned&)
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LdrExW
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Cortex::LoadLinked&lang;unsigned&rang;(const volatile T1&)
</UL>

<P><STRONG><a name="[194]"></a>Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, initsdram.o(i._ZN6Cortex12ArmExclusiveILj4EE5StrExERVjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StrExW
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1)
</UL>

<P><STRONG><a name="[c6]"></a>Cortex::IsPrivileged()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f429_disco_start.o(i._ZN6Cortex12IsPrivilegedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Cortex::IsPrivileged() &rArr; Cortex::IsThreadMode() &rArr; Cortex::GetCurrentIsrNum() &rArr; Cortex::GetIPSR()
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::IsThreadMode()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetCONTROL()
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::Reset()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetPRIMASK()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SetPRIMASK()
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetBASEPRI()
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SetBASEPRI(unsigned)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SetCONTROL(unsigned)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsvTrigger()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetFineTime(unsigned)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsvTrigger_privileged()
</UL>

<P><STRONG><a name="[c7]"></a>Cortex::IsThreadMode()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f429_disco_start.o(i._ZN6Cortex12IsThreadModeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Cortex::IsThreadMode() &rArr; Cortex::GetCurrentIsrNum() &rArr; Cortex::GetIPSR()
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetCurrentIsrNum()
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::IsPrivileged()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[196]"></a>Cortex::GetCurrentIsrNum()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f429_disco_start.o(i._ZN6Cortex16GetCurrentIsrNumEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cortex::GetCurrentIsrNum() &rArr; Cortex::GetIPSR()
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetIPSR()
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::IsThreadMode()
</UL>

<P><STRONG><a name="[158]"></a>Cortex::IsInterruptableBySTK()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stk.o(i._ZN6Cortex20IsInterruptableBySTKEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetSTKPrio()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::IsInterruptable(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetFineTime(unsigned)
</UL>

<P><STRONG><a name="[14a]"></a>Cortex::GetBASEPRI_privileged()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cortex.o(i._ZN6Cortex21GetBASEPRI_privilegedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cortex::GetBASEPRI_privileged()
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_RSR_basepri()
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetMinPrio()
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetBASEPRI()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSVC
</UL>

<P><STRONG><a name="[c8]"></a>Cortex::SetBASEPRI_privileged(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f429_disco_start.o(i._ZN6Cortex21SetBASEPRI_privilegedEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cortex::SetBASEPRI_privileged(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_WSR_basepri(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetMinPrio()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to STM32F429_init_cpp]::LocalInit()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VeryFirstInit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SetBASEPRI(unsigned)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSVC
</UL>

<P><STRONG><a name="[ca]"></a>Cortex::SetCONTROL_privileged(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f429_disco_start.o(i._ZN6Cortex21SetCONTROL_privilegedEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cortex::SetCONTROL_privileged(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_WSR_control(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetMinPrio()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SetCONTROL(unsigned)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSVC
</UL>

<P><STRONG><a name="[1d6]"></a>Cortex::DMB()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, initsdram.o(i._ZN6Cortex3DMBEv))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Cortex::LoadLinked&lang;unsigned short&rang;(const volatile T1&)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Cortex::LoadLinked&lang;unsigned&rang;(const volatile T1&)
</UL>

<P><STRONG><a name="[d4]"></a>Cortex::DSB()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, initsdram.o(i._ZN6Cortex3DSBEv))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool Cortex::SaveConditional&lang;unsigned short&rang;(volatile T1&, T1)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSDRAM()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::FpuDisable()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::FpuEnable()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to STM32F429_init_cpp]::LocalInit()
</UL>

<P><STRONG><a name="[12f]"></a>Cortex::ISB()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f429_init.o(i._ZN6Cortex3ISBEv))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::FpuDisable()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::FpuEnable()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SetPRIMASK_privileged()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::ClrPRIMASK_privileged()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SwitchStack(unsigned*, unsigned)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to STM32F429_init_cpp]::LocalInit()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsvTrigger()
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetPRIMASK_privileged()
</UL>

<P><STRONG><a name="[cd]"></a>Cortex::WFI()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f429_disco_start.o(i._ZN6Cortex3WFIEv))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[197]"></a>Cortex::GetIPSR()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f429_disco_start.o(i._ZN6Cortex7GetIPSREv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cortex::GetIPSR()
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_RSR_ipsr()
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetCurrentIsrNum()
</UL>

<P><STRONG><a name="[18b]"></a>IRdPin::IRdPin__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drvdio.o(i._ZN6IRdPinC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWrPin::IWrPin__sub_object()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdPin::RdPin(volatile __regbank_GPIO&, unsigned)
</UL>

<P><STRONG><a name="[e2]"></a>IWrPin::Clr()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ili9341.o(i._ZN6IWrPin3ClrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWrPin::Clr()
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::SendCommand(unsigned char) const
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::SendData(unsigned char) const
</UL>

<P><STRONG><a name="[18d]"></a>IWrPin::IWrPin__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drvdio.o(i._ZN6IWrPinC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWrPin::IWrPin__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRdPin::IRdPin__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrPin::WrPin(volatile __regbank_GPIO&, unsigned)
</UL>

<P><STRONG><a name="[ea]"></a>Ili9341::Command(unsigned char, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ili9341.o(i._ZN7Ili93417CommandEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Ili9341::Command(unsigned char, unsigned char) &rArr; Ili9341::SendCmd(unsigned char, const unsigned char*, unsigned) const &rArr; Ili9341::SendCommand(unsigned char) const &rArr; IWrPin::Clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::SendCmd(unsigned char, const unsigned char*, unsigned) const
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::Start()
</UL>

<P><STRONG><a name="[e8]"></a>Ili9341::Command(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ili9341.o(i._ZN7Ili93417CommandEhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Ili9341::Command(unsigned char, unsigned char, unsigned char) &rArr; Ili9341::SendCmd(unsigned char, const unsigned char*, unsigned) const &rArr; Ili9341::SendCommand(unsigned char) const &rArr; IWrPin::Clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::SendCmd(unsigned char, const unsigned char*, unsigned) const
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::Start()
</UL>

<P><STRONG><a name="[19b]"></a>PortBase::PortBase(volatile __regbank_GPIO&)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, drvdiog.o(i._ZN8PortBaseC1ERV14__regbank_GPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PortBase::PortBase(volatile __regbank_GPIO&) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDio::IDio__sub_object()
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOG&rang;::Port()
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOF&rang;::Port()
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOD&rang;::Port()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOC&rang;::Port()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOB&rang;::Port()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOA&rang;::Port()
</UL>

<P><STRONG><a name="[224]"></a>PortBase::PortBase__sub_object(volatile __regbank_GPIO&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drvdiog.o(i._ZN8PortBaseC1ERV14__regbank_GPIO), UNUSED)

<P><STRONG><a name="[98]"></a>PortBase::~PortBase()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, drvdio.o(i._ZN8PortBaseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PortBase::~PortBase()
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDio::~IDio__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOG&rang;::~Port()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOF&rang;::~Port()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOD&rang;::~Port()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOC&rang;::~Port()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOB&rang;::~Port()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOA&rang;::~Port()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvdio.o(.constdata__ZTV8PortBase)
</UL>
<P><STRONG><a name="[225]"></a>PortBase::~PortBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, drvdio.o(i._ZN8PortBaseD1Ev), UNUSED)

<P><STRONG><a name="[fb]"></a>Formatter::ResetWidth()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, formatter.o(i._ZN9Formatter10ResetWidthEv))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintTxt(const char*)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintChr(unsigned char)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT64Hex(const unsigned long long&, int, int, bool)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT32Hex(unsigned, int, int, bool)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintSINT64Dec(const long long&, int, int, bool)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintSINT32Dec(int, int, int, bool)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT64Dec(const unsigned long long&, int, int, bool)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT32Dec(unsigned, int, int, bool)
</UL>

<P><STRONG><a name="[19e]"></a>Formatter::PrintUINT32(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, debug.o(i._ZN9Formatter11PrintUINT32Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Formatter::PrintUINT32(unsigned) &rArr; Formatter::PrintUINT32Hex(unsigned) &rArr; Formatter::PrintUINT32Hex(unsigned, int) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::HexFlag() const
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT32Hex(unsigned)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT32Dec(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::Print(unsigned)
</UL>

<P><STRONG><a name="[1b2]"></a>Formatter::SetNumDigits(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, debug.o(i._ZN9Formatter12SetNumDigitsEi))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::Digits::ToString(Formatter&) const
</UL>

<P><STRONG><a name="[1a1]"></a>Formatter::PrintUINT32Dec(unsigned)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, debug.o(i._ZN9Formatter14PrintUINT32DecEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Formatter::PrintUINT32Dec(unsigned) &rArr; Formatter::PrintUINT32Dec(unsigned, int) &rArr; Formatter::PrintUINT32Dec(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValDec(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)10&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)10&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT32Dec(unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT32(unsigned)
</UL>

<P><STRONG><a name="[1a2]"></a>Formatter::PrintUINT32Dec(unsigned, int)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, debug.o(i._ZN9Formatter14PrintUINT32DecEji))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Formatter::PrintUINT32Dec(unsigned, int) &rArr; Formatter::PrintUINT32Dec(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValDec(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)10&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)10&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT32Dec(unsigned, int, int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT32Dec(unsigned)
</UL>

<P><STRONG><a name="[1a0]"></a>Formatter::PrintUINT32Hex(unsigned)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, debug.o(i._ZN9Formatter14PrintUINT32HexEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Formatter::PrintUINT32Hex(unsigned) &rArr; Formatter::PrintUINT32Hex(unsigned, int) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT32Hex(unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT32(unsigned)
</UL>

<P><STRONG><a name="[1a3]"></a>Formatter::PrintUINT32Hex(unsigned, int)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, debug.o(i._ZN9Formatter14PrintUINT32HexEji))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Formatter::PrintUINT32Hex(unsigned, int) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT32Hex(unsigned, int, int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT32Hex(unsigned)
</UL>

<P><STRONG><a name="[109]"></a>Formatter::WriteByteRepeated(unsigned char, int)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, formatter.o(i._ZN9Formatter17WriteByteRepeatedEhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = Formatter::WriteByteRepeated(unsigned char, int) &rArr;  Formatter::WriteByte(unsigned char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::WriteByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintTxt(const char*, int)
</UL>

<P><STRONG><a name="[169]"></a>Formatter::AsTxt::AsTxt(const char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, debug.o(i._ZN9Formatter5AsTxtC1EPKc))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssertionFailed(const char*, const char*, unsigned, const char*)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramAbortion(const char*, const char*, unsigned, const char*)
</UL>

<P><STRONG><a name="[226]"></a>Formatter::AsTxt::AsTxt__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, debug.o(i._ZN9Formatter5AsTxtC1EPKc), UNUSED)

<P><STRONG><a name="[189]"></a>Formatter::ISink::ISink__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, debug.o(i._ZN9Formatter5ISinkC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinkForItm::SinkForItm()
</UL>

<P><STRONG><a name="[9a]"></a>Formatter::ISink::~ISink__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, debug.o(i._ZN9Formatter5ISinkD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinkForItm::~SinkForItm()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug.o(.constdata__ZTVN9Formatter5ISinkE)
</UL>
<P><STRONG><a name="[1a4]"></a>Formatter::Print(const char*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, debug.o(i._ZN9Formatter5PrintEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Formatter::Print(const char*) &rArr; Formatter::PrintTxt(const char*) &rArr; Formatter::PrintTxt(const char*, int) &rArr;  Formatter::WriteByte(unsigned char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintTxt(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)
</UL>

<P><STRONG><a name="[1a5]"></a>Formatter::Print(char)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, debug.o(i._ZN9Formatter5PrintEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Formatter::Print(char) &rArr; Formatter::PrintChr(unsigned char) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintChr(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)
</UL>

<P><STRONG><a name="[1a6]"></a>Formatter::Print(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, debug.o(i._ZN9Formatter5PrintEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Formatter::Print(unsigned) &rArr; Formatter::PrintUINT32(unsigned) &rArr; Formatter::PrintUINT32Hex(unsigned) &rArr; Formatter::PrintUINT32Hex(unsigned, int) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT32(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)
</UL>

<P><STRONG><a name="[110]"></a>Formatter::SetSign(bool)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, formatter.o(i._ZN9Formatter7SetSignEb), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::SetFormat(Formatter::FmtModeType)
</UL>

<P><STRONG><a name="[10c]"></a>Formatter::PrintChr(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, formatter.o(i._ZN9Formatter8PrintChrEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Formatter::PrintChr(unsigned char) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::ResetWidth()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::WriteByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintChrQuoted(unsigned char)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::Print(char)
</UL>

<P><STRONG><a name="[10a]"></a>Formatter::PrintTxt(const char*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, formatter.o(i._ZN9Formatter8PrintTxtEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Formatter::PrintTxt(const char*) &rArr; Formatter::PrintTxt(const char*, int) &rArr;  Formatter::WriteByte(unsigned char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::ResetWidth()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintTxt(const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::WriteByte(unsigned char)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::Print(const char*)
</UL>

<P><STRONG><a name="[111]"></a>Formatter::SetRadix(Formatter::RadixMdType)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, formatter.o(i._ZN9Formatter8SetRadixENS_11RadixMdTypeE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::SetFormat(Formatter::FmtModeType)
</UL>

<P><STRONG><a name="[112]"></a>Formatter::SetPrefix(bool)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, formatter.o(i._ZN9Formatter9SetPrefixEb), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::SetFormat(Formatter::FmtModeType)
</UL>

<P><STRONG><a name="[168]"></a>Formatter::Formatter(Formatter::ISink&)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, debug.o(i._ZN9FormatterC1ERNS_5ISinkE))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItmFmt()
</UL>

<P><STRONG><a name="[227]"></a>Formatter::Formatter__sub_object(Formatter::ISink&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, debug.o(i._ZN9FormatterC1ERNS_5ISinkE), UNUSED)

<P><STRONG><a name="[79]"></a>Formatter::~Formatter()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, debug.o(i._ZN9FormatterD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> debug.o(.text)
<LI> debug.o(.constdata__ZTV9Formatter)
</UL>
<P><STRONG><a name="[228]"></a>Formatter::~Formatter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, debug.o(i._ZN9FormatterD1Ev), UNUSED)

<P><STRONG><a name="[1a7]"></a>Num2Ascii::WriteChars(int, unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, formatter.o(i._ZN9Num2Ascii10WriteCharsEih))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Num2Ascii::WriteChars(int, unsigned char) &rArr; Num2Ascii::WriteChar(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::WriteChar(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned long long, (unsigned)16&rang;(T1, int, int)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned long long, (unsigned)10&rang;(T1, int, int)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned, (unsigned)10&rang;(T1, int, int)
</UL>

<P><STRONG><a name="[1a9]"></a>Num2Ascii::WriteDigit(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, formatter.o(i._ZN9Num2Ascii10WriteDigitEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Num2Ascii::WriteDigit(unsigned char) &rArr; Num2Ascii::WriteChar(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::WriteChar(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned long long, (unsigned)16&rang;(T1, int, int)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned long long, (unsigned)10&rang;(T1, int, int)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned, (unsigned)10&rang;(T1, int, int)
</UL>

<P><STRONG><a name="[1aa]"></a>Num2Ascii::WritePrefix()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, formatter.o(i._ZN9Num2Ascii11WritePrefixEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Num2Ascii::WritePrefix() &rArr; const char*& CheckValue&lang;const char*&&rang;::Verify&lang;Num2Ascii::WritePrefix()::[lambda(const volatile void*) (instance 1)]&rang;(const char*&, T1) &rArr; Num2Ascii::WritePrefix()::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const char*& CheckValue&lang;const char*&&rang;::Verify&lang;Num2Ascii::WritePrefix()::[lambda(const volatile void*) (instance 1)]&rang;(const char*&, T1)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::WriteChar(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned long long, (unsigned)16&rang;(T1, int, int)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned long long, (unsigned)10&rang;(T1, int, int)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned, (unsigned)10&rang;(T1, int, int)
</UL>

<P><STRONG><a name="[18a]"></a>Num2Ascii::ISink::ISink__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, formatter.o(i._ZN9Num2Ascii5ISinkC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinkConverter::SinkConverter(Formatter::ISink&)
</UL>

<P><STRONG><a name="[9b]"></a>Num2Ascii::ISink::~ISink__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, formatter.o(i._ZN9Num2Ascii5ISinkD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinkConverter::~SinkConverter()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formatter.o(.constdata__ZTVN9Num2Ascii5ISinkE)
</UL>
<P><STRONG><a name="[1ad]"></a>Num2Ascii::ResPrefix()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, formatter.o(i._ZN9Num2Ascii9ResPrefixEv))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::SetPrefix(const char*)
</UL>

<P><STRONG><a name="[1ac]"></a>Num2Ascii::SetPrefix(const char*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, formatter.o(i._ZN9Num2Ascii9SetPrefixEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Num2Ascii::SetPrefix(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::ResPrefix()
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::Num2Ascii(Num2Ascii::ISink&, const char*)
</UL>

<P><STRONG><a name="[1a8]"></a>Num2Ascii::WriteChar(unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, formatter.o(i._ZN9Num2Ascii9WriteCharEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Num2Ascii::WriteChar(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::WritePrefix()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::WriteDigit(unsigned char)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::WriteChars(int, unsigned char)
</UL>

<P><STRONG><a name="[11c]"></a>Num2Ascii::Num2Ascii(Num2Ascii::ISink&)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, formatter.o(i._ZN9Num2AsciiC1ERNS_5ISinkE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Num2Ascii::Num2Ascii(Num2Ascii::ISink&) &rArr; Num2Ascii::Num2Ascii(Num2Ascii::ISink&, const char*) &rArr; Num2Ascii::SetPrefix(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::Num2Ascii(Num2Ascii::ISink&, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned long long, (unsigned)10&rang;(Num2Ascii::ISink&, T1, int, int)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)10&rang;(Num2Ascii::ISink&, T1, int, int)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned long long, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int)
</UL>

<P><STRONG><a name="[229]"></a>Num2Ascii::Num2Ascii__sub_object(Num2Ascii::ISink&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, formatter.o(i._ZN9Num2AsciiC1ERNS_5ISinkE), UNUSED)

<P><STRONG><a name="[11a]"></a>Num2Ascii::Num2Ascii(Num2Ascii::ISink&, const char*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, formatter.o(i._ZN9Num2AsciiC1ERNS_5ISinkEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Num2Ascii::Num2Ascii(Num2Ascii::ISink&, const char*) &rArr; Num2Ascii::SetPrefix(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::SetPrefix(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::Num2Ascii(Num2Ascii::ISink&)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)10&rang;(Num2Ascii::ISink&, T1, int, int, const char*)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned long long, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned long long, (unsigned)10&rang;(Num2Ascii::ISink&, T1, int, int, const char*)
</UL>

<P><STRONG><a name="[22a]"></a>Num2Ascii::Num2Ascii__sub_object(Num2Ascii::ISink&, const char*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, formatter.o(i._ZN9Num2AsciiC1ERNS_5ISinkEPKc), UNUSED)

<P><STRONG><a name="[99]"></a>Num2Ascii::~Num2Ascii()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, formatter.o(i._ZN9Num2AsciiD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned long long, (unsigned)10&rang;(Num2Ascii::ISink&, T1, int, int)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)10&rang;(Num2Ascii::ISink&, T1, int, int, const char*)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)10&rang;(Num2Ascii::ISink&, T1, int, int)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned long long, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned long long, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned long long, (unsigned)10&rang;(Num2Ascii::ISink&, T1, int, int, const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> formatter.o(.constdata__ZTV9Num2Ascii)
</UL>
<P><STRONG><a name="[22b]"></a>Num2Ascii::~Num2Ascii__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, formatter.o(i._ZN9Num2AsciiD1Ev), UNUSED)

<P><STRONG><a name="[13e]"></a>PinHelper::WrBit(bool)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drvdio.o(i._ZN9PinHelper5WrBitEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PinHelper::WrBit(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrPin::Set(bool)
</UL>

<P><STRONG><a name="[18c]"></a>PinHelper::PinHelper(volatile __regbank_GPIO&, unsigned, unsigned)</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, drvdio.o(i._ZN9PinHelperC1ERV14__regbank_GPIOjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PinHelper::PinHelper(volatile __regbank_GPIO&, unsigned, unsigned) &rArr; [local to DrvDio_cpp]::WrGpioMDExt(volatile __regbank_GPIO&, unsigned, unsigned, bool, bool) &rArr; T1 Atomic::Bfld&lang;unsigned&rang;(volatile T1&, T1, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Bfld&lang;unsigned&rang;(volatile T1&, T1, T1)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DrvDio_cpp]::WrGpioMDExt(volatile __regbank_GPIO&, unsigned, unsigned, bool, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrPin::WrPin(volatile __regbank_GPIO&, unsigned)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdPin::RdPin(volatile __regbank_GPIO&, unsigned)
</UL>

<P><STRONG><a name="[22c]"></a>PinHelper::PinHelper__sub_object(volatile __regbank_GPIO&, unsigned, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, drvdio.o(i._ZN9PinHelperC1ERV14__regbank_GPIOjj), UNUSED)

<P><STRONG><a name="[ec]"></a>Ili9341::Command(unsigned char) const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ili9341.o(i._ZNK7Ili93417CommandEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Ili9341::Command(unsigned char) const &rArr; Ili9341::SendCmd(unsigned char, const unsigned char*, unsigned) const &rArr; Ili9341::SendCommand(unsigned char) const &rArr; IWrPin::Clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::SendCmd(unsigned char, const unsigned char*, unsigned) const
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::Start()
</UL>

<P><STRONG><a name="[1af]"></a>Formatter::AsTxt::GetTxt() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, debug.o(i._ZNK9Formatter5AsTxt6GetTxtEv))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::AsTxt::ToString(Formatter&) const
</UL>

<P><STRONG><a name="[1ae]"></a>Formatter::AsTxt::ToString(Formatter&) const</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, debug.o(i._ZNK9Formatter5AsTxt8ToStringERS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintTxtQuoted(const char*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintTxt(const char*, int)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::AsTxt::GetTxt() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&)
</UL>

<P><STRONG><a name="[1b1]"></a>Formatter::Digits::GetNum() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, debug.o(i._ZNK9Formatter6Digits6GetNumEv))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::Digits::ToString(Formatter&) const
</UL>

<P><STRONG><a name="[1b0]"></a>Formatter::Digits::ToString(Formatter&) const</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, debug.o(i._ZNK9Formatter6Digits8ToStringERS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Formatter::Digits::ToString(Formatter&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::Digits::GetNum() const
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::SetNumDigits(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void PrintObj&lang;Formatter::Digits&rang;(Formatter&, const T1&)
</UL>

<P><STRONG><a name="[19f]"></a>Formatter::HexFlag() const</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, debug.o(i._ZNK9Formatter7HexFlagEv))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT32(unsigned)
</UL>

<P><STRONG><a name="[1e0]"></a>Num2Ascii::GetLength() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, formatter.o(i._ZNK9Num2Ascii9GetLengthEv))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned long long, (unsigned)16&rang;(T1, int, int)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned long long, (unsigned)10&rang;(T1, int, int)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned, (unsigned)10&rang;(T1, int, int)
</UL>

<P><STRONG><a name="[13c]"></a>PinHelper::RdIdr() const</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drvdio.o(i._ZNK9PinHelper5RdIdrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PinHelper::RdIdr() const
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdPin::Get() const
</UL>

<P><STRONG><a name="[13d]"></a>PinHelper::RdOdr() const</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drvdio.o(i._ZNK9PinHelper5RdOdrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PinHelper::RdOdr() const
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrPin::Get() const
</UL>

<P><STRONG><a name="[178]"></a>std::set_new_handler(void(*)())</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, new_nothrow.o(i._ZSt15set_new_handlerPFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::set_new_handler(void(*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Initialize_cpp]::LocalInit()
</UL>

<P><STRONG><a name="[136]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = operator delete (void*) &rArr; free &rArr; _mutex_release &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDio::~IDio__deallocating()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWrPin::~IWrPin__deallocating()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRdPin::~IRdPin__deallocating()
</UL>

<P><STRONG><a name="[139]"></a>operator new(unsigned, void*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drvdio.o(i._ZnwjPv))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortBase::CreateWrPin(unsigned)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortBase::CreateRdPin(unsigned)
</UL>

<P><STRONG><a name="[185]"></a>__Heap_Initialize</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, heap2mt.o(i.___Heap_Initialize$realtime$concurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[181]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, heap2mt.o(i.___Heap_ProvideMemory$realtime$concurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __Heap_ProvideMemory &rArr; _FDTree_Insert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FDTree_Insert
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FDTree_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[22d]"></a>__use_realtime_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fdtree.o(i.__use_realtime_heap), UNUSED)

<P><STRONG><a name="[1b4]"></a>free</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, heap2mt.o(i._free$realtime$concurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = free &rArr; _mutex_release &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FDTree_Insert
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FDTree_Delete
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>

<P><STRONG><a name="[17c]"></a>malloc</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, heap2mt.o(i._malloc$realtime$concurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = malloc &rArr; _mutex_release &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FDTree_RemoveNode
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FDTree_Insert
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FDTree_FindFirst
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[d2]"></a>void EnableAF&lang;(unsigned)11&rang;(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char(&)[T1])</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, initsdram.o(t._Z8EnableAFILj11EEvRV14__regbank_GPIOjjbRAT__Kh))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = void EnableAF&lang;(unsigned)11&rang;(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char(&)[T1]) &rArr; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char*, unsigned) &rArr; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned) &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSDRAM()
</UL>

<P><STRONG><a name="[f1]"></a>void EnableAF&lang;(unsigned)2&rang;(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char(&)[T1])</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, drvltdc.o(t._Z8EnableAFILj2EEvRV14__regbank_GPIOjjbRAT__Kh))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = void EnableAF&lang;(unsigned)2&rang;(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char(&)[T1]) &rArr; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char*, unsigned) &rArr; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned) &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILtdc::setPins() const
</UL>

<P><STRONG><a name="[f2]"></a>void EnableAF&lang;(unsigned)3&rang;(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char(&)[T1])</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, drvltdc.o(t._Z8EnableAFILj3EEvRV14__regbank_GPIOjjbRAT__Kh))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = void EnableAF&lang;(unsigned)3&rang;(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char(&)[T1]) &rArr; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char*, unsigned) &rArr; EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned) &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILtdc::setPins() const
</UL>

<P><STRONG><a name="[16a]"></a>void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...)</STRONG> (Thumb, 58 bytes, Stack size 64 bytes, debug.o(t._Z8ItmPrintIJA5_cPKccN9Formatter6DigitsEjA3_cS2_cNS3_5AsTxtEEEvDpRKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackCheck()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItmFmt()
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssertionFailed(const char*, const char*, unsigned, const char*)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramAbortion(const char*, const char*, unsigned, const char*)
</UL>

<P><STRONG><a name="[1ba]"></a>void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, debug.o(t._Z8PrintObjIN9Formatter5AsTxtEEvRS0_RKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::AsTxt::ToString(Formatter&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&)
</UL>

<P><STRONG><a name="[1bb]"></a>void PrintObj&lang;Formatter::Digits&rang;(Formatter&, const T1&)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, debug.o(t._Z8PrintObjIN9Formatter6DigitsEEvRS0_RKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = void PrintObj&lang;Formatter::Digits&rang;(Formatter&, const T1&) &rArr; Formatter::Digits::ToString(Formatter&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::Digits::ToString(Formatter&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Formatter::Print&lang;Formatter::Digits&rang;(const T1&)
</UL>

<P><STRONG><a name="[10e]"></a>const char*& CheckValue&lang;const char*&&rang;::Verify&lang;Formatter::PrintTxtQuoted(const char*)::[lambda(const volatile void*) (instance 1)]&rang;(const char*&, T1)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, formatter.o(t._ZN10CheckValueIRPKcE6VerifyIZN9Formatter14PrintTxtQuotedES1_EUlPVKvE_EES2_S2_T_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = const char*& CheckValue&lang;const char*&&rang;::Verify&lang;Formatter::PrintTxtQuoted(const char*)::[lambda(const volatile void*) (instance 1)]&rang;(const char*&, T1) &rArr; Formatter::PrintTxtQuoted(const char*)::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintTxtQuoted(const char*)::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintTxtQuoted(const char*)
</UL>

<P><STRONG><a name="[108]"></a>const char*& CheckValue&lang;const char*&&rang;::Verify&lang;Formatter::PrintTxt(const char*, int)::[lambda(const volatile void*) (instance 1)]&rang;(const char*&, T1)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, formatter.o(t._ZN10CheckValueIRPKcE6VerifyIZN9Formatter8PrintTxtES1_iEUlPVKvE_EES2_S2_T_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = const char*& CheckValue&lang;const char*&&rang;::Verify&lang;Formatter::PrintTxt(const char*, int)::[lambda(const volatile void*) (instance 1)]&rang;(const char*&, T1) &rArr; Formatter::PrintTxt(const char*, int)::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintTxt(const char*, int)::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintTxt(const char*, int)
</UL>

<P><STRONG><a name="[1ab]"></a>const char*& CheckValue&lang;const char*&&rang;::Verify&lang;Num2Ascii::WritePrefix()::[lambda(const volatile void*) (instance 1)]&rang;(const char*&, T1)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, formatter.o(t._ZN10CheckValueIRPKcE6VerifyIZN9Num2Ascii11WritePrefixEvEUlPVKvE_EES2_S2_T_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = const char*& CheckValue&lang;const char*&&rang;::Verify&lang;Num2Ascii::WritePrefix()::[lambda(const volatile void*) (instance 1)]&rang;(const char*&, T1) &rArr; Num2Ascii::WritePrefix()::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::WritePrefix()::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::WritePrefix()
</UL>

<P><STRONG><a name="[1bc]"></a>InstanceWrapper&lang;Port&lang;rbGPIOA&rang;&rang;::InstanceWrapper()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIOAEEEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = InstanceWrapper&lang;Port&lang;rbGPIOA&rang;&rang;::InstanceWrapper() &rArr; Port&lang;rbGPIOA&rang;::Port() &rArr; AHBClockEnable(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItmPutS(const char*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackCheck()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOA&rang;::Port()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOA&rang;&rang;::Create()
</UL>

<P><STRONG><a name="[22e]"></a>InstanceWrapper&lang;Port&lang;rbGPIOA&rang;&rang;::InstanceWrapper__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIOAEEEC1Ev), UNUSED)

<P><STRONG><a name="[7d]"></a>InstanceWrapper&lang;Port&lang;rbGPIOA&rang;&rang;::~InstanceWrapper()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIOAEEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InstanceWrapper&lang;Port&lang;rbGPIOA&rang;&rang;::~InstanceWrapper() &rArr; Port&lang;rbGPIOA&rang;::~Port() &rArr; PortBase::~PortBase()
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOA&rang;::~Port()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIOAEEE6CreateEv)
</UL>
<P><STRONG><a name="[22f]"></a>InstanceWrapper&lang;Port&lang;rbGPIOA&rang;&rang;::~InstanceWrapper__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIOAEEED1Ev), UNUSED)

<P><STRONG><a name="[1be]"></a>InstanceWrapper&lang;Port&lang;rbGPIOB&rang;&rang;::InstanceWrapper()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIOBEEEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = InstanceWrapper&lang;Port&lang;rbGPIOB&rang;&rang;::InstanceWrapper() &rArr; Port&lang;rbGPIOB&rang;::Port() &rArr; AHBClockEnable(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItmPutS(const char*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackCheck()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOB&rang;::Port()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOB&rang;&rang;::Create()
</UL>

<P><STRONG><a name="[230]"></a>InstanceWrapper&lang;Port&lang;rbGPIOB&rang;&rang;::InstanceWrapper__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIOBEEEC1Ev), UNUSED)

<P><STRONG><a name="[7e]"></a>InstanceWrapper&lang;Port&lang;rbGPIOB&rang;&rang;::~InstanceWrapper()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIOBEEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InstanceWrapper&lang;Port&lang;rbGPIOB&rang;&rang;::~InstanceWrapper() &rArr; Port&lang;rbGPIOB&rang;::~Port() &rArr; PortBase::~PortBase()
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOB&rang;::~Port()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIOBEEE6CreateEv)
</UL>
<P><STRONG><a name="[231]"></a>InstanceWrapper&lang;Port&lang;rbGPIOB&rang;&rang;::~InstanceWrapper__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIOBEEED1Ev), UNUSED)

<P><STRONG><a name="[1c0]"></a>InstanceWrapper&lang;Port&lang;rbGPIOC&rang;&rang;::InstanceWrapper()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIOCEEEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = InstanceWrapper&lang;Port&lang;rbGPIOC&rang;&rang;::InstanceWrapper() &rArr; Port&lang;rbGPIOC&rang;::Port() &rArr; AHBClockEnable(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItmPutS(const char*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackCheck()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOC&rang;::Port()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOC&rang;&rang;::Create()
</UL>

<P><STRONG><a name="[232]"></a>InstanceWrapper&lang;Port&lang;rbGPIOC&rang;&rang;::InstanceWrapper__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIOCEEEC1Ev), UNUSED)

<P><STRONG><a name="[7f]"></a>InstanceWrapper&lang;Port&lang;rbGPIOC&rang;&rang;::~InstanceWrapper()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIOCEEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InstanceWrapper&lang;Port&lang;rbGPIOC&rang;&rang;::~InstanceWrapper() &rArr; Port&lang;rbGPIOC&rang;::~Port() &rArr; PortBase::~PortBase()
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOC&rang;::~Port()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIOCEEE6CreateEv)
</UL>
<P><STRONG><a name="[233]"></a>InstanceWrapper&lang;Port&lang;rbGPIOC&rang;&rang;::~InstanceWrapper__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIOCEEED1Ev), UNUSED)

<P><STRONG><a name="[1c2]"></a>InstanceWrapper&lang;Port&lang;rbGPIOD&rang;&rang;::InstanceWrapper()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIODEEEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = InstanceWrapper&lang;Port&lang;rbGPIOD&rang;&rang;::InstanceWrapper() &rArr; Port&lang;rbGPIOD&rang;::Port() &rArr; AHBClockEnable(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItmPutS(const char*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackCheck()
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOD&rang;::Port()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOD&rang;&rang;::Create()
</UL>

<P><STRONG><a name="[234]"></a>InstanceWrapper&lang;Port&lang;rbGPIOD&rang;&rang;::InstanceWrapper__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIODEEEC1Ev), UNUSED)

<P><STRONG><a name="[80]"></a>InstanceWrapper&lang;Port&lang;rbGPIOD&rang;&rang;::~InstanceWrapper()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIODEEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InstanceWrapper&lang;Port&lang;rbGPIOD&rang;&rang;::~InstanceWrapper() &rArr; Port&lang;rbGPIOD&rang;::~Port() &rArr; PortBase::~PortBase()
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOD&rang;::~Port()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIODEEE6CreateEv)
</UL>
<P><STRONG><a name="[235]"></a>InstanceWrapper&lang;Port&lang;rbGPIOD&rang;&rang;::~InstanceWrapper__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIODEEED1Ev), UNUSED)

<P><STRONG><a name="[1c4]"></a>InstanceWrapper&lang;Port&lang;rbGPIOF&rang;&rang;::InstanceWrapper()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIOFEEEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = InstanceWrapper&lang;Port&lang;rbGPIOF&rang;&rang;::InstanceWrapper() &rArr; Port&lang;rbGPIOF&rang;::Port() &rArr; AHBClockEnable(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItmPutS(const char*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackCheck()
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOF&rang;::Port()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOF&rang;&rang;::Create()
</UL>

<P><STRONG><a name="[236]"></a>InstanceWrapper&lang;Port&lang;rbGPIOF&rang;&rang;::InstanceWrapper__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIOFEEEC1Ev), UNUSED)

<P><STRONG><a name="[81]"></a>InstanceWrapper&lang;Port&lang;rbGPIOF&rang;&rang;::~InstanceWrapper()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIOFEEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InstanceWrapper&lang;Port&lang;rbGPIOF&rang;&rang;::~InstanceWrapper() &rArr; Port&lang;rbGPIOF&rang;::~Port() &rArr; PortBase::~PortBase()
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOF&rang;::~Port()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIOFEEE6CreateEv)
</UL>
<P><STRONG><a name="[237]"></a>InstanceWrapper&lang;Port&lang;rbGPIOF&rang;&rang;::~InstanceWrapper__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIOFEEED1Ev), UNUSED)

<P><STRONG><a name="[1c6]"></a>InstanceWrapper&lang;Port&lang;rbGPIOG&rang;&rang;::InstanceWrapper()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIOGEEEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = InstanceWrapper&lang;Port&lang;rbGPIOG&rang;&rang;::InstanceWrapper() &rArr; Port&lang;rbGPIOG&rang;::Port() &rArr; AHBClockEnable(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItmPutS(const char*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackCheck()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOG&rang;::Port()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOG&rang;&rang;::Create()
</UL>

<P><STRONG><a name="[238]"></a>InstanceWrapper&lang;Port&lang;rbGPIOG&rang;&rang;::InstanceWrapper__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIOGEEEC1Ev), UNUSED)

<P><STRONG><a name="[82]"></a>InstanceWrapper&lang;Port&lang;rbGPIOG&rang;&rang;::~InstanceWrapper()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIOGEEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InstanceWrapper&lang;Port&lang;rbGPIOG&rang;&rang;::~InstanceWrapper() &rArr; Port&lang;rbGPIOG&rang;::~Port() &rArr; PortBase::~PortBase()
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port&lang;rbGPIOG&rang;::~Port()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIOGEEE6CreateEv)
</UL>
<P><STRONG><a name="[239]"></a>InstanceWrapper&lang;Port&lang;rbGPIOG&rang;&rang;::~InstanceWrapper__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, drvdiog.o(t._ZN15InstanceWrapperI4PortIL_Z7rbGPIOGEEED1Ev), UNUSED)

<P><STRONG><a name="[1bd]"></a>Port&lang;rbGPIOA&rang;::Port()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drvdiog.o(t._ZN4PortIL_Z7rbGPIOAEEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Port&lang;rbGPIOA&rang;::Port() &rArr; AHBClockEnable(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHBClockEnable(unsigned)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortBase::PortBase(volatile __regbank_GPIO&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOA&rang;&rang;::InstanceWrapper()
</UL>

<P><STRONG><a name="[23a]"></a>Port&lang;rbGPIOA&rang;::Port__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, drvdiog.o(t._ZN4PortIL_Z7rbGPIOAEEC1Ev), UNUSED)

<P><STRONG><a name="[89]"></a>Port&lang;rbGPIOA&rang;::~Port()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drvdiog.o(t._ZN4PortIL_Z7rbGPIOAEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Port&lang;rbGPIOA&rang;::~Port() &rArr; PortBase::~PortBase()
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortBase::~PortBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOA&rang;&rang;::~InstanceWrapper()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOAEE)
</UL>
<P><STRONG><a name="[23b]"></a>Port&lang;rbGPIOA&rang;::~Port__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, drvdiog.o(t._ZN4PortIL_Z7rbGPIOAEED1Ev), UNUSED)

<P><STRONG><a name="[1bf]"></a>Port&lang;rbGPIOB&rang;::Port()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drvdiog.o(t._ZN4PortIL_Z7rbGPIOBEEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Port&lang;rbGPIOB&rang;::Port() &rArr; AHBClockEnable(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHBClockEnable(unsigned)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortBase::PortBase(volatile __regbank_GPIO&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOB&rang;&rang;::InstanceWrapper()
</UL>

<P><STRONG><a name="[23c]"></a>Port&lang;rbGPIOB&rang;::Port__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, drvdiog.o(t._ZN4PortIL_Z7rbGPIOBEEC1Ev), UNUSED)

<P><STRONG><a name="[8c]"></a>Port&lang;rbGPIOB&rang;::~Port()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drvdiog.o(t._ZN4PortIL_Z7rbGPIOBEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Port&lang;rbGPIOB&rang;::~Port() &rArr; PortBase::~PortBase()
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortBase::~PortBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOB&rang;&rang;::~InstanceWrapper()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOBEE)
</UL>
<P><STRONG><a name="[23d]"></a>Port&lang;rbGPIOB&rang;::~Port__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, drvdiog.o(t._ZN4PortIL_Z7rbGPIOBEED1Ev), UNUSED)

<P><STRONG><a name="[1c1]"></a>Port&lang;rbGPIOC&rang;::Port()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drvdiog.o(t._ZN4PortIL_Z7rbGPIOCEEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Port&lang;rbGPIOC&rang;::Port() &rArr; AHBClockEnable(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHBClockEnable(unsigned)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortBase::PortBase(volatile __regbank_GPIO&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOC&rang;&rang;::InstanceWrapper()
</UL>

<P><STRONG><a name="[23e]"></a>Port&lang;rbGPIOC&rang;::Port__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, drvdiog.o(t._ZN4PortIL_Z7rbGPIOCEEC1Ev), UNUSED)

<P><STRONG><a name="[8d]"></a>Port&lang;rbGPIOC&rang;::~Port()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drvdiog.o(t._ZN4PortIL_Z7rbGPIOCEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Port&lang;rbGPIOC&rang;::~Port() &rArr; PortBase::~PortBase()
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortBase::~PortBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOC&rang;&rang;::~InstanceWrapper()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOCEE)
</UL>
<P><STRONG><a name="[23f]"></a>Port&lang;rbGPIOC&rang;::~Port__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, drvdiog.o(t._ZN4PortIL_Z7rbGPIOCEED1Ev), UNUSED)

<P><STRONG><a name="[1c3]"></a>Port&lang;rbGPIOD&rang;::Port()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drvdiog.o(t._ZN4PortIL_Z7rbGPIODEEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Port&lang;rbGPIOD&rang;::Port() &rArr; AHBClockEnable(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHBClockEnable(unsigned)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortBase::PortBase(volatile __regbank_GPIO&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOD&rang;&rang;::InstanceWrapper()
</UL>

<P><STRONG><a name="[240]"></a>Port&lang;rbGPIOD&rang;::Port__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, drvdiog.o(t._ZN4PortIL_Z7rbGPIODEEC1Ev), UNUSED)

<P><STRONG><a name="[8e]"></a>Port&lang;rbGPIOD&rang;::~Port()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drvdiog.o(t._ZN4PortIL_Z7rbGPIODEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Port&lang;rbGPIOD&rang;::~Port() &rArr; PortBase::~PortBase()
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortBase::~PortBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOD&rang;&rang;::~InstanceWrapper()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIODEE)
</UL>
<P><STRONG><a name="[241]"></a>Port&lang;rbGPIOD&rang;::~Port__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, drvdiog.o(t._ZN4PortIL_Z7rbGPIODEED1Ev), UNUSED)

<P><STRONG><a name="[1c5]"></a>Port&lang;rbGPIOF&rang;::Port()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drvdiog.o(t._ZN4PortIL_Z7rbGPIOFEEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Port&lang;rbGPIOF&rang;::Port() &rArr; AHBClockEnable(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHBClockEnable(unsigned)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortBase::PortBase(volatile __regbank_GPIO&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOF&rang;&rang;::InstanceWrapper()
</UL>

<P><STRONG><a name="[242]"></a>Port&lang;rbGPIOF&rang;::Port__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, drvdiog.o(t._ZN4PortIL_Z7rbGPIOFEEC1Ev), UNUSED)

<P><STRONG><a name="[8f]"></a>Port&lang;rbGPIOF&rang;::~Port()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drvdiog.o(t._ZN4PortIL_Z7rbGPIOFEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Port&lang;rbGPIOF&rang;::~Port() &rArr; PortBase::~PortBase()
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortBase::~PortBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOF&rang;&rang;::~InstanceWrapper()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOFEE)
</UL>
<P><STRONG><a name="[243]"></a>Port&lang;rbGPIOF&rang;::~Port__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, drvdiog.o(t._ZN4PortIL_Z7rbGPIOFEED1Ev), UNUSED)

<P><STRONG><a name="[1c7]"></a>Port&lang;rbGPIOG&rang;::Port()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drvdiog.o(t._ZN4PortIL_Z7rbGPIOGEEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Port&lang;rbGPIOG&rang;::Port() &rArr; AHBClockEnable(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHBClockEnable(unsigned)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortBase::PortBase(volatile __regbank_GPIO&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOG&rang;&rang;::InstanceWrapper()
</UL>

<P><STRONG><a name="[244]"></a>Port&lang;rbGPIOG&rang;::Port__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, drvdiog.o(t._ZN4PortIL_Z7rbGPIOGEEC1Ev), UNUSED)

<P><STRONG><a name="[90]"></a>Port&lang;rbGPIOG&rang;::~Port()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drvdiog.o(t._ZN4PortIL_Z7rbGPIOGEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Port&lang;rbGPIOG&rang;::~Port() &rArr; PortBase::~PortBase()
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortBase::~PortBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOG&rang;&rang;::~InstanceWrapper()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvdiog.o(.constdata__ZTV4PortIL_Z7rbGPIOGEE)
</UL>
<P><STRONG><a name="[245]"></a>Port&lang;rbGPIOG&rang;::~Port__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, drvdiog.o(t._ZN4PortIL_Z7rbGPIOGEED1Ev), UNUSED)

<P><STRONG><a name="[1c8]"></a>T1 Atomic::Add&lang;unsigned&rang;(volatile T1&, T1)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stk.o(t._ZN6Atomic3AddIjEET_RVS1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = T1 Atomic::Add&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)1&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)1&rang;(volatile T1&, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Incr&lang;unsigned&rang;(volatile T1&)
</UL>

<P><STRONG><a name="[1ca]"></a>T1 Atomic::And&lang;unsigned short&rang;(volatile T1&, T1)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, initsdram.o(t._ZN6Atomic3AndItEET_RVS1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = T1 Atomic::And&lang;unsigned short&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned short, (Atomic::BinOpType)4&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned short&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)2&rang;::StrEx(volatile unsigned short&, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Modify&lang;unsigned short, (Atomic::BinOpType)4&rang;(volatile T1&, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Bic&lang;unsigned short&rang;(volatile T1&, T1)
</UL>

<P><STRONG><a name="[188]"></a>T1 Atomic::Bic&lang;unsigned short&rang;(volatile T1&, T1)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, initsdram.o(t._ZN6Atomic3BicItEET_RVS1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = T1 Atomic::Bic&lang;unsigned short&rang;(volatile T1&, T1) &rArr; T1 Atomic::And&lang;unsigned short&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned short, (Atomic::BinOpType)4&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned short&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)2&rang;::StrEx(volatile unsigned short&, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::And&lang;unsigned short&rang;(volatile T1&, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)
</UL>

<P><STRONG><a name="[186]"></a>T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, initsdram.o(t._ZN6Atomic3OrrIjEET_RVS1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APBClockEnable(unsigned)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHB1ClockEnableByMask(unsigned)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHBClockEnable(unsigned)
</UL>

<P><STRONG><a name="[187]"></a>T1 Atomic::Orr&lang;unsigned short&rang;(volatile T1&, T1)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, initsdram.o(t._ZN6Atomic3OrrItEET_RVS1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = T1 Atomic::Orr&lang;unsigned short&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned short, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned short&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)2&rang;::StrEx(volatile unsigned short&, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Modify&lang;unsigned short, (Atomic::BinOpType)5&rang;(volatile T1&, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)
</UL>

<P><STRONG><a name="[df]"></a>T1 Atomic::Bfld&lang;unsigned&rang;(volatile T1&, T1, T1)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, initsdram.o(t._ZN6Atomic4BfldIjEET_RVS1_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = T1 Atomic::Bfld&lang;unsigned&rang;(volatile T1&, T1, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Cortex::LoadLinked&lang;unsigned&rang;(const volatile T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrGpioSP(volatile __regbank_GPIO&, unsigned, unsigned)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrGpioMD(volatile __regbank_GPIO&, unsigned, unsigned)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableAF(volatile __regbank_GPIO&, unsigned, unsigned, bool, unsigned)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::Ili9341()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinHelper::PinHelper(volatile __regbank_GPIO&, unsigned, unsigned)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DrvDio_cpp]::WrGpioMDExt(volatile __regbank_GPIO&, unsigned, unsigned, bool, bool)
</UL>

<P><STRONG><a name="[156]"></a>T1 Atomic::Incr&lang;unsigned&rang;(volatile T1&)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stk.o(t._ZN6Atomic4IncrIjEET_RVS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = T1 Atomic::Incr&lang;unsigned&rang;(volatile T1&) &rArr; T1 Atomic::Add&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)1&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Add&lang;unsigned&rang;(volatile T1&, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_STK
</UL>

<P><STRONG><a name="[1d0]"></a>Atomic::BinOp&lang;unsigned, (Atomic::BinOpType)1&rang;::Calc(unsigned, unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stk.o(t._ZN6Atomic5BinOpIjLNS_9BinOpTypeE1EE4CalcEjj))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)1&rang;(volatile T1&, T1)
</UL>

<P><STRONG><a name="[1d1]"></a>Atomic::BinOp&lang;unsigned, (Atomic::BinOpType)5&rang;::Calc(unsigned, unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, initsdram.o(t._ZN6Atomic5BinOpIjLNS_9BinOpTypeE5EE4CalcEjj))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1)
</UL>

<P><STRONG><a name="[1d3]"></a>Atomic::BinOp&lang;unsigned short, (Atomic::BinOpType)4&rang;::Calc(unsigned short, unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, initsdram.o(t._ZN6Atomic5BinOpItLNS_9BinOpTypeE4EE4CalcEtt))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Modify&lang;unsigned short, (Atomic::BinOpType)4&rang;(volatile T1&, T1)
</UL>

<P><STRONG><a name="[1d5]"></a>Atomic::BinOp&lang;unsigned short, (Atomic::BinOpType)5&rang;::Calc(unsigned short, unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, initsdram.o(t._ZN6Atomic5BinOpItLNS_9BinOpTypeE5EE4CalcEtt))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Modify&lang;unsigned short, (Atomic::BinOpType)5&rang;(volatile T1&, T1)
</UL>

<P><STRONG><a name="[1c9]"></a>T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)1&rang;(volatile T1&, T1)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, stk.o(t._ZN6Atomic6ModifyIjLNS_9BinOpTypeE1EEET_RVS2_S2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)1&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Cortex::LoadLinked&lang;unsigned&rang;(const volatile T1&)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atomic::BinOp&lang;unsigned, (Atomic::BinOpType)1&rang;::Calc(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Add&lang;unsigned&rang;(volatile T1&, T1)
</UL>

<P><STRONG><a name="[1cc]"></a>T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, initsdram.o(t._ZN6Atomic6ModifyIjLNS_9BinOpTypeE5EEET_RVS2_S2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Cortex::LoadLinked&lang;unsigned&rang;(const volatile T1&)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atomic::BinOp&lang;unsigned, (Atomic::BinOpType)5&rang;::Calc(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1)
</UL>

<P><STRONG><a name="[1cb]"></a>T1 Atomic::Modify&lang;unsigned short, (Atomic::BinOpType)4&rang;(volatile T1&, T1)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, initsdram.o(t._ZN6Atomic6ModifyItLNS_9BinOpTypeE4EEET_RVS2_S2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = T1 Atomic::Modify&lang;unsigned short, (Atomic::BinOpType)4&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned short&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)2&rang;::StrEx(volatile unsigned short&, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool Cortex::SaveConditional&lang;unsigned short&rang;(volatile T1&, T1)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Cortex::LoadLinked&lang;unsigned short&rang;(const volatile T1&)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atomic::BinOp&lang;unsigned short, (Atomic::BinOpType)4&rang;::Calc(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::And&lang;unsigned short&rang;(volatile T1&, T1)
</UL>

<P><STRONG><a name="[1cd]"></a>T1 Atomic::Modify&lang;unsigned short, (Atomic::BinOpType)5&rang;(volatile T1&, T1)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, initsdram.o(t._ZN6Atomic6ModifyItLNS_9BinOpTypeE5EEET_RVS2_S2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = T1 Atomic::Modify&lang;unsigned short, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned short&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)2&rang;::StrEx(volatile unsigned short&, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool Cortex::SaveConditional&lang;unsigned short&rang;(volatile T1&, T1)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Cortex::LoadLinked&lang;unsigned short&rang;(const volatile T1&)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atomic::BinOp&lang;unsigned short, (Atomic::BinOpType)5&rang;::Calc(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Orr&lang;unsigned short&rang;(volatile T1&, T1)
</UL>

<P><STRONG><a name="[1ce]"></a>T1 Cortex::LoadLinked&lang;unsigned&rang;(const volatile T1&)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, initsdram.o(t._ZN6Cortex10LoadLinkedIjEET_RVKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = T1 Cortex::LoadLinked&lang;unsigned&rang;(const volatile T1&) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::LdrEx(const volatile unsigned&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::DMB()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::ArmExclusive&lang;(unsigned)4&rang;::LdrEx(const volatile unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Bfld&lang;unsigned&rang;(volatile T1&, T1, T1)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)1&rang;(volatile T1&, T1)
</UL>

<P><STRONG><a name="[1d2]"></a>T1 Cortex::LoadLinked&lang;unsigned short&rang;(const volatile T1&)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, initsdram.o(t._ZN6Cortex10LoadLinkedItEET_RVKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = T1 Cortex::LoadLinked&lang;unsigned short&rang;(const volatile T1&) &rArr; Cortex::ArmExclusive&lang;(unsigned)2&rang;::LdrEx(const volatile unsigned short&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::DMB()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::ArmExclusive&lang;(unsigned)2&rang;::LdrEx(const volatile unsigned short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Modify&lang;unsigned short, (Atomic::BinOpType)5&rang;(volatile T1&, T1)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Modify&lang;unsigned short, (Atomic::BinOpType)4&rang;(volatile T1&, T1)
</UL>

<P><STRONG><a name="[130]"></a>void Cortex::SwitchStack&lang;(unsigned)4096&rang;(unsigned(&)[T1])</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f429_init.o(t._ZN6Cortex11SwitchStackILj4096EEEvRAT__j))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = void Cortex::SwitchStack&lang;(unsigned)4096&rang;(unsigned(&)[T1]) &rArr; Cortex::SwitchStack(unsigned*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SwitchStack(unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to STM32F429_init_cpp]::LocalInit()
</UL>

<P><STRONG><a name="[1cf]"></a>bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, initsdram.o(t._ZN6Cortex15SaveConditionalIjEEbRVT_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::DSB()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Bfld&lang;unsigned&rang;(volatile T1&, T1, T1)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)1&rang;(volatile T1&, T1)
</UL>

<P><STRONG><a name="[1d4]"></a>bool Cortex::SaveConditional&lang;unsigned short&rang;(volatile T1&, T1)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, initsdram.o(t._ZN6Cortex15SaveConditionalItEEbRVT_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bool Cortex::SaveConditional&lang;unsigned short&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)2&rang;::StrEx(volatile unsigned short&, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::DSB()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::ArmExclusive&lang;(unsigned)2&rang;::StrEx(volatile unsigned short&, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Modify&lang;unsigned short, (Atomic::BinOpType)5&rang;(volatile T1&, T1)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Modify&lang;unsigned short, (Atomic::BinOpType)4&rang;(volatile T1&, T1)
</UL>

<P><STRONG><a name="[138]"></a>MemPool&lang;(unsigned)12, (unsigned)16&rang;::Alloc()</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, drvdio.o(t._ZN7MemPoolILj12ELj16EE5AllocEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = MemPool&lang;(unsigned)12, (unsigned)16&rang;::Alloc() &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssertionFailed(const char*, const char*, unsigned, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortBase::CreateWrPin(unsigned)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortBase::CreateRdPin(unsigned)
</UL>

<P><STRONG><a name="[137]"></a>MemPool&lang;(unsigned)12, (unsigned)16&rang;::MemPool()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drvdio.o(t._ZN7MemPoolILj12ELj16EEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortBase::CreateWrPin(unsigned)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortBase::CreateRdPin(unsigned)
</UL>

<P><STRONG><a name="[246]"></a>MemPool&lang;(unsigned)12, (unsigned)16&rang;::MemPool__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, drvdio.o(t._ZN7MemPoolILj12ELj16EEC1Ev), UNUSED)

<P><STRONG><a name="[1d7]"></a>void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, debug.o(t._ZN9Formatter5PrintIA3_cJPKccNS_5AsTxtEEEEvRKT_DpRKT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::Print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)
</UL>

<P><STRONG><a name="[1b9]"></a>void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)</STRONG> (Thumb, 56 bytes, Stack size 56 bytes, debug.o(t._ZN9Formatter5PrintIA5_cJPKccNS_6DigitsEjA3_cS3_cNS_5AsTxtEEEEvRKT_DpRKT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::Print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...)
</UL>

<P><STRONG><a name="[1da]"></a>void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, debug.o(t._ZN9Formatter5PrintINS_5AsTxtEEEvRKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)
</UL>

<P><STRONG><a name="[1db]"></a>void Formatter::Print&lang;Formatter::Digits&rang;(const T1&)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, debug.o(t._ZN9Formatter5PrintINS_6DigitsEEEvRKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = void Formatter::Print&lang;Formatter::Digits&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::Digits&rang;(Formatter&, const T1&) &rArr; Formatter::Digits::ToString(Formatter&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void PrintObj&lang;Formatter::Digits&rang;(Formatter&, const T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)
</UL>

<P><STRONG><a name="[1dc]"></a>void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, debug.o(t._ZN9Formatter5PrintINS_6DigitsEJjA3_cPKccNS_5AsTxtEEEEvRKT_DpRKT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Formatter::Print&lang;Formatter::Digits&rang;(const T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)
</UL>

<P><STRONG><a name="[1d8]"></a>void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, debug.o(t._ZN9Formatter5PrintIPKcJcNS_5AsTxtEEEEvRKT_DpRKT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::Print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)
</UL>

<P><STRONG><a name="[1d9]"></a>void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)</STRONG> (Thumb, 48 bytes, Stack size 56 bytes, debug.o(t._ZN9Formatter5PrintIPKcJcNS_6DigitsEjA3_cS2_cNS_5AsTxtEEEEvRKT_DpRKT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::Print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)
</UL>

<P><STRONG><a name="[1de]"></a>void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, debug.o(t._ZN9Formatter5PrintIcJNS_5AsTxtEEEEvRKT_DpRKT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::Print(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)
</UL>

<P><STRONG><a name="[1df]"></a>void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, debug.o(t._ZN9Formatter5PrintIcJNS_6DigitsEjA3_cPKccNS_5AsTxtEEEEvRKT_DpRKT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::Print(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)
</UL>

<P><STRONG><a name="[1dd]"></a>void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, debug.o(t._ZN9Formatter5PrintIjJA3_cPKccNS_5AsTxtEEEEvRKT_DpRKT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::Print(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...)
</UL>

<P><STRONG><a name="[11f]"></a>unsigned Num2Ascii::Format&lang;unsigned, (unsigned)10&rang;(T1, int, int)</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, formatter.o(t._ZN9Num2Ascii6FormatIjLj10EEEjT_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = unsigned Num2Ascii::Format&lang;unsigned, (unsigned)10&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssertionFailed(const char*, const char*, unsigned, const char*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackCheck()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned, (unsigned)10&rang;(T1, int, int)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::GetLength() const
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::WritePrefix()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::WriteDigit(unsigned char)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::WriteChars(int, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned, (unsigned)10&rang;(T1, int, int)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)10&rang;(Num2Ascii::ISink&, T1, int, int, const char*)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)10&rang;(Num2Ascii::ISink&, T1, int, int)
</UL>

<P><STRONG><a name="[11d]"></a>unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int)</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, formatter.o(t._ZN9Num2Ascii6FormatIjLj16EEEjT_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssertionFailed(const char*, const char*, unsigned, const char*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackCheck()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::GetLength() const
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::WritePrefix()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::WriteDigit(unsigned char)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::WriteChars(int, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int)
</UL>

<P><STRONG><a name="[11b]"></a>unsigned Num2Ascii::Format&lang;unsigned long long, (unsigned)10&rang;(T1, int, int)</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, formatter.o(t._ZN9Num2Ascii6FormatIyLj10EEEjT_ii), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssertionFailed(const char*, const char*, unsigned, const char*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackCheck()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned long long, (unsigned)10&rang;(T1, int, int)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::GetLength() const
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::WritePrefix()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::WriteDigit(unsigned char)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::WriteChars(int, unsigned char)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned long long, (unsigned)10&rang;(T1, int, int)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned long long, (unsigned)10&rang;(Num2Ascii::ISink&, T1, int, int)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned long long, (unsigned)10&rang;(Num2Ascii::ISink&, T1, int, int, const char*)
</UL>

<P><STRONG><a name="[11e]"></a>unsigned Num2Ascii::Format&lang;unsigned long long, (unsigned)16&rang;(T1, int, int)</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, formatter.o(t._ZN9Num2Ascii6FormatIyLj16EEEjT_ii), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssertionFailed(const char*, const char*, unsigned, const char*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackCheck()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned long long, (unsigned)16&rang;(T1, int, int)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::GetLength() const
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::WritePrefix()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::WriteDigit(unsigned char)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::WriteChars(int, unsigned char)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned long long, (unsigned)16&rang;(T1, int, int)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned long long, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned long long, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int)
</UL>

<P><STRONG><a name="[9f]"></a>Singleton&lang;Port&lang;rbGPIOA&rang;&rang;::GetInstance()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIOAEEE11GetInstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Singleton&lang;Port&lang;rbGPIOA&rang;&rang;::GetInstance() &rArr; Singleton&lang;Port&lang;rbGPIOA&rang;&rang;::Create() &rArr; InstanceWrapper&lang;Port&lang;rbGPIOA&rang;&rang;::InstanceWrapper() &rArr; Port&lang;rbGPIOA&rang;::Port() &rArr; AHBClockEnable(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOA&rang;&rang;::Create()
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDio::CreateInstanceA()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvdiog.o(.init_array)
</UL>
<P><STRONG><a name="[1e1]"></a>Singleton&lang;Port&lang;rbGPIOA&rang;&rang;::Create()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIOAEEE6CreateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Singleton&lang;Port&lang;rbGPIOA&rang;&rang;::Create() &rArr; InstanceWrapper&lang;Port&lang;rbGPIOA&rang;&rang;::InstanceWrapper() &rArr; Port&lang;rbGPIOA&rang;::Port() &rArr; AHBClockEnable(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOA&rang;&rang;::InstanceWrapper()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOA&rang;&rang;::GetInstance()
</UL>

<P><STRONG><a name="[a0]"></a>Singleton&lang;Port&lang;rbGPIOB&rang;&rang;::GetInstance()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIOBEEE11GetInstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Singleton&lang;Port&lang;rbGPIOB&rang;&rang;::GetInstance() &rArr; Singleton&lang;Port&lang;rbGPIOB&rang;&rang;::Create() &rArr; InstanceWrapper&lang;Port&lang;rbGPIOB&rang;&rang;::InstanceWrapper() &rArr; Port&lang;rbGPIOB&rang;::Port() &rArr; AHBClockEnable(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOB&rang;&rang;::Create()
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDio::CreateInstanceB()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvdiog.o(.init_array)
</UL>
<P><STRONG><a name="[1e2]"></a>Singleton&lang;Port&lang;rbGPIOB&rang;&rang;::Create()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIOBEEE6CreateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Singleton&lang;Port&lang;rbGPIOB&rang;&rang;::Create() &rArr; InstanceWrapper&lang;Port&lang;rbGPIOB&rang;&rang;::InstanceWrapper() &rArr; Port&lang;rbGPIOB&rang;::Port() &rArr; AHBClockEnable(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOB&rang;&rang;::InstanceWrapper()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOB&rang;&rang;::GetInstance()
</UL>

<P><STRONG><a name="[a1]"></a>Singleton&lang;Port&lang;rbGPIOC&rang;&rang;::GetInstance()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIOCEEE11GetInstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Singleton&lang;Port&lang;rbGPIOC&rang;&rang;::GetInstance() &rArr; Singleton&lang;Port&lang;rbGPIOC&rang;&rang;::Create() &rArr; InstanceWrapper&lang;Port&lang;rbGPIOC&rang;&rang;::InstanceWrapper() &rArr; Port&lang;rbGPIOC&rang;::Port() &rArr; AHBClockEnable(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOC&rang;&rang;::Create()
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDio::CreateInstanceC()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvdiog.o(.init_array)
</UL>
<P><STRONG><a name="[1e3]"></a>Singleton&lang;Port&lang;rbGPIOC&rang;&rang;::Create()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIOCEEE6CreateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Singleton&lang;Port&lang;rbGPIOC&rang;&rang;::Create() &rArr; InstanceWrapper&lang;Port&lang;rbGPIOC&rang;&rang;::InstanceWrapper() &rArr; Port&lang;rbGPIOC&rang;::Port() &rArr; AHBClockEnable(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOC&rang;&rang;::InstanceWrapper()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOC&rang;&rang;::GetInstance()
</UL>

<P><STRONG><a name="[a2]"></a>Singleton&lang;Port&lang;rbGPIOD&rang;&rang;::GetInstance()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIODEEE11GetInstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Singleton&lang;Port&lang;rbGPIOD&rang;&rang;::GetInstance() &rArr; Singleton&lang;Port&lang;rbGPIOD&rang;&rang;::Create() &rArr; InstanceWrapper&lang;Port&lang;rbGPIOD&rang;&rang;::InstanceWrapper() &rArr; Port&lang;rbGPIOD&rang;::Port() &rArr; AHBClockEnable(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOD&rang;&rang;::Create()
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDio::CreateInstanceD()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvdiog.o(.init_array)
</UL>
<P><STRONG><a name="[1e4]"></a>Singleton&lang;Port&lang;rbGPIOD&rang;&rang;::Create()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIODEEE6CreateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Singleton&lang;Port&lang;rbGPIOD&rang;&rang;::Create() &rArr; InstanceWrapper&lang;Port&lang;rbGPIOD&rang;&rang;::InstanceWrapper() &rArr; Port&lang;rbGPIOD&rang;::Port() &rArr; AHBClockEnable(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOD&rang;&rang;::InstanceWrapper()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOD&rang;&rang;::GetInstance()
</UL>

<P><STRONG><a name="[a3]"></a>Singleton&lang;Port&lang;rbGPIOF&rang;&rang;::GetInstance()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIOFEEE11GetInstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Singleton&lang;Port&lang;rbGPIOF&rang;&rang;::GetInstance() &rArr; Singleton&lang;Port&lang;rbGPIOF&rang;&rang;::Create() &rArr; InstanceWrapper&lang;Port&lang;rbGPIOF&rang;&rang;::InstanceWrapper() &rArr; Port&lang;rbGPIOF&rang;::Port() &rArr; AHBClockEnable(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOF&rang;&rang;::Create()
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDio::CreateInstanceF()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvdiog.o(.init_array)
</UL>
<P><STRONG><a name="[1e5]"></a>Singleton&lang;Port&lang;rbGPIOF&rang;&rang;::Create()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIOFEEE6CreateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Singleton&lang;Port&lang;rbGPIOF&rang;&rang;::Create() &rArr; InstanceWrapper&lang;Port&lang;rbGPIOF&rang;&rang;::InstanceWrapper() &rArr; Port&lang;rbGPIOF&rang;::Port() &rArr; AHBClockEnable(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOF&rang;&rang;::InstanceWrapper()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOF&rang;&rang;::GetInstance()
</UL>

<P><STRONG><a name="[a4]"></a>Singleton&lang;Port&lang;rbGPIOG&rang;&rang;::GetInstance()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIOGEEE11GetInstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Singleton&lang;Port&lang;rbGPIOG&rang;&rang;::GetInstance() &rArr; Singleton&lang;Port&lang;rbGPIOG&rang;&rang;::Create() &rArr; InstanceWrapper&lang;Port&lang;rbGPIOG&rang;&rang;::InstanceWrapper() &rArr; Port&lang;rbGPIOG&rang;::Port() &rArr; AHBClockEnable(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOG&rang;&rang;::Create()
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDio::CreateInstanceG()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvdiog.o(.init_array)
</UL>
<P><STRONG><a name="[1e6]"></a>Singleton&lang;Port&lang;rbGPIOG&rang;&rang;::Create()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drvdiog.o(t._ZN9SingletonI4PortIL_Z7rbGPIOGEEE6CreateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Singleton&lang;Port&lang;rbGPIOG&rang;&rang;::Create() &rArr; InstanceWrapper&lang;Port&lang;rbGPIOG&rang;&rang;::InstanceWrapper() &rArr; Port&lang;rbGPIOG&rang;::Port() &rArr; AHBClockEnable(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstanceWrapper&lang;Port&lang;rbGPIOG&rang;&rang;::InstanceWrapper()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Singleton&lang;Port&lang;rbGPIOG&rang;&rang;::GetInstance()
</UL>

<P><STRONG><a name="[eb]"></a>void Ili9341::Command&lang;(unsigned)15&rang;(unsigned char, const unsigned char(&)[T1]) const</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ili9341.o(t._ZNK7Ili93417CommandILj15EEEvhRAT__Kh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = void Ili9341::Command&lang;(unsigned)15&rang;(unsigned char, const unsigned char(&)[T1]) const &rArr; Ili9341::SendCmd(unsigned char, const unsigned char*, unsigned) const &rArr; Ili9341::SendCommand(unsigned char) const &rArr; IWrPin::Clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::SendCmd(unsigned char, const unsigned char*, unsigned) const
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::Start()
</UL>

<P><STRONG><a name="[e6]"></a>void Ili9341::Command&lang;(unsigned)3&rang;(unsigned char, const unsigned char(&)[T1]) const</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ili9341.o(t._ZNK7Ili93417CommandILj3EEEvhRAT__Kh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = void Ili9341::Command&lang;(unsigned)3&rang;(unsigned char, const unsigned char(&)[T1]) const &rArr; Ili9341::SendCmd(unsigned char, const unsigned char*, unsigned) const &rArr; Ili9341::SendCommand(unsigned char) const &rArr; IWrPin::Clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::SendCmd(unsigned char, const unsigned char*, unsigned) const
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::Start()
</UL>

<P><STRONG><a name="[e9]"></a>void Ili9341::Command&lang;(unsigned)4&rang;(unsigned char, const unsigned char(&)[T1]) const</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ili9341.o(t._ZNK7Ili93417CommandILj4EEEvhRAT__Kh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = void Ili9341::Command&lang;(unsigned)4&rang;(unsigned char, const unsigned char(&)[T1]) const &rArr; Ili9341::SendCmd(unsigned char, const unsigned char*, unsigned) const &rArr; Ili9341::SendCommand(unsigned char) const &rArr; IWrPin::Clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::SendCmd(unsigned char, const unsigned char*, unsigned) const
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::Start()
</UL>

<P><STRONG><a name="[e7]"></a>void Ili9341::Command&lang;(unsigned)5&rang;(unsigned char, const unsigned char(&)[T1]) const</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ili9341.o(t._ZNK7Ili93417CommandILj5EEEvhRAT__Kh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = void Ili9341::Command&lang;(unsigned)5&rang;(unsigned char, const unsigned char(&)[T1]) const &rArr; Ili9341::SendCmd(unsigned char, const unsigned char*, unsigned) const &rArr; Ili9341::SendCommand(unsigned char) const &rArr; IWrPin::Clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::SendCmd(unsigned char, const unsigned char*, unsigned) const
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ili9341::Start()
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c0]"></a>[local to STM32F429_DISCO_Start_cpp]::Initialize()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f429_disco_start.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = [local to STM32F429_DISCO_Start_cpp]::Initialize() &rArr; StackCheck() &rArr; Cortex::Reset() &rArr; Cortex::IsPrivileged() &rArr; Cortex::IsThreadMode() &rArr; Cortex::GetCurrentIsrNum() &rArr; Cortex::GetIPSR()
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::FpuDisable()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItmPutS(const char*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackCheck()
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>[local to Formatter_cpp]::WriteValDec(Num2Ascii::ISink&, const unsigned long long&, int, int, const char*)</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, formatter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned long long, (unsigned)10&rang;(Num2Ascii::ISink&, T1, int, int, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintSINT64Dec(const long long&, int, int, bool)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT64Dec(const unsigned long long&, int, int, bool)
</UL>

<P><STRONG><a name="[102]"></a>[local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, formatter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT32Hex(unsigned, int, int, bool)
</UL>

<P><STRONG><a name="[101]"></a>[local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*)</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, formatter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT32Hex(unsigned, int, int, bool)
</UL>

<P><STRONG><a name="[105]"></a>[local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, const unsigned long long&, int, int)</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, formatter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned long long, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT64Hex(const unsigned long long&, int, int, bool)
</UL>

<P><STRONG><a name="[104]"></a>[local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, const unsigned long long&, int, int, const char*)</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, formatter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned long long, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT64Hex(const unsigned long long&, int, int, bool)
</UL>

<P><STRONG><a name="[fa]"></a>[local to Formatter_cpp]::WriteValDec(Num2Ascii::ISink&, unsigned, int, int)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, formatter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = [local to Formatter_cpp]::WriteValDec(Num2Ascii::ISink&, unsigned, int, int) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)10&rang;(Num2Ascii::ISink&, T1, int, int) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)10&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)10&rang;(Num2Ascii::ISink&, T1, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT32Dec(unsigned, int, int, bool)
</UL>

<P><STRONG><a name="[f9]"></a>[local to Formatter_cpp]::WriteValDec(Num2Ascii::ISink&, unsigned, int, int, const char*)</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, formatter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = [local to Formatter_cpp]::WriteValDec(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)10&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)10&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)10&rang;(Num2Ascii::ISink&, T1, int, int, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintSINT32Dec(int, int, int, bool)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT32Dec(unsigned, int, int, bool)
</UL>

<P><STRONG><a name="[fd]"></a>[local to Formatter_cpp]::WriteValDec(Num2Ascii::ISink&, const unsigned long long&, int, int)</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, formatter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned long long, (unsigned)10&rang;(Num2Ascii::ISink&, T1, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Formatter::PrintUINT64Dec(const unsigned long long&, int, int, bool)
</UL>

<P><STRONG><a name="[f6]"></a>unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned long long, (unsigned)10&rang;(Num2Ascii::ISink&, T1, int, int, const char*)</STRONG> (Thumb, 58 bytes, Stack size 64 bytes, formatter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned long long, (unsigned)10&rang;(T1, int, int)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::~Num2Ascii()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::Num2Ascii(Num2Ascii::ISink&, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Formatter_cpp]::WriteValDec(Num2Ascii::ISink&, const unsigned long long&, int, int, const char*)
</UL>

<P><STRONG><a name="[113]"></a>unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int)</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, formatter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::~Num2Ascii()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::Num2Ascii(Num2Ascii::ISink&)
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int)
</UL>

<P><STRONG><a name="[114]"></a>unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*)</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, formatter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::~Num2Ascii()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::Num2Ascii(Num2Ascii::ISink&, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*)
</UL>

<P><STRONG><a name="[115]"></a>unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned long long, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int)</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, formatter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned long long, (unsigned)16&rang;(T1, int, int)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::~Num2Ascii()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::Num2Ascii(Num2Ascii::ISink&)
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, const unsigned long long&, int, int)
</UL>

<P><STRONG><a name="[116]"></a>unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned long long, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*)</STRONG> (Thumb, 58 bytes, Stack size 64 bytes, formatter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned long long, (unsigned)16&rang;(T1, int, int)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::~Num2Ascii()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::Num2Ascii(Num2Ascii::ISink&, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, const unsigned long long&, int, int, const char*)
</UL>

<P><STRONG><a name="[117]"></a>unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)10&rang;(Num2Ascii::ISink&, T1, int, int)</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, formatter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)10&rang;(Num2Ascii::ISink&, T1, int, int) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)10&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned, (unsigned)10&rang;(T1, int, int)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::~Num2Ascii()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::Num2Ascii(Num2Ascii::ISink&)
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Formatter_cpp]::WriteValDec(Num2Ascii::ISink&, unsigned, int, int)
</UL>

<P><STRONG><a name="[118]"></a>unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)10&rang;(Num2Ascii::ISink&, T1, int, int, const char*)</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, formatter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)10&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)10&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned, (unsigned)10&rang;(T1, int, int)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::~Num2Ascii()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::Num2Ascii(Num2Ascii::ISink&, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Formatter_cpp]::WriteValDec(Num2Ascii::ISink&, unsigned, int, int, const char*)
</UL>

<P><STRONG><a name="[119]"></a>unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned long long, (unsigned)10&rang;(Num2Ascii::ISink&, T1, int, int)</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, formatter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned Num2Ascii::Format&lang;unsigned long long, (unsigned)10&rang;(T1, int, int)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::~Num2Ascii()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num2Ascii::Num2Ascii(Num2Ascii::ISink&)
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Formatter_cpp]::WriteValDec(Num2Ascii::ISink&, const unsigned long long&, int, int)
</UL>

<P><STRONG><a name="[120]"></a>Num2Ascii::WritePrefix()::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, formatter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = Num2Ascii::WritePrefix()::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssertionFailed(const char*, const char*, unsigned, const char*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsValidPointer(const volatile void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const char*& CheckValue&lang;const char*&&rang;::Verify&lang;Num2Ascii::WritePrefix()::[lambda(const volatile void*) (instance 1)]&rang;(const char*&, T1)
</UL>

<P><STRONG><a name="[122]"></a>Formatter::PrintTxt(const char*, int)::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, formatter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = Formatter::PrintTxt(const char*, int)::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssertionFailed(const char*, const char*, unsigned, const char*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsValidPointer(const volatile void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const char*& CheckValue&lang;const char*&&rang;::Verify&lang;Formatter::PrintTxt(const char*, int)::[lambda(const volatile void*) (instance 1)]&rang;(const char*&, T1)
</UL>

<P><STRONG><a name="[123]"></a>Formatter::PrintTxtQuoted(const char*)::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, formatter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = Formatter::PrintTxtQuoted(const char*)::[lambda(const volatile void*) (instance 1)]::operator ()(const volatile void*) const &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssertionFailed(const char*, const char*, unsigned, const char*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsValidPointer(const volatile void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const char*& CheckValue&lang;const char*&&rang;::Verify&lang;Formatter::PrintTxtQuoted(const char*)::[lambda(const volatile void*) (instance 1)]&rang;(const char*&, T1)
</UL>

<P><STRONG><a name="[12]"></a>IRQ_HrdFlt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ_HrdFlt &rArr; HandleHrdFlt &rArr; [local to Faults_cpp]::ResetOnFault() &rArr; Cortex::SetPRIMASK_privileged() &rArr;  Cortex::SetPRIMASK_privileged() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleHrdFlt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>IRQ_MemFlt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ_MemFlt &rArr; HandleMemFlt &rArr; [local to Faults_cpp]::ResetOnFault() &rArr; Cortex::SetPRIMASK_privileged() &rArr;  Cortex::SetPRIMASK_privileged() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleMemFlt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>IRQ_BusFlt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ_BusFlt &rArr; HandleBusFlt &rArr; [local to Faults_cpp]::ResetOnFault() &rArr; Cortex::SetPRIMASK_privileged() &rArr;  Cortex::SetPRIMASK_privileged() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleBusFlt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>IRQ_UsgFlt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ_UsgFlt &rArr; HandleUsgFlt &rArr; [local to Faults_cpp]::ResetOnFault() &rArr; Cortex::SetPRIMASK_privileged() &rArr;  Cortex::SetPRIMASK_privileged() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleUsgFlt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>IRQ_SVC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f429_startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = IRQ_SVC &rArr; HandleSVC &rArr; PsvTrigger_privileged() &rArr;  PsvTrigger_privileged() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSVC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_startup.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>[local to STM32F429_init_cpp]::LocalInit()</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, stm32f429_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [local to STM32F429_init_cpp]::LocalInit() &rArr; void Cortex::SwitchStack&lang;(unsigned)4096&rang;(unsigned(&)[T1]) &rArr; Cortex::SwitchStack(unsigned*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::DSB()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SetBASEPRI_privileged(unsigned)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SetPRIMASK_privileged()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::ClrPRIMASK_privileged()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetMinPrio()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Cortex::SwitchStack&lang;(unsigned)4096&rang;(unsigned(&)[T1])
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::ISB()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to STM32F429_init_cpp]::Init_SCB_FAULTS()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to STM32F429_init_cpp]::Init_STK()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f429_init.o(.init_array.00102)
</UL>
<P><STRONG><a name="[12a]"></a>[local to STM32F429_init_cpp]::EnableClock()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f429_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VeryFirstInit
</UL>

<P><STRONG><a name="[12b]"></a>[local to STM32F429_init_cpp]::EnableOverdrive()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f429_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [local to STM32F429_init_cpp]::EnableOverdrive() &rArr; APBClockEnable(unsigned) &rArr; T1 Atomic::Orr&lang;unsigned&rang;(volatile T1&, T1) &rArr; T1 Atomic::Modify&lang;unsigned, (Atomic::BinOpType)5&rang;(volatile T1&, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APBClockEnable(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VeryFirstInit
</UL>

<P><STRONG><a name="[132]"></a>[local to STM32F429_init_cpp]::Init_STK()</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f429_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = [local to STM32F429_init_cpp]::Init_STK()
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HClk()
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to STM32F429_init_cpp]::LocalInit()
</UL>

<P><STRONG><a name="[131]"></a>[local to STM32F429_init_cpp]::Init_SCB_FAULTS()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f429_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to STM32F429_init_cpp]::LocalInit()
</UL>

<P><STRONG><a name="[13f]"></a>[local to DrvDio_cpp]::WrGpioMDExt(volatile __regbank_GPIO&, unsigned, unsigned, bool, bool)</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, drvdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [local to DrvDio_cpp]::WrGpioMDExt(volatile __regbank_GPIO&, unsigned, unsigned, bool, bool) &rArr; T1 Atomic::Bfld&lang;unsigned&rang;(volatile T1&, T1, T1) &rArr; bool Cortex::SaveConditional&lang;unsigned&rang;(volatile T1&, T1) &rArr; Cortex::ArmExclusive&lang;(unsigned)4&rang;::StrEx(volatile unsigned&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 Atomic::Bfld&lang;unsigned&rang;(volatile T1&, T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinHelper::PinHelper(volatile __regbank_GPIO&, unsigned, unsigned)
</UL>

<P><STRONG><a name="[144]"></a>[local to Faults_cpp]::ResetOnFault()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, faults.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to Faults_cpp]::ResetOnFault() &rArr; Cortex::SetPRIMASK_privileged() &rArr;  Cortex::SetPRIMASK_privileged() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::SetPRIMASK_privileged()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_WSR_faultmask(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleMemFlt
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleBusFlt
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleUsgFlt
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleHrdFlt
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_NMI
</UL>

<P><STRONG><a name="[159]"></a>[local to STK_cpp]::STK_FineTime(unsigned, unsigned)</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, stk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMULL(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cortex::GetFineTime(unsigned)
</UL>

<P><STRONG><a name="[15c]"></a>[local to SVC_cpp]::Word2WordPtr(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, svc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSVC
</UL>

<P><STRONG><a name="[165]"></a>[local to Debug_cpp]::CheckRange(unsigned, unsigned, unsigned)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to Debug_cpp]::CheckRange(unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsValidPointer(const volatile void*)
</UL>

<P><STRONG><a name="[9c]"></a>[local to Debug_cpp]::LocalInit()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to Debug_cpp]::LocalInit() &rArr; ItmPutS(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItmPutS(const char*)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackCheckInit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug.o(.init_array.00101)
</UL>
<P><STRONG><a name="[9e]"></a>[local to Initialize_cpp]::LocalInit()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, initialize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = [local to Initialize_cpp]::LocalInit() &rArr; std::set_terminate(void(*)()) &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; _mutex_release &rArr; AssertionFailed(const char*, const char*, unsigned, const char*) &rArr; void ItmPrint&lang;&lang;char[5], const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&...) &rArr; void Formatter::Print&lang;char[5], &lang;const char*, char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::Digits, unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::Digits, &lang;unsigned, char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;unsigned, &lang;char[3], const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char[3], &lang;const char*, char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;const char*, &lang;char, Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;char, &lang;Formatter::AsTxt&rang;&rang;(const T1&, const T2&...) &rArr; void Formatter::Print&lang;Formatter::AsTxt&rang;(const T1&) &rArr; void PrintObj&lang;Formatter::AsTxt&rang;(Formatter&, const T1&) &rArr; Formatter::AsTxt::ToString(Formatter&) const &rArr; Formatter::PrintTxtQuoted(const char*) &rArr; Formatter::WriteByte(unsigned char) &rArr; Formatter::PrintUINT32Hex(unsigned, int, int, bool) &rArr; [local to Formatter_cpp]::WriteValHex(Num2Ascii::ISink&, unsigned, int, int, const char*) &rArr; unsigned [local to Formatter_cpp]::WriteVal&lang;unsigned, (unsigned)16&rang;(Num2Ascii::ISink&, T1, int, int, const char*) &rArr; unsigned Num2Ascii::Format&lang;unsigned, (unsigned)16&rang;(T1, int, int) &rArr;  AssertionFailed(const char*, const char*, unsigned, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::set_terminate(void(*)())
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::set_new_handler(void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> initialize.o(.init_array.00110)
</UL>
<P><STRONG><a name="[7c]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler() &rArr; abort &rArr; Cortex::Reset() &rArr; Cortex::IsPrivileged() &rArr; Cortex::IsThreadMode() &rArr; Cortex::GetCurrentIsrNum() &rArr; Cortex::GetIPSR()
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
